"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpsRedirect = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_certificatemanager_1 = require("../../aws-certificatemanager");
const aws_cloudfront_1 = require("../../aws-cloudfront");
const aws_route53_1 = require("../../aws-route53");
const aws_route53_targets_1 = require("../../aws-route53-targets");
const aws_s3_1 = require("../../aws-s3");
const core_1 = require("../../core");
const helpers_internal_1 = require("../../core/lib/helpers-internal");
const cx_api_1 = require("../../cx-api");
const constructs_1 = require("constructs");
/**
 * Allows creating a domainA -> domainB redirect using CloudFront and S3.
 * You can specify multiple domains to be redirected.
 */
class HttpsRedirect extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_patterns_HttpsRedirectProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, HttpsRedirect);
            }
            throw error;
        }
        const domainNames = props.recordNames ?? [props.zone.zoneName];
        if (props.certificate) {
            const certificateRegion = core_1.Stack.of(this).splitArn(props.certificate.certificateArn, core_1.ArnFormat.SLASH_RESOURCE_NAME).region;
            if (!core_1.Token.isUnresolved(certificateRegion) && certificateRegion !== 'us-east-1') {
                throw new Error(`The certificate must be in the us-east-1 region and the certificate you provided is in ${certificateRegion}.`);
            }
        }
        const redirectCert = props.certificate ?? this.createCertificate(domainNames, props.zone);
        const redirectBucket = new aws_s3_1.Bucket(this, 'RedirectBucket', {
            websiteRedirect: {
                hostName: props.targetDomain,
                protocol: aws_s3_1.RedirectProtocol.HTTPS,
            },
            removalPolicy: core_1.RemovalPolicy.DESTROY,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
        });
        const redirectDist = new aws_cloudfront_1.CloudFrontWebDistribution(this, 'RedirectDistribution', {
            defaultRootObject: '',
            originConfigs: [{
                    behaviors: [{ isDefaultBehavior: true }],
                    customOriginSource: {
                        domainName: redirectBucket.bucketWebsiteDomainName,
                        originProtocolPolicy: aws_cloudfront_1.OriginProtocolPolicy.HTTP_ONLY,
                    },
                }],
            viewerCertificate: aws_cloudfront_1.ViewerCertificate.fromAcmCertificate(redirectCert, {
                aliases: domainNames,
            }),
            comment: `Redirect to ${props.targetDomain} from ${domainNames.join(', ')}`,
            priceClass: aws_cloudfront_1.PriceClass.PRICE_CLASS_ALL,
            viewerProtocolPolicy: aws_cloudfront_1.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
        });
        domainNames.forEach((domainName) => {
            const hash = (0, helpers_internal_1.md5hash)(domainName).slice(0, 6);
            const aliasProps = {
                recordName: domainName,
                zone: props.zone,
                target: aws_route53_1.RecordTarget.fromAlias(new aws_route53_targets_1.CloudFrontTarget(redirectDist)),
            };
            new aws_route53_1.ARecord(this, `RedirectAliasRecord${hash}`, aliasProps);
            new aws_route53_1.AaaaRecord(this, `RedirectAliasRecordSix${hash}`, aliasProps);
        });
    }
    /**
     * Gets the stack to use for creating the Certificate
     * If the current stack is not in `us-east-1` then this
     * will create a new `us-east-1` stack.
     *
     * CloudFront is a global resource which you can create (via CloudFormation) from
     * _any_ region. So I could create a CloudFront distribution in `us-east-2` if I wanted
     * to (maybe the rest of my application lives there). The problem is that some supporting resources
     * that CloudFront uses (i.e. ACM Certificates) are required to exist in `us-east-1`. This means
     * that if I want to create a CloudFront distribution in `us-east-2` I still need to create a ACM certificate in
     * `us-east-1`.
     *
     * In order to do this correctly we need to know which region the CloudFront distribution is being created in.
     * We have two options, either require the user to specify the region or make an assumption if they do not.
     * This implementation requires the user specify the region.
     */
    certificateScope() {
        const stack = core_1.Stack.of(this);
        const parent = stack.node.scope;
        if (!parent) {
            throw new Error(`Stack ${stack.stackId} must be created in the scope of an App or Stage`);
        }
        if (core_1.Token.isUnresolved(stack.region)) {
            throw new Error(`When ${cx_api_1.ROUTE53_PATTERNS_USE_CERTIFICATE} is enabled, a region must be defined on the Stack`);
        }
        if (stack.region !== 'us-east-1') {
            const stackId = `certificate-redirect-stack-${stack.node.addr}`;
            const certStack = parent.node.tryFindChild(stackId);
            return certStack ?? new core_1.Stack(parent, stackId, {
                env: { region: 'us-east-1', account: stack.account },
            });
        }
        return this;
    }
    /**
     * Creates a certificate.
     *
     * If the `ROUTE53_PATTERNS_USE_CERTIFICATE` feature flag is set then
     * this will use the `Certificate` class otherwise it will use the
     * `DnsValidatedCertificate` class
     *
     * This is also safe to upgrade since the new certificate will be created and updated
     * on the CloudFront distribution before the old one is deleted.
     */
    createCertificate(domainNames, zone) {
        const useCertificate = core_1.FeatureFlags.of(this).isEnabled(cx_api_1.ROUTE53_PATTERNS_USE_CERTIFICATE);
        if (useCertificate) {
            // this preserves backwards compatibility. Previously the certificate was always created in `this` scope
            // so we need to keep the name the same
            const id = (this.certificateScope() === this) ? 'RedirectCertificate' : 'RedirectCertificate' + this.node.addr;
            return new aws_certificatemanager_1.Certificate(this.certificateScope(), id, {
                domainName: domainNames[0],
                subjectAlternativeNames: domainNames,
                validation: aws_certificatemanager_1.CertificateValidation.fromDns(zone),
            });
        }
        else {
            return new aws_certificatemanager_1.DnsValidatedCertificate(this, 'RedirectCertificate', {
                domainName: domainNames[0],
                subjectAlternativeNames: domainNames,
                hostedZone: zone,
                region: 'us-east-1',
            });
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
HttpsRedirect[_a] = { fqn: "aws-cdk-lib.aws_route53_patterns.HttpsRedirect", version: "2.75.1" };
exports.HttpsRedirect = HttpsRedirect;
//# sourceMappingURL=data:application/json;base64,