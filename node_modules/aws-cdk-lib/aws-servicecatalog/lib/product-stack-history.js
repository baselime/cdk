"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductStackHistory = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const core_1 = require("../../core");
const constructs_1 = require("constructs");
const cloudformation_template_1 = require("./cloudformation-template");
const common_1 = require("./common");
/**
 * A Construct that contains a Service Catalog product stack with its previous deployments maintained.
 */
class ProductStackHistory extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_servicecatalog_ProductStackHistoryProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ProductStackHistory);
            }
            throw error;
        }
        props.productStack._setParentProductStackHistory(this);
        this.props = props;
    }
    /**
     * Retains product stack template as a snapshot when deployed and
     * retrieves a CloudFormationProductVersion for the current product version.
     */
    currentVersion() {
        return {
            cloudFormationTemplate: cloudformation_template_1.CloudFormationTemplate.fromProductStack(this.props.productStack),
            productVersionName: this.props.currentVersionName,
            description: this.props.description,
        };
    }
    /**
     * Retrieves a CloudFormationProductVersion from a previously deployed productVersionName.
     */
    versionFromSnapshot(productVersionName) {
        const productStackSnapshotDirectory = this.props.directory || common_1.DEFAULT_PRODUCT_STACK_SNAPSHOT_DIRECTORY;
        const templateFileKey = `${core_1.Names.uniqueId(this)}.${this.props.productStack.artifactId}.${productVersionName}.product.template.json`;
        const templateFilePath = path.join(productStackSnapshotDirectory, templateFileKey);
        if (!fs.existsSync(templateFilePath)) {
            throw new Error(`Template ${templateFileKey} cannot be found in ${productStackSnapshotDirectory}`);
        }
        return {
            cloudFormationTemplate: cloudformation_template_1.CloudFormationTemplate.fromAsset(templateFilePath),
            productVersionName: productVersionName,
            description: this.props.description,
        };
    }
    /**
     * Writes current template generated from Product Stack to a snapshot directory.
     *
     * @internal
     */
    _writeTemplateToSnapshot(cfn) {
        const productStackSnapshotDirectory = this.props.directory || common_1.DEFAULT_PRODUCT_STACK_SNAPSHOT_DIRECTORY;
        if (!fs.existsSync(productStackSnapshotDirectory)) {
            fs.mkdirSync(productStackSnapshotDirectory, { recursive: true });
        }
        const templateFileKey = `${core_1.Names.uniqueId(this)}.${this.props.productStack.artifactId}.${this.props.currentVersionName}.product.template.json`;
        const templateFilePath = path.join(productStackSnapshotDirectory, templateFileKey);
        if (fs.existsSync(templateFilePath)) {
            const previousCfn = fs.readFileSync(templateFilePath).toString();
            if (previousCfn !== cfn && this.props.currentVersionLocked) {
                throw new Error(`Template has changed for ProductStack Version ${this.props.currentVersionName}.
        ${this.props.currentVersionName} already exist in ${productStackSnapshotDirectory}.
        Since locked has been set to ${this.props.currentVersionLocked},
        Either update the currentVersionName to deploy a new version or deploy the existing ProductStack snapshot.
        If ${this.props.currentVersionName} was unintentionally synthesized and not deployed, 
        delete the corresponding version from ${productStackSnapshotDirectory} and redeploy.`);
            }
        }
        fs.writeFileSync(templateFilePath, cfn);
    }
}
_a = JSII_RTTI_SYMBOL_1;
ProductStackHistory[_a] = { fqn: "aws-cdk-lib.aws_servicecatalog.ProductStackHistory", version: "2.75.1" };
exports.ProductStackHistory = ProductStackHistory;
//# sourceMappingURL=data:application/json;base64,