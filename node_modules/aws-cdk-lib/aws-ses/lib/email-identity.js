"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailIdentity = exports.EasyDkimSigningKeyLength = exports.DkimIdentity = exports.MailFromBehaviorOnMxFailure = exports.Identity = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const route53 = require("../../aws-route53");
const core_1 = require("../../core");
const utils_1 = require("./private/utils");
const ses_generated_1 = require("./ses.generated");
/**
 * Identity
 */
class Identity {
    /**
     * Verify an email address
     *
     * To complete the verification process look for an email from
     * no-reply-aws@amazon.com, open it and click the link.
     */
    static email(email) {
        return { value: email };
    }
    /**
     * Verify a domain name
     *
     * DKIM records will have to be added manually to complete the verification
     * process
     */
    static domain(domain) {
        return { value: domain };
    }
    /**
     * Verify a public hosted zone
     *
     * DKIM and MAIL FROM records will be added automatically to the hosted
     * zone
     */
    static publicHostedZone(hostedZone) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_IPublicHostedZone(hostedZone);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.publicHostedZone);
            }
            throw error;
        }
        return {
            value: hostedZone.zoneName,
            hostedZone,
        };
    }
}
_a = JSII_RTTI_SYMBOL_1;
Identity[_a] = { fqn: "aws-cdk-lib.aws_ses.Identity", version: "2.75.1" };
exports.Identity = Identity;
/**
 * The action to take if the required MX record for the MAIL FROM domain isn't
 * found
 */
var MailFromBehaviorOnMxFailure;
(function (MailFromBehaviorOnMxFailure) {
    /**
     * The mail is sent using amazonses.com as the MAIL FROM domain
     */
    MailFromBehaviorOnMxFailure["USE_DEFAULT_VALUE"] = "USE_DEFAULT_VALUE";
    /**
     * The Amazon SES API v2 returns a `MailFromDomainNotVerified` error and doesn't
     * attempt to deliver the email
     */
    MailFromBehaviorOnMxFailure["REJECT_MESSAGE"] = "REJECT_MESSAGE";
})(MailFromBehaviorOnMxFailure = exports.MailFromBehaviorOnMxFailure || (exports.MailFromBehaviorOnMxFailure = {}));
/**
 * The identity to use for DKIM
 */
class DkimIdentity {
    /**
     * Easy DKIM
     *
     * @param signingKeyLength The length of the signing key. This can be changed at
     *   most once per day.
     *
     * @see https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html
     */
    static easyDkim(signingKeyLength) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ses_EasyDkimSigningKeyLength(signingKeyLength);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.easyDkim);
            }
            throw error;
        }
        return new EasyDkim(signingKeyLength);
    }
    /**
     * Bring Your Own DKIM
     *
     * @param options Options for BYO DKIM
     *
     * @see https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-bring-your-own.html
     */
    static byoDkim(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ses_ByoDkimOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.byoDkim);
            }
            throw error;
        }
        return new ByoDkim(options);
    }
}
_b = JSII_RTTI_SYMBOL_1;
DkimIdentity[_b] = { fqn: "aws-cdk-lib.aws_ses.DkimIdentity", version: "2.75.1" };
exports.DkimIdentity = DkimIdentity;
class EasyDkim extends DkimIdentity {
    constructor(signingKeyLength) {
        super();
        this.signingKeyLength = signingKeyLength;
    }
    bind(emailIdentity, hostedZone) {
        if (hostedZone) {
            // Use CfnRecordSet instead of CnameRecord to avoid current bad handling of
            // tokens in route53.determineFullyQualifiedDomainName() at https://github.com/aws/aws-cdk/blob/main/packages/%40aws-cdk/aws-route53/lib/util.ts
            new route53.CfnRecordSet(emailIdentity, 'DkimDnsToken1', {
                hostedZoneId: hostedZone.hostedZoneId,
                name: core_1.Lazy.string({ produce: () => emailIdentity.dkimDnsTokenName1 }),
                type: 'CNAME',
                resourceRecords: [core_1.Lazy.string({ produce: () => emailIdentity.dkimDnsTokenValue1 })],
                ttl: '1800',
            });
            new route53.CfnRecordSet(emailIdentity, 'DkimDnsToken2', {
                hostedZoneId: hostedZone.hostedZoneId,
                name: core_1.Lazy.string({ produce: () => emailIdentity.dkimDnsTokenName2 }),
                type: 'CNAME',
                resourceRecords: [core_1.Lazy.string({ produce: () => emailIdentity.dkimDnsTokenValue2 })],
                ttl: '1800',
            });
            new route53.CfnRecordSet(emailIdentity, 'DkimDnsToken3', {
                hostedZoneId: hostedZone.hostedZoneId,
                name: core_1.Lazy.string({ produce: () => emailIdentity.dkimDnsTokenName3 }),
                type: 'CNAME',
                resourceRecords: [core_1.Lazy.string({ produce: () => emailIdentity.dkimDnsTokenValue3 })],
                ttl: '1800',
            });
        }
        return this.signingKeyLength
            ? { nextSigningKeyLength: this.signingKeyLength }
            : undefined;
    }
}
class ByoDkim extends DkimIdentity {
    constructor(options) {
        super();
        this.options = options;
    }
    bind(emailIdentity, hostedZone) {
        if (hostedZone && this.options.publicKey) {
            new route53.TxtRecord(emailIdentity, 'DkimTxt', {
                zone: hostedZone,
                recordName: `${this.options.selector}._domainkey`,
                values: [`p=${this.options.publicKey}`],
            });
        }
        return {
            domainSigningPrivateKey: this.options.privateKey.unsafeUnwrap(),
            domainSigningSelector: this.options.selector,
        };
    }
}
/**
 * The signing key length for Easy DKIM
 */
var EasyDkimSigningKeyLength;
(function (EasyDkimSigningKeyLength) {
    /**
     * RSA 1024-bit
     */
    EasyDkimSigningKeyLength["RSA_1024_BIT"] = "RSA_1024_BIT";
    /**
     * RSA 2048-bit
     */
    EasyDkimSigningKeyLength["RSA_2048_BIT"] = "RSA_2048_BIT";
})(EasyDkimSigningKeyLength = exports.EasyDkimSigningKeyLength || (exports.EasyDkimSigningKeyLength = {}));
/**
 * An email identity
 */
class EmailIdentity extends core_1.Resource {
    /**
     * Use an existing email identity
     */
    static fromEmailIdentityName(scope, id, emailIdentityName) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.emailIdentityName = emailIdentityName;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ses_EmailIdentityProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, EmailIdentity);
            }
            throw error;
        }
        const dkimIdentity = props.dkimIdentity ?? DkimIdentity.easyDkim();
        const identity = new ses_generated_1.CfnEmailIdentity(this, 'Resource', {
            emailIdentity: props.identity.value,
            configurationSetAttributes: (0, utils_1.undefinedIfNoKeys)({
                configurationSetName: props.configurationSet?.configurationSetName,
            }),
            dkimAttributes: (0, utils_1.undefinedIfNoKeys)({
                signingEnabled: props.dkimSigning,
            }),
            dkimSigningAttributes: dkimIdentity.bind(this, props.identity.hostedZone),
            feedbackAttributes: (0, utils_1.undefinedIfNoKeys)({
                emailForwardingEnabled: props.feedbackForwarding,
            }),
            mailFromAttributes: (0, utils_1.undefinedIfNoKeys)({
                mailFromDomain: props.mailFromDomain,
                behaviorOnMxFailure: props.mailFromBehaviorOnMxFailure,
            }),
        });
        if (props.mailFromDomain && props.identity.hostedZone) {
            new route53.MxRecord(this, 'MailFromMxRecord', {
                zone: props.identity.hostedZone,
                recordName: props.mailFromDomain,
                values: [{
                        priority: 10,
                        hostName: `feedback-smtp.${core_1.Stack.of(this).region}.amazonses.com`,
                    }],
            });
            new route53.TxtRecord(this, 'MailFromTxtRecord', {
                zone: props.identity.hostedZone,
                recordName: props.mailFromDomain,
                values: ['v=spf1 include:amazonses.com ~all'],
            });
        }
        this.emailIdentityName = identity.ref;
        this.dkimDnsTokenName1 = identity.attrDkimDnsTokenName1;
        this.dkimDnsTokenName2 = identity.attrDkimDnsTokenName2;
        this.dkimDnsTokenName3 = identity.attrDkimDnsTokenName3;
        this.dkimDnsTokenValue1 = identity.attrDkimDnsTokenValue1;
        this.dkimDnsTokenValue2 = identity.attrDkimDnsTokenValue2;
        this.dkimDnsTokenValue3 = identity.attrDkimDnsTokenValue3;
        this.dkimRecords = [
            { name: this.dkimDnsTokenName1, value: this.dkimDnsTokenValue1 },
            { name: this.dkimDnsTokenName2, value: this.dkimDnsTokenValue2 },
            { name: this.dkimDnsTokenName3, value: this.dkimDnsTokenValue3 },
        ];
    }
}
_c = JSII_RTTI_SYMBOL_1;
EmailIdentity[_c] = { fqn: "aws-cdk-lib.aws_ses.EmailIdentity", version: "2.75.1" };
exports.EmailIdentity = EmailIdentity;
//# sourceMappingURL=data:application/json;base64,