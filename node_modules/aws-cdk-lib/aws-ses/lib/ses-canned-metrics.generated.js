"use strict";
// Copyright 2012-2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SESMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class SESMetrics {
    static bounceSum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Bounce',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static clickSum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Click',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static complaintSum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Complaint',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliverySum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Delivery',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static openSum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Open',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static rejectSum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Reject',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static renderingFailureSum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'RenderingFailure',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static reputationBounceRateAverage(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Reputation.BounceRate',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static reputationComplaintRateAverage(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Reputation.ComplaintRate',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static sendSum(dimensions) {
        return {
            namespace: 'AWS/SES',
            metricName: 'Send',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
}
exports.SESMetrics = SESMetrics;
//# sourceMappingURL=data:application/json;base64,