"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationSetEventDestination = exports.CloudWatchDimensionSource = exports.EmailSendingEvent = exports.EventDestination = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../aws-iam");
const core_1 = require("../../core");
const ses_generated_1 = require("./ses.generated");
/**
 * An event destination
 */
class EventDestination {
    /**
     * Use a SNS topic as event destination
     */
    static snsTopic(topic) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_sns_ITopic(topic);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.snsTopic);
            }
            throw error;
        }
        return { topic };
    }
    /**
     * Use CloudWatch dimensions as event destination
     */
    static cloudWatchDimensions(dimensions) {
        return { dimensions };
    }
}
_a = JSII_RTTI_SYMBOL_1;
EventDestination[_a] = { fqn: "aws-cdk-lib.aws_ses.EventDestination", version: "2.75.1" };
exports.EventDestination = EventDestination;
/**
 * Email sending event
 */
var EmailSendingEvent;
(function (EmailSendingEvent) {
    /**
     * The send request was successful and SES will attempt to deliver the message
     * to the recipient's mail server. (If account-level or global suppression is
     * being used, SES will still count it as a send, but delivery is suppressed.)
     */
    EmailSendingEvent["SEND"] = "send";
    /**
     * SES accepted the email, but determined that it contained a virus and didn’t
     * attempt to deliver it to the recipient’s mail server.
     */
    EmailSendingEvent["REJECT"] = "reject";
    /**
     * (Hard bounce) The recipient's mail server permanently rejected the email.
     * (Soft bounces are only included when SES fails to deliver the email after
     * retrying for a period of time.)
     */
    EmailSendingEvent["BOUNCE"] = "bounce";
    /**
     * The email was successfully delivered to the recipient’s mail server, but the
     * recipient marked it as spam.
     */
    EmailSendingEvent["COMPLAINT"] = "complaint";
    /**
     * SES successfully delivered the email to the recipient's mail server.
     */
    EmailSendingEvent["DELIVERY"] = "delivery";
    /**
     * The recipient received the message and opened it in their email client.
     */
    EmailSendingEvent["OPEN"] = "open";
    /**
     * The recipient clicked one or more links in the email.
     */
    EmailSendingEvent["CLICK"] = "click";
    /**
     * The email wasn't sent because of a template rendering issue. This event type
     * can occur when template data is missing, or when there is a mismatch between
     * template parameters and data. (This event type only occurs when you send email
     * using the `SendTemplatedEmail` or `SendBulkTemplatedEmail` API operations.)
     */
    EmailSendingEvent["RENDERING_FAILURE"] = "renderingFailure";
    /**
     * The email couldn't be delivered to the recipient’s mail server because a temporary
     * issue occurred. Delivery delays can occur, for example, when the recipient's inbox
     * is full, or when the receiving email server experiences a transient issue.
     */
    EmailSendingEvent["DELIVERY_DELAY"] = "deliveryDelay";
    /**
     * The email was successfully delivered, but the recipient updated their subscription
     * preferences by clicking on an unsubscribe link as part of your subscription management.
     */
    EmailSendingEvent["SUBSCRIPTION"] = "subscription";
})(EmailSendingEvent = exports.EmailSendingEvent || (exports.EmailSendingEvent = {}));
/**
 * Source for CloudWatch dimension
 */
var CloudWatchDimensionSource;
(function (CloudWatchDimensionSource) {
    /**
     * Amazon SES retrieves the dimension name and value from a header in the email.
     *
     * Note: You can't use any of the following email headers as the Dimension Name:
     * `Received`, `To`, `From`, `DKIM-Signature`, `CC`, `message-id`, or `Return-Path`.
     */
    CloudWatchDimensionSource["EMAIL_HEADER"] = "emailHeader";
    /**
     * Amazon SES retrieves the dimension name and value from a tag that you specified in a link.
     *
     * @see https://docs.aws.amazon.com/ses/latest/dg/faqs-metrics.html#sending-metric-faqs-clicks-q5
     */
    CloudWatchDimensionSource["LINK_TAG"] = "linkTag";
    /**
     * Amazon SES retrieves the dimension name and value from a tag that you specify by using the
     * `X-SES-MESSAGE-TAGS` header or the Tags API parameter.
     *
     * You can also use the Message Tag value source to create dimensions based on Amazon SES auto-tags.
     * To use an auto-tag, type the complete name of the auto-tag as the Dimension Name. For example,
     * to create a dimension based on the configuration set auto-tag, use `ses:configuration-set` for the
     * Dimension Name, and the name of the configuration set for the Default Value.
     *
     * @see https://docs.aws.amazon.com/ses/latest/dg/event-publishing-send-email.html
     * @see https://docs.aws.amazon.com/ses/latest/dg/monitor-using-event-publishing.html#event-publishing-how-works
     */
    CloudWatchDimensionSource["MESSAGE_TAG"] = "messageTag";
})(CloudWatchDimensionSource = exports.CloudWatchDimensionSource || (exports.CloudWatchDimensionSource = {}));
/**
 * A configuration set event destination
 */
class ConfigurationSetEventDestination extends core_1.Resource {
    /**
     * Use an existing configuration set
     */
    static fromConfigurationSetEventDestinationId(scope, id, configurationSetEventDestinationId) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.configurationSetEventDestinationId = configurationSetEventDestinationId;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.configurationSetEventDestinationName,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ses_ConfigurationSetEventDestinationProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ConfigurationSetEventDestination);
            }
            throw error;
        }
        const configurationSet = new ses_generated_1.CfnConfigurationSetEventDestination(this, 'Resource', {
            configurationSetName: props.configurationSet.configurationSetName,
            eventDestination: {
                name: this.physicalName,
                enabled: props.enabled ?? true,
                matchingEventTypes: props.events ?? Object.values(EmailSendingEvent),
                snsDestination: props.destination.topic ? { topicArn: props.destination.topic.topicArn } : undefined,
                cloudWatchDestination: props.destination.dimensions
                    ? {
                        dimensionConfigurations: props.destination.dimensions.map(dimension => ({
                            dimensionValueSource: dimension.source,
                            dimensionName: dimension.name,
                            defaultDimensionValue: dimension.defaultValue,
                        })),
                    }
                    : undefined,
            },
        });
        this.configurationSetEventDestinationId = configurationSet.attrId;
        if (props.destination.topic) {
            const result = props.destination.topic.addToResourcePolicy(new iam.PolicyStatement({
                actions: ['sns:Publish'],
                resources: [props.destination.topic.topicArn],
                principals: [new iam.ServicePrincipal('ses.amazonaws.com')],
                conditions: {
                    StringEquals: {
                        'AWS:SourceAccount': this.env.account,
                        'AWS:SourceArn': `arn:aws:ses:${this.env.region}:${this.env.account}:configuration-set/${props.configurationSet.configurationSetName}`,
                    },
                },
            }));
            if (result.policyDependable) {
                this.node.addDependency(result.policyDependable);
            }
        }
    }
}
_b = JSII_RTTI_SYMBOL_1;
ConfigurationSetEventDestination[_b] = { fqn: "aws-cdk-lib.aws_ses.ConfigurationSetEventDestination", version: "2.75.1" };
exports.ConfigurationSetEventDestination = ConfigurationSetEventDestination;
//# sourceMappingURL=data:application/json;base64,