"use strict";
// Copyright 2012-2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class DynamoDBMetrics {
    static conditionalCheckFailedRequestsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ConditionalCheckFailedRequests',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static consumedReadCapacityUnitsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ConsumedReadCapacityUnits',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static consumedWriteCapacityUnitsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ConsumedWriteCapacityUnits',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static provisionedReadCapacityUnitsAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ProvisionedReadCapacityUnits',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static provisionedWriteCapacityUnitsAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ProvisionedWriteCapacityUnits',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static readThrottleEventsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ReadThrottleEvents',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static timeToLiveDeletedItemCountSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'TimeToLiveDeletedItemCount',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static transactionConflictAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'TransactionConflict',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static writeThrottleEventsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'WriteThrottleEvents',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static successfulRequestLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'SuccessfulRequestLatency',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static systemErrorsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'SystemErrors',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static throttledRequestsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ThrottledRequests',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static returnedItemCountSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ReturnedItemCount',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static onlineIndexConsumedWriteCapacitySum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'OnlineIndexConsumedWriteCapacity',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static onlineIndexPercentageProgressAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'OnlineIndexPercentageProgress',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static onlineIndexThrottleEventsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'OnlineIndexThrottleEvents',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static ageOfOldestUnreplicatedRecordAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'AgeOfOldestUnreplicatedRecord',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static consumedChangeDataCaptureUnitsAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ConsumedChangeDataCaptureUnits',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static throttledPutRecordCountAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ThrottledPutRecordCount',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static pendingReplicationCountAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'PendingReplicationCount',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static replicationLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ReplicationLatency',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static returnedBytesAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ReturnedBytes',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static returnedRecordsCountAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'ReturnedRecordsCount',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static accountMaxReadsMaximum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'AccountMaxReads',
            dimensionsMap: dimensions,
            statistic: 'Maximum',
        };
    }
    static accountMaxTableLevelReadsMaximum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'AccountMaxTableLevelReads',
            dimensionsMap: dimensions,
            statistic: 'Maximum',
        };
    }
    static accountMaxTableLevelWritesMaximum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'AccountMaxTableLevelWrites',
            dimensionsMap: dimensions,
            statistic: 'Maximum',
        };
    }
    static accountMaxWritesMaximum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'AccountMaxWrites',
            dimensionsMap: dimensions,
            statistic: 'Maximum',
        };
    }
    static accountProvisionedReadCapacityUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'AccountProvisionedReadCapacityUtilization',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static accountProvisionedWriteCapacityUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'AccountProvisionedWriteCapacityUtilization',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static maxProvisionedTableReadCapacityUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'MaxProvisionedTableReadCapacityUtilization',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static maxProvisionedTableWriteCapacityUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'MaxProvisionedTableWriteCapacityUtilization',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static userErrorsSum(dimensions) {
        return {
            namespace: 'AWS/DynamoDB',
            metricName: 'UserErrors',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
}
exports.DynamoDBMetrics = DynamoDBMetrics;
//# sourceMappingURL=data:application/json;base64,