"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrecreatedRole = void 0;
const core_1 = require("../../../core");
const helpers_internal_1 = require("../../../core/lib/helpers-internal");
const constructs_1 = require("constructs");
/**
 * An IAM role that has been created outside of CDK and can be
 * used in place of a role that CDK _is_ creating.
 *
 * When any policy is attached to a precreated role the policy will be
 * synthesized into a separate report and will _not_ be synthesized in
 * the CloudFormation template.
 */
class PrecreatedRole extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            account: props.role.env.account,
            region: props.role.env.region,
        });
        this.grantPrincipal = this;
        this.policyStatements = [];
        this.managedPolicies = [];
        this.role = props.role;
        this.assumeRoleAction = this.role.assumeRoleAction;
        this.policyFragment = this.role.policyFragment;
        this.principalAccount = this.role.principalAccount;
        this.roleArn = this.role.roleArn;
        this.roleName = this.role.roleName;
        this.stack = this.role.stack;
        const rolePath = props.rolePath ?? this.node.path;
        constructs_1.Dependable.implement(this, {
            dependencyRoots: [this.role],
        });
        // add a single PolicySynthesizer under the `App` scope
        this.policySynthesizer = helpers_internal_1.PolicySynthesizer.getOrCreate(this);
        this.policySynthesizer.addRole(rolePath, {
            roleName: this.roleName,
            managedPolicies: this.managedPolicies,
            policyStatements: this.policyStatements,
            assumeRolePolicy: core_1.Stack.of(this).resolve(props.assumeRolePolicy?.toJSON()?.Statement),
            missing: props.missing,
        });
    }
    attachInlinePolicy(policy) {
        const statements = policy.document.toJSON()?.Statement;
        if (statements && Array.isArray(statements)) {
            statements.forEach(statement => {
                this.policyStatements.push(statement);
            });
        }
    }
    addManagedPolicy(policy) {
        this.managedPolicies.push(policy);
    }
    addToPolicy(statement) {
        this.policyStatements.push(statement.toStatementJson());
        return false;
    }
    addToPrincipalPolicy(statement) {
        this.addToPolicy(statement);
        // If we return `false`, the grants will try to add the statement to the resource
        // (if possible).
        return { statementAdded: true, policyDependable: new constructs_1.DependencyGroup() };
    }
    grant(grantee, ...actions) {
        return this.role.grant(grantee, ...actions);
    }
    grantPassRole(grantee) {
        return this.role.grantPassRole(grantee);
    }
    grantAssumeRole(identity) {
        return this.role.grantAssumeRole(identity);
    }
}
exports.PrecreatedRole = PrecreatedRole;
//# sourceMappingURL=data:application/json;base64,