"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cors = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const util_1 = require("./util");
class Cors {
    // utility class
    constructor() { }
}
_a = JSII_RTTI_SYMBOL_1;
Cors[_a] = { fqn: "aws-cdk-lib.aws_apigateway.Cors", version: "2.75.1" };
/**
 * All HTTP methods.
 */
Cors.ALL_METHODS = util_1.ALL_METHODS;
/**
 * All origins.
 */
Cors.ALL_ORIGINS = ['*'];
/**
 * The set of default headers allowed for CORS and useful for API Gateway.
 */
Cors.DEFAULT_HEADERS = ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent'];
exports.Cors = Cors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxpQ0FBcUM7QUFnR3JDLE1BQWEsSUFBSTtJQWdCZixnQkFBZ0I7SUFDaEIsaUJBQXlCOzs7O0FBaEJ6Qjs7R0FFRztBQUNvQixnQkFBVyxHQUFHLGtCQUFXLENBQUM7QUFFakQ7O0dBRUc7QUFDb0IsZ0JBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRTNDOztHQUVHO0FBQ29CLG9CQUFlLEdBQUcsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQWR2SSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBBTExfTUVUSE9EUyB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29yc09wdGlvbnMge1xuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSByZXNwb25zZSBzdGF0dXMgY29kZSByZXR1cm5lZCBmcm9tIHRoZSBPUFRJT05TIG1ldGhvZC5cbiAgICpcbiAgICogQGRlZmF1bHQgMjA0XG4gICAqL1xuICByZWFkb25seSBzdGF0dXNDb2RlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGxpc3Qgb2Ygb3JpZ2lucyB0aGF0IGFyZSBhbGxvd2VkIHRvIG1ha2UgcmVxdWVzdHMgdG8gdGhpc1xuICAgKiByZXNvdXJjZS4gSWYgeW91IHdpc2ggdG8gYWxsb3cgYWxsIG9yaWdpbnMsIHNwZWNpZnkgYENvcnMuQUxMX09SSUdJTlNgIG9yXG4gICAqIGBbICogXWAuXG4gICAqXG4gICAqIFJlc3BvbnNlcyB3aWxsIGluY2x1ZGUgdGhlIGBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5gIHJlc3BvbnNlIGhlYWRlci5cbiAgICogSWYgYENvcnMuQUxMX09SSUdJTlNgIGlzIHNwZWNpZmllZCwgdGhlIGBWYXJ5OiBPcmlnaW5gIHJlc3BvbnNlIGhlYWRlciB3aWxsXG4gICAqIGFsc28gYmUgaW5jbHVkZWQuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblxuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dPcmlnaW5zOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMgcmVzcG9uc2UgaGVhZGVyIGlzIHVzZWQgaW4gcmVzcG9uc2UgdG8gYVxuICAgKiBwcmVmbGlnaHQgcmVxdWVzdCB3aGljaCBpbmNsdWRlcyB0aGUgQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1IZWFkZXJzIHRvXG4gICAqIGluZGljYXRlIHdoaWNoIEhUVFAgaGVhZGVycyBjYW4gYmUgdXNlZCBkdXJpbmcgdGhlIGFjdHVhbCByZXF1ZXN0LlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXG4gICAqIEBkZWZhdWx0IENvcnMuREVGQVVMVF9IRUFERVJTXG4gICAqL1xuICByZWFkb25seSBhbGxvd0hlYWRlcnM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMgcmVzcG9uc2UgaGVhZGVyIHNwZWNpZmllcyB0aGUgbWV0aG9kIG9yXG4gICAqIG1ldGhvZHMgYWxsb3dlZCB3aGVuIGFjY2Vzc2luZyB0aGUgcmVzb3VyY2UgaW4gcmVzcG9uc2UgdG8gYSBwcmVmbGlnaHQgcmVxdWVzdC5cbiAgICpcbiAgICogSWYgYEFOWWAgaXMgc3BlY2lmaWVkLCBpdCB3aWxsIGJlIGV4cGFuZGVkIHRvIGBDb3JzLkFMTF9NRVRIT0RTYC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1xuICAgKiBAZGVmYXVsdCBDb3JzLkFMTF9NRVRIT0RTXG4gICAqL1xuICByZWFkb25seSBhbGxvd01ldGhvZHM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzIHJlc3BvbnNlIGhlYWRlciB0ZWxscyBicm93c2VycyB3aGV0aGVyXG4gICAqIHRvIGV4cG9zZSB0aGUgcmVzcG9uc2UgdG8gZnJvbnRlbmQgSmF2YVNjcmlwdCBjb2RlIHdoZW4gdGhlIHJlcXVlc3Qnc1xuICAgKiBjcmVkZW50aWFscyBtb2RlIChSZXF1ZXN0LmNyZWRlbnRpYWxzKSBpcyBcImluY2x1ZGVcIi5cbiAgICpcbiAgICogV2hlbiBhIHJlcXVlc3QncyBjcmVkZW50aWFscyBtb2RlIChSZXF1ZXN0LmNyZWRlbnRpYWxzKSBpcyBcImluY2x1ZGVcIixcbiAgICogYnJvd3NlcnMgd2lsbCBvbmx5IGV4cG9zZSB0aGUgcmVzcG9uc2UgdG8gZnJvbnRlbmQgSmF2YVNjcmlwdCBjb2RlIGlmIHRoZVxuICAgKiBBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscyB2YWx1ZSBpcyB0cnVlLlxuICAgKlxuICAgKiBDcmVkZW50aWFscyBhcmUgY29va2llcywgYXV0aG9yaXphdGlvbiBoZWFkZXJzIG9yIFRMUyBjbGllbnQgY2VydGlmaWNhdGVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc1xuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dDcmVkZW50aWFscz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1NYXgtQWdlIHJlc3BvbnNlIGhlYWRlciBpbmRpY2F0ZXMgaG93IGxvbmcgdGhlIHJlc3VsdHMgb2ZcbiAgICogYSBwcmVmbGlnaHQgcmVxdWVzdCAodGhhdCBpcyB0aGUgaW5mb3JtYXRpb24gY29udGFpbmVkIGluIHRoZVxuICAgKiBBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzIGFuZCBBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzIGhlYWRlcnMpXG4gICAqIGNhbiBiZSBjYWNoZWQuXG4gICAqXG4gICAqIFRvIGRpc2FibGUgY2FjaGluZyBhbHRvZ2V0aGVyIHVzZSBgZGlzYWJsZUNhY2hlOiB0cnVlYC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtTWF4LUFnZVxuICAgKiBAZGVmYXVsdCAtIGJyb3dzZXItc3BlY2lmaWMgKHNlZSByZWZlcmVuY2UpXG4gICAqL1xuICByZWFkb25seSBtYXhBZ2U/OiBEdXJhdGlvbjtcblxuICAvKipcbiAgICogU2V0cyBBY2Nlc3MtQ29udHJvbC1NYXgtQWdlIHRvIC0xLCB3aGljaCBtZWFucyB0aGF0IGNhY2hpbmcgaXMgZGlzYWJsZWQuXG4gICAqIFRoaXMgb3B0aW9uIGNhbm5vdCBiZSB1c2VkIHdpdGggYG1heEFnZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gY2FjaGUgaXMgZW5hYmxlZFxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZUNhY2hlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzIHJlc3BvbnNlIGhlYWRlciBpbmRpY2F0ZXMgd2hpY2ggaGVhZGVyc1xuICAgKiBjYW4gYmUgZXhwb3NlZCBhcyBwYXJ0IG9mIHRoZSByZXNwb25zZSBieSBsaXN0aW5nIHRoZWlyIG5hbWVzLlxuICAgKlxuICAgKiBJZiB5b3Ugd2FudCBjbGllbnRzIHRvIGJlIGFibGUgdG8gYWNjZXNzIG90aGVyIGhlYWRlcnMsIHlvdSBoYXZlIHRvIGxpc3RcbiAgICogdGhlbSB1c2luZyB0aGUgQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnMgaGVhZGVyLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVyc1xuICAgKlxuICAgKiBAZGVmYXVsdCAtIG9ubHkgdGhlIDYgQ09SUy1zYWZlbGlzdGVkIHJlc3BvbnNlIGhlYWRlcnMgYXJlIGV4cG9zZWQ6XG4gICAqIENhY2hlLUNvbnRyb2wsIENvbnRlbnQtTGFuZ3VhZ2UsIENvbnRlbnQtVHlwZSwgRXhwaXJlcywgTGFzdC1Nb2RpZmllZCxcbiAgICogUHJhZ21hXG4gICAqL1xuICByZWFkb25seSBleHBvc2VIZWFkZXJzPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBDb3JzIHtcbiAgLyoqXG4gICAqIEFsbCBIVFRQIG1ldGhvZHMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFMTF9NRVRIT0RTID0gQUxMX01FVEhPRFM7XG5cbiAgLyoqXG4gICAqIEFsbCBvcmlnaW5zLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTExfT1JJR0lOUyA9IFsnKiddO1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0IG9mIGRlZmF1bHQgaGVhZGVycyBhbGxvd2VkIGZvciBDT1JTIGFuZCB1c2VmdWwgZm9yIEFQSSBHYXRld2F5LlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBERUZBVUxUX0hFQURFUlMgPSBbJ0NvbnRlbnQtVHlwZScsICdYLUFtei1EYXRlJywgJ0F1dGhvcml6YXRpb24nLCAnWC1BcGktS2V5JywgJ1gtQW16LVNlY3VyaXR5LVRva2VuJywgJ1gtQW16LVVzZXItQWdlbnQnXTtcblxuICAvLyB1dGlsaXR5IGNsYXNzXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7IH1cbn1cbiJdfQ==