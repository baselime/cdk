"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestAuthorizer = exports.TokenAuthorizer = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../../aws-iam");
const lambda = require("../../../aws-lambda");
const core_1 = require("../../../core");
const cx_api_1 = require("../../../cx-api");
const apigateway_generated_1 = require("../apigateway.generated");
const authorizer_1 = require("../authorizer");
class LambdaAuthorizer extends authorizer_1.Authorizer {
    constructor(scope, id, props) {
        super(scope, id);
        this.handler = props.handler;
        this.role = props.assumeRole;
        if (props.resultsCacheTtl && props.resultsCacheTtl?.toSeconds() > 3600) {
            throw new Error('Lambda authorizer property \'resultsCacheTtl\' must not be greater than 3600 seconds (1 hour)');
        }
    }
    /**
     * Attaches this authorizer to a specific REST API.
     * @internal
     */
    _attachToApi(restApi) {
        if (this.restApiId && this.restApiId !== restApi.restApiId) {
            throw new Error('Cannot attach authorizer to two different rest APIs');
        }
        this.restApiId = restApi.restApiId;
        const deployment = restApi.latestDeployment;
        const addToLogicalId = core_1.FeatureFlags.of(this).isEnabled(cx_api_1.APIGATEWAY_AUTHORIZER_CHANGE_DEPLOYMENT_LOGICAL_ID);
        if (deployment && addToLogicalId) {
            let functionName;
            if (this.handler instanceof lambda.Function) {
                // if not imported, attempt to get the function name, which
                // may be a token
                functionName = this.handler.node.defaultChild.functionName;
            }
            else {
                // if imported, the function name will be a token
                functionName = this.handler.functionName;
            }
            deployment.node.addDependency(this);
            deployment.addToLogicalId({
                authorizer: this.authorizerProps,
                authorizerToken: functionName,
            });
        }
    }
    /**
     * Sets up the permissions necessary for the API Gateway service to invoke the Lambda function.
     */
    setupPermissions() {
        if (!this.role) {
            this.addDefaultPermisionRole();
        }
        else if (iam.Role.isRole(this.role)) {
            this.addLambdaInvokePermission(this.role);
        }
    }
    /**
     * Add Default Permission Role for handler
     */
    addDefaultPermisionRole() {
        this.handler.addPermission(`${core_1.Names.uniqueId(this)}:Permissions`, {
            principal: new iam.ServicePrincipal('apigateway.amazonaws.com'),
            sourceArn: this.authorizerArn,
        });
    }
    /**
     * Add Lambda Invoke Permission for LambdaAurhorizer's role
     */
    addLambdaInvokePermission(role) {
        role.attachInlinePolicy(new iam.Policy(this, 'authorizerInvokePolicy', {
            statements: [
                new iam.PolicyStatement({
                    resources: this.handler.resourceArnsForGrantInvoke,
                    actions: ['lambda:InvokeFunction'],
                }),
            ],
        }));
    }
    /**
     * Returns a token that resolves to the Rest Api Id at the time of synthesis.
     * Throws an error, during token resolution, if no RestApi is attached to this authorizer.
     */
    lazyRestApiId() {
        return core_1.Lazy.string({
            produce: () => {
                if (!this.restApiId) {
                    throw new Error(`Authorizer (${this.node.path}) must be attached to a RestApi`);
                }
                return this.restApiId;
            },
        });
    }
}
/**
 * Token based lambda authorizer that recognizes the caller's identity as a bearer token,
 * such as a JSON Web Token (JWT) or an OAuth token.
 * Based on the token, authorization is performed by a lambda function.
 *
 * @resource AWS::ApiGateway::Authorizer
 */
class TokenAuthorizer extends LambdaAuthorizer {
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_TokenAuthorizerProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, TokenAuthorizer);
            }
            throw error;
        }
        const restApiId = this.lazyRestApiId();
        const authorizerProps = {
            name: props.authorizerName ?? core_1.Names.uniqueId(this),
            restApiId,
            type: 'TOKEN',
            authorizerUri: lambdaAuthorizerArn(props.handler),
            authorizerCredentials: props.assumeRole?.roleArn,
            authorizerResultTtlInSeconds: props.resultsCacheTtl?.toSeconds(),
            identitySource: props.identitySource || 'method.request.header.Authorization',
            identityValidationExpression: props.validationRegex,
        };
        this.authorizerProps = authorizerProps;
        const resource = new apigateway_generated_1.CfnAuthorizer(this, 'Resource', authorizerProps);
        this.authorizerId = resource.ref;
        this.authorizerArn = core_1.Stack.of(this).formatArn({
            service: 'execute-api',
            resource: restApiId,
            resourceName: `authorizers/${this.authorizerId}`,
        });
        this.setupPermissions();
    }
}
_a = JSII_RTTI_SYMBOL_1;
TokenAuthorizer[_a] = { fqn: "aws-cdk-lib.aws_apigateway.TokenAuthorizer", version: "2.75.1" };
exports.TokenAuthorizer = TokenAuthorizer;
/**
 * Request-based lambda authorizer that recognizes the caller's identity via request parameters,
 * such as headers, paths, query strings, stage variables, or context variables.
 * Based on the request, authorization is performed by a lambda function.
 *
 * @resource AWS::ApiGateway::Authorizer
 */
class RequestAuthorizer extends LambdaAuthorizer {
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_RequestAuthorizerProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, RequestAuthorizer);
            }
            throw error;
        }
        if ((props.resultsCacheTtl === undefined || props.resultsCacheTtl.toSeconds() !== 0) && props.identitySources.length === 0) {
            throw new Error('At least one Identity Source is required for a REQUEST-based Lambda authorizer if caching is enabled.');
        }
        const restApiId = this.lazyRestApiId();
        const authorizerProps = {
            name: props.authorizerName ?? core_1.Names.uniqueId(this),
            restApiId,
            type: 'REQUEST',
            authorizerUri: lambdaAuthorizerArn(props.handler),
            authorizerCredentials: props.assumeRole?.roleArn,
            authorizerResultTtlInSeconds: props.resultsCacheTtl?.toSeconds(),
            identitySource: props.identitySources.map(is => is.toString()).join(','),
        };
        this.authorizerProps = authorizerProps;
        const resource = new apigateway_generated_1.CfnAuthorizer(this, 'Resource', authorizerProps);
        this.authorizerId = resource.ref;
        this.authorizerArn = core_1.Stack.of(this).formatArn({
            service: 'execute-api',
            resource: restApiId,
            resourceName: `authorizers/${this.authorizerId}`,
        });
        this.setupPermissions();
    }
}
_b = JSII_RTTI_SYMBOL_1;
RequestAuthorizer[_b] = { fqn: "aws-cdk-lib.aws_apigateway.RequestAuthorizer", version: "2.75.1" };
exports.RequestAuthorizer = RequestAuthorizer;
/**
 * constructs the authorizerURIArn.
 */
function lambdaAuthorizerArn(handler) {
    const { region, partition } = core_1.Arn.split(handler.functionArn, core_1.ArnFormat.COLON_RESOURCE_NAME);
    return `arn:${partition}:apigateway:${region}:lambda:path/2015-03-31/functions/${handler.functionArn}/invocations`;
}
//# sourceMappingURL=data:application/json;base64,