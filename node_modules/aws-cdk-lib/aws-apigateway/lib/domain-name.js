"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainName = exports.SecurityPolicy = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const apigwv2 = require("../../aws-apigatewayv2");
const core_1 = require("../../core");
const apigateway_generated_1 = require("./apigateway.generated");
const base_path_mapping_1 = require("./base-path-mapping");
const restapi_1 = require("./restapi");
/**
 * The minimum version of the SSL protocol that you want API Gateway to use for HTTPS connections.
 */
var SecurityPolicy;
(function (SecurityPolicy) {
    /** Cipher suite TLS 1.0 */
    SecurityPolicy["TLS_1_0"] = "TLS_1_0";
    /** Cipher suite TLS 1.2 */
    SecurityPolicy["TLS_1_2"] = "TLS_1_2";
})(SecurityPolicy = exports.SecurityPolicy || (exports.SecurityPolicy = {}));
class DomainName extends core_1.Resource {
    /**
     * Imports an existing domain name.
     */
    static fromDomainNameAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_DomainNameAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromDomainNameAttributes);
            }
            throw error;
        }
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.domainName = attrs.domainName;
                this.domainNameAliasDomainName = attrs.domainNameAliasTarget;
                this.domainNameAliasHostedZoneId = attrs.domainNameAliasHostedZoneId;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        this.basePaths = new Set();
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_DomainNameProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, DomainName);
            }
            throw error;
        }
        this.endpointType = props.endpointType || restapi_1.EndpointType.REGIONAL;
        const edge = this.endpointType === restapi_1.EndpointType.EDGE;
        this.securityPolicy = props.securityPolicy;
        if (!core_1.Token.isUnresolved(props.domainName) && /[A-Z]/.test(props.domainName)) {
            throw new Error(`Domain name does not support uppercase letters. Got: ${props.domainName}`);
        }
        const mtlsConfig = this.configureMTLS(props.mtls);
        const resource = new apigateway_generated_1.CfnDomainName(this, 'Resource', {
            domainName: props.domainName,
            certificateArn: edge ? props.certificate.certificateArn : undefined,
            regionalCertificateArn: edge ? undefined : props.certificate.certificateArn,
            endpointConfiguration: { types: [this.endpointType] },
            mutualTlsAuthentication: mtlsConfig,
            securityPolicy: props.securityPolicy,
        });
        this.domainName = resource.ref;
        this.domainNameAliasDomainName = edge
            ? resource.attrDistributionDomainName
            : resource.attrRegionalDomainName;
        this.domainNameAliasHostedZoneId = edge
            ? resource.attrDistributionHostedZoneId
            : resource.attrRegionalHostedZoneId;
        const multiLevel = this.validateBasePath(props.basePath);
        if (props.mapping && !multiLevel) {
            this.addBasePathMapping(props.mapping, {
                basePath: props.basePath,
            });
        }
        else if (props.mapping && multiLevel) {
            this.addApiMapping(props.mapping.deploymentStage, {
                basePath: props.basePath,
            });
        }
    }
    validateBasePath(path) {
        if (this.isMultiLevel(path)) {
            if (this.endpointType === restapi_1.EndpointType.EDGE) {
                throw new Error('multi-level basePath is only supported when endpointType is EndpointType.REGIONAL');
            }
            if (this.securityPolicy && this.securityPolicy !== SecurityPolicy.TLS_1_2) {
                throw new Error('securityPolicy must be set to TLS_1_2 if multi-level basePath is provided');
            }
            return true;
        }
        return false;
    }
    isMultiLevel(path) {
        return (path?.split('/').filter(x => !!x) ?? []).length >= 2;
    }
    /**
     * Maps this domain to an API endpoint.
     *
     * This uses the BasePathMapping from ApiGateway v1 which does not support multi-level paths.
     *
     * If you need to create a mapping for a multi-level path use `addApiMapping` instead.
     *
     * @param targetApi That target API endpoint, requests will be mapped to the deployment stage.
     * @param options Options for mapping to base path with or without a stage
     */
    addBasePathMapping(targetApi, options = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_IRestApi(targetApi);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_BasePathMappingOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addBasePathMapping);
            }
            throw error;
        }
        if (this.basePaths.has(options.basePath)) {
            throw new Error(`DomainName ${this.node.id} already has a mapping for path ${options.basePath}`);
        }
        if (this.isMultiLevel(options.basePath)) {
            throw new Error('BasePathMapping does not support multi-level paths. Use "addApiMapping instead.');
        }
        this.basePaths.add(options.basePath);
        const basePath = options.basePath || '/';
        const id = `Map:${basePath}=>${core_1.Names.nodeUniqueId(targetApi.node)}`;
        return new base_path_mapping_1.BasePathMapping(this, id, {
            domainName: this,
            restApi: targetApi,
            ...options,
        });
    }
    /**
     * Maps this domain to an API endpoint.
     *
     * This uses the ApiMapping from ApiGatewayV2 which supports multi-level paths, but
     * also only supports:
     * - SecurityPolicy.TLS_1_2
     * - EndpointType.REGIONAL
     *
     * @param targetStage the target API stage.
     * @param options Options for mapping to a stage
     */
    addApiMapping(targetStage, options = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_IStage(targetStage);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_ApiMappingOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addApiMapping);
            }
            throw error;
        }
        if (this.basePaths.has(options.basePath)) {
            throw new Error(`DomainName ${this.node.id} already has a mapping for path ${options.basePath}`);
        }
        this.validateBasePath(options.basePath);
        this.basePaths.add(options.basePath);
        const id = `Map:${options.basePath ?? 'none'}=>${core_1.Names.nodeUniqueId(targetStage.node)}`;
        new apigwv2.CfnApiMapping(this, id, {
            apiId: targetStage.restApi.restApiId,
            stage: targetStage.stageName,
            domainName: this.domainName,
            apiMappingKey: options.basePath,
        });
    }
    configureMTLS(mtlsConfig) {
        if (!mtlsConfig)
            return undefined;
        return {
            truststoreUri: mtlsConfig.bucket.s3UrlForObject(mtlsConfig.key),
            truststoreVersion: mtlsConfig.version,
        };
    }
}
_a = JSII_RTTI_SYMBOL_1;
DomainName[_a] = { fqn: "aws-cdk-lib.aws_apigateway.DomainName", version: "2.75.1" };
exports.DomainName = DomainName;
//# sourceMappingURL=data:application/json;base64,