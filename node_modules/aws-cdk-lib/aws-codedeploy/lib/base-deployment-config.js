"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseDeploymentConfig = exports.ComputePlatform = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const codedeploy_generated_1 = require("./codedeploy.generated");
const utils_1 = require("./private/utils");
/**
 * The compute platform of a deployment configuration
 */
var ComputePlatform;
(function (ComputePlatform) {
    /**
     * The deployment will target EC2 instances or on-premise servers
     */
    ComputePlatform["SERVER"] = "Server";
    /**
     * The deployment will target a Lambda function
     */
    ComputePlatform["LAMBDA"] = "Lambda";
    /**
     * The deployment will target an ECS server
     */
    ComputePlatform["ECS"] = "ECS";
})(ComputePlatform = exports.ComputePlatform || (exports.ComputePlatform = {}));
/**
 * The base class for ServerDeploymentConfig, EcsDeploymentConfig,
 * and LambdaDeploymentConfig deployment configurations.
 *
 * @resource AWS::CodeDeploy::DeploymentConfig
 */
class BaseDeploymentConfig extends core_1.Resource {
    /**
     * Import a custom Deployment Configuration for a Deployment Group defined outside the CDK.
     *
     * @param scope the parent Construct for this new Construct
     * @param id the logical ID of this new Construct
     * @param deploymentConfigName the name of the referenced custom Deployment Configuration
     * @returns a Construct representing a reference to an existing custom Deployment Configuration
     */
    static fromDeploymentConfigName(scope, id, deploymentConfigName) {
        ignore(id);
        const arn = core_1.Stack.of(scope).formatArn({
            service: 'codedeploy',
            resource: 'deploymentconfig',
            resourceName: deploymentConfigName,
            arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
        });
        return {
            deploymentConfigName: deploymentConfigName,
            deploymentConfigArn: arn,
        };
    }
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props?.deploymentConfigName,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codedeploy_BaseDeploymentConfigProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, BaseDeploymentConfig);
            }
            throw error;
        }
        // Traffic routing is not applicable to Server-based deployment configs
        if (props?.trafficRouting && (props?.computePlatform === undefined || props?.computePlatform === ComputePlatform.SERVER)) {
            throw new Error('Traffic routing config must not be specified for a Server-base deployment configuration');
        }
        // Minimum healthy hosts is only applicable to Server-based deployment configs
        if (props?.minimumHealthyHosts && props?.computePlatform && props?.computePlatform !== ComputePlatform.SERVER) {
            throw new Error('Minimum healthy hosts config must only be specified for a Server-base deployment configuration');
        }
        const resource = new codedeploy_generated_1.CfnDeploymentConfig(this, 'Resource', {
            deploymentConfigName: this.physicalName,
            computePlatform: props?.computePlatform,
            trafficRoutingConfig: props?.trafficRouting?.bind(this),
            minimumHealthyHosts: props?.minimumHealthyHosts?._json,
        });
        this.deploymentConfigName = this.getResourceNameAttribute(resource.ref);
        this.deploymentConfigArn = this.getResourceArnAttribute((0, utils_1.arnForDeploymentConfig)(resource.ref), {
            service: 'codedeploy',
            resource: 'deploymentconfig',
            resourceName: this.physicalName,
            arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
        });
        this.node.addValidation({ validate: () => (0, utils_1.validateName)('Deployment config', this.physicalName) });
    }
}
_a = JSII_RTTI_SYMBOL_1;
BaseDeploymentConfig[_a] = { fqn: "aws-cdk-lib.aws_codedeploy.BaseDeploymentConfig", version: "2.75.1" };
exports.BaseDeploymentConfig = BaseDeploymentConfig;
function ignore(_x) { return; }
//# sourceMappingURL=data:application/json;base64,