"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateName = exports.renderAutoRollbackConfiguration = exports.deploymentConfig = exports.renderAlarmConfiguration = exports.arnForDeploymentConfig = exports.nameFromDeploymentGroupArn = exports.arnForApplication = void 0;
const core_1 = require("../../../core");
function arnForApplication(stack, applicationName) {
    return stack.formatArn({
        service: 'codedeploy',
        resource: 'application',
        resourceName: applicationName,
        arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
    });
}
exports.arnForApplication = arnForApplication;
function nameFromDeploymentGroupArn(deploymentGroupArn) {
    const components = core_1.Arn.split(deploymentGroupArn, core_1.ArnFormat.COLON_RESOURCE_NAME);
    return core_1.Fn.select(1, core_1.Fn.split('/', components.resourceName ?? ''));
}
exports.nameFromDeploymentGroupArn = nameFromDeploymentGroupArn;
function arnForDeploymentConfig(name, resource) {
    return core_1.Arn.format({
        partition: core_1.Aws.PARTITION,
        account: resource?.env.account ?? core_1.Aws.ACCOUNT_ID,
        region: resource?.env.region ?? core_1.Aws.REGION,
        service: 'codedeploy',
        resource: 'deploymentconfig',
        resourceName: name,
        arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
    });
}
exports.arnForDeploymentConfig = arnForDeploymentConfig;
function renderAlarmConfiguration(alarms, ignorePollAlarmFailure, removeAlarms = true) {
    if (removeAlarms) {
        return {
            alarms: alarms.length > 0 ? alarms.map(a => ({ name: a.alarmName })) : undefined,
            enabled: alarms.length > 0,
            ignorePollAlarmFailure,
        };
    }
    return alarms.length === 0
        ? undefined
        : {
            alarms: alarms.map(a => ({ name: a.alarmName })),
            enabled: true,
            ignorePollAlarmFailure,
        };
}
exports.renderAlarmConfiguration = renderAlarmConfiguration;
function deploymentConfig(name) {
    return {
        deploymentConfigName: name,
        deploymentConfigArn: arnForDeploymentConfig(name),
        bindEnvironment: (resource) => ({
            deploymentConfigName: name,
            deploymentConfigArn: arnForDeploymentConfig(name, resource),
        }),
    };
}
exports.deploymentConfig = deploymentConfig;
var AutoRollbackEvent;
(function (AutoRollbackEvent) {
    AutoRollbackEvent["DEPLOYMENT_FAILURE"] = "DEPLOYMENT_FAILURE";
    AutoRollbackEvent["DEPLOYMENT_STOP_ON_ALARM"] = "DEPLOYMENT_STOP_ON_ALARM";
    AutoRollbackEvent["DEPLOYMENT_STOP_ON_REQUEST"] = "DEPLOYMENT_STOP_ON_REQUEST";
})(AutoRollbackEvent || (AutoRollbackEvent = {}));
function renderAutoRollbackConfiguration(alarms, autoRollbackConfig = {}) {
    const events = new Array();
    // we roll back failed deployments by default
    if (autoRollbackConfig.failedDeployment !== false) {
        events.push(AutoRollbackEvent.DEPLOYMENT_FAILURE);
    }
    // we _do not_ roll back stopped deployments by default
    if (autoRollbackConfig.stoppedDeployment === true) {
        events.push(AutoRollbackEvent.DEPLOYMENT_STOP_ON_REQUEST);
    }
    // we _do not_ roll back alarm-triggering deployments by default
    // unless the Deployment Group has at least one alarm
    if (autoRollbackConfig.deploymentInAlarm !== false) {
        if (alarms.length > 0) {
            events.push(AutoRollbackEvent.DEPLOYMENT_STOP_ON_ALARM);
        }
        else if (autoRollbackConfig.deploymentInAlarm === true) {
            throw new Error("The auto-rollback setting 'deploymentInAlarm' does not have any effect unless you associate " +
                'at least one CloudWatch alarm with the Deployment Group');
        }
    }
    if (autoRollbackConfig.failedDeployment === false
        && autoRollbackConfig.stoppedDeployment !== true
        && autoRollbackConfig.deploymentInAlarm === false) {
        return {
            enabled: false,
        };
    }
    return events.length > 0
        ? {
            enabled: true,
            events,
        }
        : undefined;
}
exports.renderAutoRollbackConfiguration = renderAutoRollbackConfiguration;
function validateName(type, name) {
    const ret = [];
    if (!core_1.Token.isUnresolved(name) && name !== undefined) {
        if (name.length > 100) {
            ret.push(`${type} name: "${name}" can be a max of 100 characters.`);
        }
        if (!/^[a-z0-9._+=,@-]+$/i.test(name)) {
            ret.push(`${type} name: "${name}" can only contain letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), + (plus signs), = (equals signs), , (commas), @ (at signs), - (minus signs).`);
        }
    }
    return ret;
}
exports.validateName = validateName;
//# sourceMappingURL=data:application/json;base64,