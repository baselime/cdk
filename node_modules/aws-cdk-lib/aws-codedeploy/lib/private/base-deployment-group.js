"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentGroupBase = exports.ImportedDeploymentGroupBase = void 0;
const iam = require("../../../aws-iam");
const core_1 = require("../../../core");
const predefined_deployment_config_1 = require("./predefined-deployment-config");
const utils_1 = require("./utils");
/**
 * @internal
 */
class ImportedDeploymentGroupBase extends core_1.Resource {
    constructor(scope, id, props) {
        const deploymentGroupName = props.deploymentGroupName;
        const deploymentGroupArn = core_1.Arn.format({
            partition: core_1.Aws.PARTITION,
            account: props.application.env.account,
            region: props.application.env.region,
            service: 'codedeploy',
            resource: 'deploymentgroup',
            resourceName: `${props.application.applicationName}/${deploymentGroupName}`,
            arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
        });
        super(scope, id, { environmentFromArn: deploymentGroupArn });
        this.deploymentGroupName = deploymentGroupName;
        this.deploymentGroupArn = deploymentGroupArn;
    }
    /**
     * Bind DeploymentGroupConfig to the current group, if supported
     *
     * @internal
     */
    _bindDeploymentConfig(config) {
        return (0, predefined_deployment_config_1.isPredefinedDeploymentConfig)(config) ? config.bindEnvironment(this) : config;
    }
}
exports.ImportedDeploymentGroupBase = ImportedDeploymentGroupBase;
/**
 * @internal
 */
class DeploymentGroupBase extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.deploymentGroupName,
        });
        this._role = props.role || new iam.Role(this, props.roleConstructId, {
            assumedBy: new iam.ServicePrincipal('codedeploy.amazonaws.com'),
        });
        this.node.addValidation({ validate: () => (0, utils_1.validateName)('Deployment group', this.physicalName) });
    }
    /**
     * Bind DeploymentGroupConfig to the current group, if supported
     *
     * @internal
     */
    _bindDeploymentConfig(config) {
        return (0, predefined_deployment_config_1.isPredefinedDeploymentConfig)(config) ? config.bindEnvironment(this) : config;
    }
    /**
     * Set name and ARN properties.
     *
     * Must be called in the child constructor.
     *
     * @internal
     */
    _setNameAndArn(resource, application) {
        this.deploymentGroupName = this.getResourceNameAttribute(resource.ref);
        this.deploymentGroupArn = this.getResourceArnAttribute(this.stack.formatArn({
            service: 'codedeploy',
            resource: 'deploymentgroup',
            resourceName: `${application.applicationName}/${resource.ref}`,
            arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
        }), {
            service: 'codedeploy',
            resource: 'deploymentgroup',
            resourceName: `${application.applicationName}/${this.physicalName}`,
            arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
        });
    }
}
exports.DeploymentGroupBase = DeploymentGroupBase;
//# sourceMappingURL=data:application/json;base64,