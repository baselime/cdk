"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeBasedLinearTrafficRouting = exports.TimeBasedCanaryTrafficRouting = exports.AllAtOnceTrafficRouting = exports.TrafficRouting = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Represents how traffic is shifted during a CodeDeploy deployment.
 */
class TrafficRouting {
    /**
     * Shifts 100% of traffic in a single shift.
     */
    static allAtOnce() {
        return new AllAtOnceTrafficRouting();
    }
    /**
     * Shifts a specified percentage of traffic, waits for a specified amount of time, then shifts the rest of traffic.
     */
    static timeBasedCanary(props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codedeploy_TimeBasedCanaryTrafficRoutingProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.timeBasedCanary);
            }
            throw error;
        }
        return new TimeBasedCanaryTrafficRouting(props);
    }
    /**
     * Keeps shifting a specified percentage of traffic until reaching 100%, waiting for a specified amount of time in between each traffic shift.
     */
    static timeBasedLinear(props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codedeploy_TimeBasedLinearTrafficRoutingProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.timeBasedLinear);
            }
            throw error;
        }
        return new TimeBasedLinearTrafficRouting(props);
    }
}
_a = JSII_RTTI_SYMBOL_1;
TrafficRouting[_a] = { fqn: "aws-cdk-lib.aws_codedeploy.TrafficRouting", version: "2.75.1" };
exports.TrafficRouting = TrafficRouting;
/**
 * Define a traffic routing config of type 'AllAtOnce'.
 */
class AllAtOnceTrafficRouting extends TrafficRouting {
    constructor() {
        super();
    }
    /**
     * Return a TrafficRoutingConfig of type `AllAtOnce`.
     */
    bind(_scope) {
        return {
            type: 'AllAtOnce',
        };
    }
}
_b = JSII_RTTI_SYMBOL_1;
AllAtOnceTrafficRouting[_b] = { fqn: "aws-cdk-lib.aws_codedeploy.AllAtOnceTrafficRouting", version: "2.75.1" };
exports.AllAtOnceTrafficRouting = AllAtOnceTrafficRouting;
/**
 * Define a traffic routing config of type 'TimeBasedCanary'.
 */
class TimeBasedCanaryTrafficRouting extends TrafficRouting {
    constructor(props) {
        super();
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codedeploy_TimeBasedCanaryTrafficRoutingProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, TimeBasedCanaryTrafficRouting);
            }
            throw error;
        }
        this.interval = props.interval;
        this.percentage = props.percentage;
    }
    /**
     * Return a TrafficRoutingConfig of type `TimeBasedCanary`.
     */
    bind(_scope) {
        return {
            type: 'TimeBasedCanary',
            timeBasedCanary: {
                canaryInterval: this.interval.toMinutes(),
                canaryPercentage: this.percentage,
            },
        };
    }
}
_c = JSII_RTTI_SYMBOL_1;
TimeBasedCanaryTrafficRouting[_c] = { fqn: "aws-cdk-lib.aws_codedeploy.TimeBasedCanaryTrafficRouting", version: "2.75.1" };
exports.TimeBasedCanaryTrafficRouting = TimeBasedCanaryTrafficRouting;
/**
 * Define a traffic routing config of type 'TimeBasedLinear'.
 */
class TimeBasedLinearTrafficRouting extends TrafficRouting {
    constructor(props) {
        super();
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codedeploy_TimeBasedLinearTrafficRoutingProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, TimeBasedLinearTrafficRouting);
            }
            throw error;
        }
        this.interval = props.interval;
        this.percentage = props.percentage;
    }
    /**
     * Return a TrafficRoutingConfig of type `TimeBasedLinear`.
     */
    bind(_scope) {
        return {
            type: 'TimeBasedLinear',
            timeBasedLinear: {
                linearInterval: this.interval.toMinutes(),
                linearPercentage: this.percentage,
            },
        };
    }
}
_d = JSII_RTTI_SYMBOL_1;
TimeBasedLinearTrafficRouting[_d] = { fqn: "aws-cdk-lib.aws_codedeploy.TimeBasedLinearTrafficRouting", version: "2.75.1" };
exports.TimeBasedLinearTrafficRouting = TimeBasedLinearTrafficRouting;
//# sourceMappingURL=data:application/json;base64,