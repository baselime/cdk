"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaDeploymentConfig = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_deployment_config_1 = require("../base-deployment-config");
const utils_1 = require("../private/utils");
const traffic_routing_config_1 = require("../traffic-routing-config");
/**
 * A custom Deployment Configuration for a Lambda Deployment Group.
 * @resource AWS::CodeDeploy::DeploymentConfig
 */
class LambdaDeploymentConfig extends base_deployment_config_1.BaseDeploymentConfig {
    /**
     * Import a Deployment Configuration for a Lambda Deployment Group defined outside the CDK.
     *
     * @param scope the parent Construct for this new Construct
     * @param id the logical ID of this new Construct
     * @param lambdaDeploymentConfigName the name of the Lambda Deployment Configuration to import
     * @returns a Construct representing a reference to an existing Lambda Deployment Configuration
     */
    static fromLambdaDeploymentConfigName(scope, id, lambdaDeploymentConfigName) {
        return this.fromDeploymentConfigName(scope, id, lambdaDeploymentConfigName);
    }
    /**
     * Import a Deployment Configuration for a Lambda Deployment Group defined outside the CDK.
     *
     * @param _scope the parent Construct for this new Construct
     * @param _id the logical ID of this new Construct
     * @param props the properties of the referenced custom Deployment Configuration
     * @returns a Construct representing a reference to an existing custom Deployment Configuration
     * @deprecated use `fromLambdaDeploymentConfigName`
     */
    static import(_scope, _id, props) {
        try {
            jsiiDeprecationWarnings.print("aws-cdk-lib.aws_codedeploy.LambdaDeploymentConfig#import", "use `fromLambdaDeploymentConfigName`");
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codedeploy_LambdaDeploymentConfigImportProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.import);
            }
            throw error;
        }
        return this.fromLambdaDeploymentConfigName(_scope, _id, props.deploymentConfigName);
    }
    static deploymentConfig(name) {
        return (0, utils_1.deploymentConfig)(name);
    }
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            computePlatform: base_deployment_config_1.ComputePlatform.LAMBDA,
            trafficRouting: props?.trafficRouting ?? traffic_routing_config_1.TrafficRouting.allAtOnce(),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codedeploy_LambdaDeploymentConfigProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, LambdaDeploymentConfig);
            }
            throw error;
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
LambdaDeploymentConfig[_a] = { fqn: "aws-cdk-lib.aws_codedeploy.LambdaDeploymentConfig", version: "2.75.1" };
/** CodeDeploy predefined deployment configuration that shifts all traffic to the updated Lambda function at once. */
LambdaDeploymentConfig.ALL_AT_ONCE = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaAllAtOnce');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 30 minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_30MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent30Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed five minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_5MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent5Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 10 minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_10MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent10Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 15 minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_15MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent15Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every 10 minutes until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_10MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery10Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every minute until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery1Minute');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every two minutes until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_2MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery2Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every three minutes until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_3MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery3Minutes');
exports.LambdaDeploymentConfig = LambdaDeploymentConfig;
//# sourceMappingURL=data:application/json;base64,