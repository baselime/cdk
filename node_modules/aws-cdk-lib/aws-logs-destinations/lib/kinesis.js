"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisDestination = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../aws-iam");
/**
 * Use a Kinesis stream as the destination for a log subscription
 */
class KinesisDestination {
    /**
     * @param stream The Kinesis stream to use as destination
     * @param props The Kinesis Destination properties
     *
     */
    constructor(stream, props = {}) {
        this.stream = stream;
        this.props = props;
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_kinesis_IStream(stream);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_logs_destinations_KinesisDestinationProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, KinesisDestination);
            }
            throw error;
        }
    }
    bind(scope, _sourceLogGroup) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_logs_ILogGroup(_sourceLogGroup);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        // Following example from https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#DestinationKinesisExample
        // Create a role to be assumed by CWL that can write to this stream and pass itself.
        const id = 'CloudWatchLogsCanPutRecords';
        const role = this.props.role ?? scope.node.tryFindChild(id) ?? new iam.Role(scope, id, {
            assumedBy: new iam.ServicePrincipal('logs.amazonaws.com'),
        });
        this.stream.grantWrite(role);
        role.grantPassRole(role);
        const policy = role.node.tryFindChild('DefaultPolicy');
        if (policy) {
            // Remove circular dependency
            const cfnRole = role.node.defaultChild;
            cfnRole.addOverride('DependsOn', undefined);
            // Ensure policy is created before subscription filter
            scope.node.addDependency(policy);
        }
        return { arn: this.stream.streamArn, role };
    }
}
_a = JSII_RTTI_SYMBOL_1;
KinesisDestination[_a] = { fqn: "aws-cdk-lib.aws_logs_destinations.KinesisDestination", version: "2.75.1" };
exports.KinesisDestination = KinesisDestination;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2luZXNpcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImtpbmVzaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscUNBQXFDO0FBaUJyQzs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBQzdCOzs7O09BSUc7SUFDSCxZQUE2QixNQUF1QixFQUFtQixRQUFpQyxFQUFFO1FBQTdFLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQW1CLFVBQUssR0FBTCxLQUFLLENBQThCOzs7Ozs7OytDQU4vRixrQkFBa0I7Ozs7S0FPNUI7SUFFTSxJQUFJLENBQUMsS0FBZ0IsRUFBRSxlQUErQjs7Ozs7Ozs7OztRQUMzRCxxSUFBcUk7UUFDckksb0ZBQW9GO1FBQ3BGLE1BQU0sRUFBRSxHQUFHLDZCQUE2QixDQUFDO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBYyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2xHLFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQztTQUMxRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBa0IsQ0FBQztRQUN4RSxJQUFJLE1BQU0sRUFBRTtZQUNWLDZCQUE2QjtZQUM3QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQTJCLENBQUM7WUFDdEQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFNUMsc0RBQXNEO1lBQ3RELEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUM3Qzs7OztBQTlCVSxnREFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpYW0gZnJvbSAnLi4vLi4vYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBraW5lc2lzIGZyb20gJy4uLy4uL2F3cy1raW5lc2lzJztcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSAnLi4vLi4vYXdzLWxvZ3MnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbi8qKlxuICogQ3VzdG9taXplIHRoZSBLaW5lc2lzIExvZ3MgRGVzdGluYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBLaW5lc2lzRGVzdGluYXRpb25Qcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgcm9sZSB0byBhc3N1bWUgdG8gd3JpdGUgbG9nIGV2ZW50cyB0byB0aGUgZGVzdGluYXRpb25cbiAgICpcbiAgICogQGRlZmF1bHQgLSBBIG5ldyBSb2xlIGlzIGNyZWF0ZWRcbiAgICovXG4gIHJlYWRvbmx5IHJvbGU/OiBpYW0uSVJvbGU7XG59XG5cbi8qKlxuICogVXNlIGEgS2luZXNpcyBzdHJlYW0gYXMgdGhlIGRlc3RpbmF0aW9uIGZvciBhIGxvZyBzdWJzY3JpcHRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEtpbmVzaXNEZXN0aW5hdGlvbiBpbXBsZW1lbnRzIGxvZ3MuSUxvZ1N1YnNjcmlwdGlvbkRlc3RpbmF0aW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBzdHJlYW0gVGhlIEtpbmVzaXMgc3RyZWFtIHRvIHVzZSBhcyBkZXN0aW5hdGlvblxuICAgKiBAcGFyYW0gcHJvcHMgVGhlIEtpbmVzaXMgRGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdHJlYW06IGtpbmVzaXMuSVN0cmVhbSwgcHJpdmF0ZSByZWFkb25seSBwcm9wczogS2luZXNpc0Rlc3RpbmF0aW9uUHJvcHMgPSB7fSkge1xuICB9XG5cbiAgcHVibGljIGJpbmQoc2NvcGU6IENvbnN0cnVjdCwgX3NvdXJjZUxvZ0dyb3VwOiBsb2dzLklMb2dHcm91cCk6IGxvZ3MuTG9nU3Vic2NyaXB0aW9uRGVzdGluYXRpb25Db25maWcge1xuICAgIC8vIEZvbGxvd2luZyBleGFtcGxlIGZyb20gaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvbkNsb3VkV2F0Y2gvbGF0ZXN0L2xvZ3MvU3Vic2NyaXB0aW9uRmlsdGVycy5odG1sI0Rlc3RpbmF0aW9uS2luZXNpc0V4YW1wbGVcbiAgICAvLyBDcmVhdGUgYSByb2xlIHRvIGJlIGFzc3VtZWQgYnkgQ1dMIHRoYXQgY2FuIHdyaXRlIHRvIHRoaXMgc3RyZWFtIGFuZCBwYXNzIGl0c2VsZi5cbiAgICBjb25zdCBpZCA9ICdDbG91ZFdhdGNoTG9nc0NhblB1dFJlY29yZHMnO1xuICAgIGNvbnN0IHJvbGUgPSB0aGlzLnByb3BzLnJvbGUgPz8gc2NvcGUubm9kZS50cnlGaW5kQ2hpbGQoaWQpIGFzIGlhbS5JUm9sZSA/PyBuZXcgaWFtLlJvbGUoc2NvcGUsIGlkLCB7XG4gICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnbG9ncy5hbWF6b25hd3MuY29tJyksXG4gICAgfSk7XG4gICAgdGhpcy5zdHJlYW0uZ3JhbnRXcml0ZShyb2xlKTtcbiAgICByb2xlLmdyYW50UGFzc1JvbGUocm9sZSk7XG5cbiAgICBjb25zdCBwb2xpY3kgPSByb2xlLm5vZGUudHJ5RmluZENoaWxkKCdEZWZhdWx0UG9saWN5JykgYXMgaWFtLkNmblBvbGljeTtcbiAgICBpZiAocG9saWN5KSB7XG4gICAgICAvLyBSZW1vdmUgY2lyY3VsYXIgZGVwZW5kZW5jeVxuICAgICAgY29uc3QgY2ZuUm9sZSA9IHJvbGUubm9kZS5kZWZhdWx0Q2hpbGQgYXMgaWFtLkNmblJvbGU7XG4gICAgICBjZm5Sb2xlLmFkZE92ZXJyaWRlKCdEZXBlbmRzT24nLCB1bmRlZmluZWQpO1xuXG4gICAgICAvLyBFbnN1cmUgcG9saWN5IGlzIGNyZWF0ZWQgYmVmb3JlIHN1YnNjcmlwdGlvbiBmaWx0ZXJcbiAgICAgIHNjb3BlLm5vZGUuYWRkRGVwZW5kZW5jeShwb2xpY3kpO1xuICAgIH1cblxuICAgIHJldHVybiB7IGFybjogdGhpcy5zdHJlYW0uc3RyZWFtQXJuLCByb2xlIH07XG4gIH1cbn1cbiJdfQ==