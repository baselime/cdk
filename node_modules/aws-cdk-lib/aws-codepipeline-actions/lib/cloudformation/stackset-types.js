"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackSetOrganizationsAutoDeployment = exports.StackSetDeploymentModel = exports.StackSetParameters = exports.StackInstances = exports.StackSetTemplate = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../../aws-iam");
const cdk = require("../../../core");
/**
 * The source of a StackSet template
 */
class StackSetTemplate {
    /**
     * Use a file in an artifact as Stack Template.
     */
    static fromArtifactPath(artifactPath) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_ArtifactPath(artifactPath);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromArtifactPath);
            }
            throw error;
        }
        return new class extends StackSetTemplate {
            constructor() {
                super(...arguments);
                this._artifactsReferenced = [artifactPath.artifact];
            }
            _render() {
                return artifactPath.location;
            }
        }();
    }
}
_a = JSII_RTTI_SYMBOL_1;
StackSetTemplate[_a] = { fqn: "aws-cdk-lib.aws_codepipeline_actions.StackSetTemplate", version: "2.75.1" };
exports.StackSetTemplate = StackSetTemplate;
/**
 * Where Stack Instances will be created from the StackSet
 */
class StackInstances {
    /**
     * Create stack instances in a set of accounts and regions passed as literal lists
     *
     * Stack Instances will be created in every combination of region and account.
     *
     * > NOTE: `StackInstances.inAccounts()` and `StackInstances.inOrganizationalUnits()`
     * > have exactly the same behavior, and you can use them interchangeably if you want.
     * > The only difference between them is that your code clearly indicates what entity
     * > it's working with.
     */
    static inAccounts(accounts, regions) {
        return StackInstances.fromList(accounts, regions);
    }
    /**
     * Create stack instances in all accounts in a set of Organizational Units (OUs) and regions passed as literal lists
     *
     * If you want to deploy to Organization Units, you must choose have created the StackSet
     * with `deploymentModel: DeploymentModel.organizations()`.
     *
     * Stack Instances will be created in every combination of region and account.
     *
     * > NOTE: `StackInstances.inAccounts()` and `StackInstances.inOrganizationalUnits()`
     * > have exactly the same behavior, and you can use them interchangeably if you want.
     * > The only difference between them is that your code clearly indicates what entity
     * > it's working with.
     */
    static inOrganizationalUnits(ous, regions) {
        return StackInstances.fromList(ous, regions);
    }
    /**
     * Create stack instances in a set of accounts or organizational units taken from the pipeline artifacts, and a set of regions
     *
     * The file must be a JSON file containing a list of strings. For example:
     *
     * ```json
     * [
     *   "111111111111",
     *   "222222222222",
     *   "333333333333"
     * ]
     * ```
     *
     * Stack Instances will be created in every combination of region and account, or region and
     * Organizational Units (OUs).
     *
     * If this is set of Organizational Units, you must have selected `StackSetDeploymentModel.organizations()`
     * as deployment model.
     */
    static fromArtifactPath(artifactPath, regions) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_ArtifactPath(artifactPath);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromArtifactPath);
            }
            throw error;
        }
        if (regions.length === 0) {
            throw new Error("'regions' may not be an empty list");
        }
        return new class extends StackInstances {
            constructor() {
                super(...arguments);
                this._artifactsReferenced = [artifactPath.artifact];
            }
            _bind(_scope) {
                return {
                    stackSetConfiguration: {
                        DeploymentTargets: artifactPath.location,
                        Regions: regions.join(','),
                    },
                };
            }
        }();
    }
    /**
     * Create stack instances in a literal set of accounts or organizational units, and a set of regions
     *
     * Stack Instances will be created in every combination of region and account, or region and
     * Organizational Units (OUs).
     *
     * If this is set of Organizational Units, you must have selected `StackSetDeploymentModel.organizations()`
     * as deployment model.
     */
    static fromList(targets, regions) {
        if (targets.length === 0) {
            throw new Error("'targets' may not be an empty list");
        }
        if (regions.length === 0) {
            throw new Error("'regions' may not be an empty list");
        }
        return new class extends StackInstances {
            _bind(_scope) {
                return {
                    stackSetConfiguration: {
                        DeploymentTargets: targets.join(','),
                        Regions: regions.join(','),
                    },
                };
            }
        }();
    }
}
_b = JSII_RTTI_SYMBOL_1;
StackInstances[_b] = { fqn: "aws-cdk-lib.aws_codepipeline_actions.StackInstances", version: "2.75.1" };
exports.StackInstances = StackInstances;
/**
 * Base parameters for the StackSet
 */
class StackSetParameters {
    /**
     * A list of template parameters for your stack set.
     *
     * You must specify all template parameters. Parameters you don't specify will revert
     * to their `Default` values as specified in the template.
     *
     * Specify the names of parameters you want to retain their existing values,
     * without specifying what those values are, in an array in the second
     * argument to this function. Use of this feature is discouraged. CDK is for
     * specifying desired-state infrastructure, and use of this feature makes the
     * parameter values unmanaged.
     *
     * @example
     *
     * const parameters = codepipeline_actions.StackSetParameters.fromLiteral({
     *  BucketName: 'my-bucket',
     *  Asset1: 'true',
     * });
     */
    static fromLiteral(parameters, usePreviousValues) {
        return new class extends StackSetParameters {
            constructor() {
                super(...arguments);
                this._artifactsReferenced = [];
            }
            _render() {
                return [
                    ...Object.entries(parameters).map(([key, value]) => `ParameterKey=${key},ParameterValue=${value}`),
                    ...(usePreviousValues ?? []).map((key) => `ParameterKey=${key},UsePreviousValue=true`),
                ].join(' ');
            }
        }();
    }
    /**
     * Read the parameters from a JSON file from one of the pipeline's artifacts
     *
     * The file needs to contain a list of `{ ParameterKey, ParameterValue, UsePreviousValue }` objects, like
     * this:
     *
     * ```
     * [
     *     {
     *         "ParameterKey": "BucketName",
     *         "ParameterValue": "my-bucket"
     *     },
     *     {
     *         "ParameterKey": "Asset1",
     *         "ParameterValue": "true"
     *     },
     *     {
     *         "ParameterKey": "Asset2",
     *         "UsePreviousValue": true
     *     }
     * ]
     * ```
     *
     * You must specify all template parameters. Parameters you don't specify will revert
     * to their `Default` values as specified in the template.
     *
     * For of parameters you want to retain their existing values
     * without specifying what those values are, set `UsePreviousValue: true`.
     * Use of this feature is discouraged. CDK is for
     * specifying desired-state infrastructure, and use of this feature makes the
     * parameter values unmanaged.
     */
    static fromArtifactPath(artifactPath) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_ArtifactPath(artifactPath);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromArtifactPath);
            }
            throw error;
        }
        return new class extends StackSetParameters {
            constructor() {
                super(...arguments);
                this._artifactsReferenced = [artifactPath.artifact];
            }
            _render() {
                return artifactPath.location;
            }
        }();
    }
}
_c = JSII_RTTI_SYMBOL_1;
StackSetParameters[_c] = { fqn: "aws-cdk-lib.aws_codepipeline_actions.StackSetParameters", version: "2.75.1" };
exports.StackSetParameters = StackSetParameters;
/**
 * Determines how IAM roles are created and managed.
 */
class StackSetDeploymentModel {
    /**
     * Deploy to AWS Organizations accounts.
     *
     * AWS CloudFormation StackSets automatically creates the IAM roles required
     * to deploy to accounts managed by AWS Organizations. This requires an
     * account to be a member of an Organization.
     *
     * Using this deployment model, you can specify either AWS Account Ids or
     * Organization Unit Ids in the `stackInstances` parameter.
     */
    static organizations(props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_actions_OrganizationsDeploymentProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.organizations);
            }
            throw error;
        }
        return new class extends StackSetDeploymentModel {
            _bind() {
                return {
                    stackSetConfiguration: {
                        PermissionModel: 'SERVICE_MANAGED',
                        OrganizationsAutoDeployment: props.autoDeployment,
                    },
                };
            }
        }();
    }
    /**
     * Deploy to AWS Accounts not managed by AWS Organizations
     *
     * You are responsible for creating Execution Roles in every account you will
     * be deploying to in advance to create the actual stack instances. Unless you
     * specify overrides, StackSets expects the execution roles you create to have
     * the default name `AWSCloudFormationStackSetExecutionRole`. See the [Grant
     * self-managed
     * permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html)
     * section of the CloudFormation documentation.
     *
     * The CDK will automatically create the central Administration Role in the
     * Pipeline account which will be used to assume the Execution Role in each of
     * the target accounts.
     *
     * If you wish to use a pre-created Administration Role, use `Role.fromRoleName()`
     * or `Role.fromRoleArn()` to import it, and pass it to this function:
     *
     * ```ts
     * const existingAdminRole = iam.Role.fromRoleName(this, 'AdminRole', 'AWSCloudFormationStackSetAdministrationRole');
     *
     * const deploymentModel = codepipeline_actions.StackSetDeploymentModel.selfManaged({
     *   // Use an existing Role. Leave this out to create a new Role.
     *   administrationRole: existingAdminRole,
     * });
     * ```
     *
     * Using this deployment model, you can only specify AWS Account Ids in the
     * `stackInstances` parameter.
     *
     * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html
     */
    static selfManaged(props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_actions_SelfManagedDeploymentProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.selfManaged);
            }
            throw error;
        }
        return new class extends StackSetDeploymentModel {
            _bind(scope) {
                let administrationRole = props.administrationRole;
                if (!administrationRole) {
                    administrationRole = new iam.Role(scope, 'StackSetAdministrationRole', {
                        assumedBy: new iam.ServicePrincipal('cloudformation.amazonaws.com', {
                            conditions: {
                                // Confused deputy protection
                                StringLike: {
                                    'aws:SourceArn': `arn:${cdk.Aws.PARTITION}:cloudformation:*:${cdk.Aws.ACCOUNT_ID}:stackset/*`,
                                },
                            },
                        }),
                    });
                    administrationRole.addToPrincipalPolicy(new iam.PolicyStatement({
                        actions: ['sts:AssumeRole'],
                        resources: [`arn:${cdk.Aws.PARTITION}:iam::*:role/${props.executionRoleName ?? 'AWSCloudFormationStackSetExecutionRole'}`],
                    }));
                }
                return {
                    stackSetConfiguration: {
                        PermissionModel: 'SELF_MANAGED',
                        AdministrationRoleArn: administrationRole.roleArn,
                        ExecutionRoleName: props.executionRoleName,
                    },
                    passedRoles: [administrationRole],
                };
            }
        }();
    }
}
_d = JSII_RTTI_SYMBOL_1;
StackSetDeploymentModel[_d] = { fqn: "aws-cdk-lib.aws_codepipeline_actions.StackSetDeploymentModel", version: "2.75.1" };
exports.StackSetDeploymentModel = StackSetDeploymentModel;
/**
 * Describes whether AWS CloudFormation StackSets automatically deploys to AWS Organizations accounts that are added to a target organization or
 * organizational unit (OU).
 */
var StackSetOrganizationsAutoDeployment;
(function (StackSetOrganizationsAutoDeployment) {
    /**
     * StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or
     * organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, AWS CloudFormation StackSets
     * deletes stack instances from the account in the specified Regions.
     */
    StackSetOrganizationsAutoDeployment["ENABLED"] = "Enabled";
    /**
     * StackSets does not automatically deploy additional stack instances to AWS Organizations accounts that are added to a target organization or
     * organizational unit (OU) in the specified Regions.
     */
    StackSetOrganizationsAutoDeployment["DISABLED"] = "Disabled";
    /**
     * Stack resources are retained when an account is removed from a target organization or OU.
     */
    StackSetOrganizationsAutoDeployment["ENABLED_WITH_STACK_RETENTION"] = "EnabledWithStackRetention";
})(StackSetOrganizationsAutoDeployment = exports.StackSetOrganizationsAutoDeployment || (exports.StackSetOrganizationsAutoDeployment = {}));
//# sourceMappingURL=data:application/json;base64,