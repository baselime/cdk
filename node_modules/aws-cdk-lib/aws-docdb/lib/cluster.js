"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseCluster = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ec2 = require("../../aws-ec2");
const logs = require("../../aws-logs");
const secretsmanager = require("../../aws-secretsmanager");
const core_1 = require("../../core");
const database_secret_1 = require("./database-secret");
const docdb_generated_1 = require("./docdb.generated");
const endpoint_1 = require("./endpoint");
/**
 * A new or imported clustered database.
 */
class DatabaseClusterBase extends core_1.Resource {
    /**
     * Renders the secret attachment target specifications.
     */
    asSecretAttachmentTarget() {
        return {
            targetId: this.clusterIdentifier,
            targetType: secretsmanager.AttachmentTargetType.DOCDB_DB_CLUSTER,
        };
    }
}
/**
 * Create a clustered database with a given number of instances.
 *
 * @resource AWS::DocDB::DBCluster
 */
class DatabaseCluster extends DatabaseClusterBase {
    /**
     * Import an existing DatabaseCluster from properties
     */
    static fromDatabaseClusterAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_docdb_DatabaseClusterAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromDatabaseClusterAttributes);
            }
            throw error;
        }
        class Import extends DatabaseClusterBase {
            constructor() {
                super(...arguments);
                this.defaultPort = typeof attrs.port !== 'undefined' ? ec2.Port.tcp(attrs.port) : undefined;
                this.connections = new ec2.Connections({
                    securityGroups: attrs.securityGroup ? [attrs.securityGroup] : undefined,
                    defaultPort: this.defaultPort,
                });
                this.clusterIdentifier = attrs.clusterIdentifier;
                this._instanceIdentifiers = attrs.instanceIdentifiers;
                this._clusterEndpoint = attrs.clusterEndpointAddress && typeof attrs.port !== 'undefined' ?
                    new endpoint_1.Endpoint(attrs.clusterEndpointAddress, attrs.port) : undefined;
                this._clusterReadEndpoint = attrs.readerEndpointAddress && typeof attrs.port !== 'undefined' ?
                    new endpoint_1.Endpoint(attrs.readerEndpointAddress, attrs.port) : undefined;
                this._instanceEndpoints = attrs.instanceEndpointAddresses && typeof attrs.port !== 'undefined' ?
                    attrs.instanceEndpointAddresses.map(addr => new endpoint_1.Endpoint(addr, attrs.port)) : undefined;
                this._securityGroupId = attrs.securityGroup?.securityGroupId;
            }
            get instanceIdentifiers() {
                if (!this._instanceIdentifiers) {
                    throw new Error('Cannot access `instanceIdentifiers` of an imported cluster without provided instanceIdentifiers');
                }
                return this._instanceIdentifiers;
            }
            get clusterEndpoint() {
                if (!this._clusterEndpoint) {
                    throw new Error('Cannot access `clusterEndpoint` of an imported cluster without an endpoint address and port');
                }
                return this._clusterEndpoint;
            }
            get clusterReadEndpoint() {
                if (!this._clusterReadEndpoint) {
                    throw new Error('Cannot access `clusterReadEndpoint` of an imported cluster without a readerEndpointAddress and port');
                }
                return this._clusterReadEndpoint;
            }
            get instanceEndpoints() {
                if (!this._instanceEndpoints) {
                    throw new Error('Cannot access `instanceEndpoints` of an imported cluster without instanceEndpointAddresses and port');
                }
                return this._instanceEndpoints;
            }
            get securityGroupId() {
                if (!this._securityGroupId) {
                    throw new Error('Cannot access `securityGroupId` of an imported cluster without securityGroupId');
                }
                return this._securityGroupId;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * Identifiers of the replicas
         */
        this.instanceIdentifiers = [];
        /**
         * Endpoints which address each individual replica.
         */
        this.instanceEndpoints = [];
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_docdb_DatabaseClusterProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, DatabaseCluster);
            }
            throw error;
        }
        this.vpc = props.vpc;
        this.vpcSubnets = props.vpcSubnets;
        // Determine the subnet(s) to deploy the DocDB cluster to
        const { subnetIds, internetConnectivityEstablished } = this.vpc.selectSubnets(this.vpcSubnets);
        // DocDB clusters require a subnet group with subnets from at least two AZs.
        // We cannot test whether the subnets are in different AZs, but at least we can test the amount.
        // See https://docs.aws.amazon.com/documentdb/latest/developerguide/replication.html#replication.high-availability
        if (subnetIds.length < 2) {
            throw new Error(`Cluster requires at least 2 subnets, got ${subnetIds.length}`);
        }
        const subnetGroup = new docdb_generated_1.CfnDBSubnetGroup(this, 'Subnets', {
            dbSubnetGroupDescription: `Subnets for ${id} database`,
            subnetIds,
        });
        // Create the security group for the DB cluster
        let securityGroup;
        if (props.securityGroup) {
            securityGroup = props.securityGroup;
        }
        else {
            securityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {
                description: 'DocumentDB security group',
                vpc: this.vpc,
            });
            // HACK: Use an escape-hatch to apply a consistent removal policy to the
            // security group so we don't get errors when trying to delete the stack
            securityGroup.node.defaultChild.applyRemovalPolicy(props.removalPolicy, {
                applyToUpdateReplacePolicy: true,
            });
        }
        this.securityGroupId = securityGroup.securityGroupId;
        // Create the CloudwatchLogsConfiguratoin
        const enableCloudwatchLogsExports = [];
        if (props.exportAuditLogsToCloudWatch) {
            enableCloudwatchLogsExports.push('audit');
        }
        if (props.exportProfilerLogsToCloudWatch) {
            enableCloudwatchLogsExports.push('profiler');
        }
        // Create the secret manager secret if no password is specified
        let secret;
        if (!props.masterUser.password) {
            secret = new database_secret_1.DatabaseSecret(this, 'Secret', {
                username: props.masterUser.username,
                encryptionKey: props.masterUser.kmsKey,
                excludeCharacters: props.masterUser.excludeCharacters,
                secretName: props.masterUser.secretName,
            });
        }
        // Default to encrypted storage
        const storageEncrypted = props.storageEncrypted ?? true;
        if (props.kmsKey && !storageEncrypted) {
            throw new Error('KMS key supplied but storageEncrypted is false');
        }
        // Create the DocDB cluster
        this.cluster = new docdb_generated_1.CfnDBCluster(this, 'Resource', {
            // Basic
            engineVersion: props.engineVersion,
            dbClusterIdentifier: props.dbClusterName,
            dbSubnetGroupName: subnetGroup.ref,
            port: props.port,
            vpcSecurityGroupIds: [this.securityGroupId],
            dbClusterParameterGroupName: props.parameterGroup?.parameterGroupName,
            deletionProtection: props.deletionProtection,
            // Admin
            masterUsername: secret ? secret.secretValueFromJson('username').unsafeUnwrap() : props.masterUser.username,
            masterUserPassword: secret
                ? secret.secretValueFromJson('password').unsafeUnwrap()
                : props.masterUser.password.unsafeUnwrap(),
            // Backup
            backupRetentionPeriod: props.backup?.retention?.toDays(),
            preferredBackupWindow: props.backup?.preferredWindow,
            preferredMaintenanceWindow: props.preferredMaintenanceWindow,
            // EnableCloudwatchLogsExports
            enableCloudwatchLogsExports: enableCloudwatchLogsExports.length > 0 ? enableCloudwatchLogsExports : undefined,
            // Encryption
            kmsKeyId: props.kmsKey?.keyArn,
            storageEncrypted,
        });
        this.cluster.applyRemovalPolicy(props.removalPolicy, {
            applyToUpdateReplacePolicy: true,
        });
        this.clusterIdentifier = this.cluster.ref;
        this.clusterResourceIdentifier = this.cluster.attrClusterResourceId;
        const port = core_1.Token.asNumber(this.cluster.attrPort);
        this.clusterEndpoint = new endpoint_1.Endpoint(this.cluster.attrEndpoint, port);
        this.clusterReadEndpoint = new endpoint_1.Endpoint(this.cluster.attrReadEndpoint, port);
        this.setLogRetention(this, props, enableCloudwatchLogsExports);
        if (secret) {
            this.secret = secret.attach(this);
        }
        // Create the instances
        const instanceCount = props.instances ?? DatabaseCluster.DEFAULT_NUM_INSTANCES;
        if (instanceCount < 1) {
            throw new Error('At least one instance is required');
        }
        for (let i = 0; i < instanceCount; i++) {
            const instanceIndex = i + 1;
            const instanceIdentifier = props.instanceIdentifierBase != null ? `${props.instanceIdentifierBase}${instanceIndex}`
                : props.dbClusterName != null ? `${props.dbClusterName}instance${instanceIndex}` : undefined;
            const instance = new docdb_generated_1.CfnDBInstance(this, `Instance${instanceIndex}`, {
                // Link to cluster
                dbClusterIdentifier: this.cluster.ref,
                dbInstanceIdentifier: instanceIdentifier,
                // Instance properties
                dbInstanceClass: databaseInstanceType(props.instanceType),
                enablePerformanceInsights: props.enablePerformanceInsights,
            });
            instance.applyRemovalPolicy(props.removalPolicy, {
                applyToUpdateReplacePolicy: true,
            });
            // We must have a dependency on the NAT gateway provider here to create
            // things in the right order.
            instance.node.addDependency(internetConnectivityEstablished);
            this.instanceIdentifiers.push(instance.ref);
            this.instanceEndpoints.push(new endpoint_1.Endpoint(instance.attrEndpoint, port));
        }
        this.connections = new ec2.Connections({
            defaultPort: ec2.Port.tcp(port),
            securityGroups: [securityGroup],
        });
    }
    /**
     * Sets up CloudWatch log retention if configured.
     */
    setLogRetention(cluster, props, cloudwatchLogsExports) {
        if (props.cloudWatchLogsRetention) {
            for (const log of cloudwatchLogsExports) {
                new logs.LogRetention(cluster, `LogRetention${log}`, {
                    logGroupName: `/aws/docdb/${cluster.clusterIdentifier}/${log}`,
                    retention: props.cloudWatchLogsRetention,
                    role: props.cloudWatchLogsRetentionRole,
                });
            }
        }
    }
    /**
     * Adds the single user rotation of the master password to this cluster.
     *
     * @param [automaticallyAfter=Duration.days(30)] Specifies the number of days after the previous rotation
     * before Secrets Manager triggers the next automatic rotation.
     */
    addRotationSingleUser(automaticallyAfter) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_Duration(automaticallyAfter);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addRotationSingleUser);
            }
            throw error;
        }
        if (!this.secret) {
            throw new Error('Cannot add single user rotation for a cluster without secret.');
        }
        const id = 'RotationSingleUser';
        const existing = this.node.tryFindChild(id);
        if (existing) {
            throw new Error('A single user rotation was already added to this cluster.');
        }
        return new secretsmanager.SecretRotation(this, id, {
            secret: this.secret,
            automaticallyAfter,
            application: DatabaseCluster.SINGLE_USER_ROTATION_APPLICATION,
            excludeCharacters: this.node.tryFindChild('Secret')._excludedCharacters,
            vpc: this.vpc,
            vpcSubnets: this.vpcSubnets,
            target: this,
        });
    }
    /**
     * Adds the multi user rotation to this cluster.
     */
    addRotationMultiUser(id, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_docdb_RotationMultiUserOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addRotationMultiUser);
            }
            throw error;
        }
        if (!this.secret) {
            throw new Error('Cannot add multi user rotation for a cluster without secret.');
        }
        return new secretsmanager.SecretRotation(this, id, {
            secret: options.secret,
            masterSecret: this.secret,
            automaticallyAfter: options.automaticallyAfter,
            excludeCharacters: this.node.tryFindChild('Secret')._excludedCharacters,
            application: DatabaseCluster.MULTI_USER_ROTATION_APPLICATION,
            vpc: this.vpc,
            vpcSubnets: this.vpcSubnets,
            target: this,
        });
    }
    /**
     * Adds security groups to this cluster.
     * @param securityGroups The security groups to add.
     */
    addSecurityGroups(...securityGroups) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_ISecurityGroup(securityGroups);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addSecurityGroups);
            }
            throw error;
        }
        if (this.cluster.vpcSecurityGroupIds === undefined) {
            this.cluster.vpcSecurityGroupIds = [];
        }
        this.cluster.vpcSecurityGroupIds.push(...securityGroups.map(sg => sg.securityGroupId));
    }
}
_a = JSII_RTTI_SYMBOL_1;
DatabaseCluster[_a] = { fqn: "aws-cdk-lib.aws_docdb.DatabaseCluster", version: "2.75.1" };
/**
 * The default number of instances in the DocDB cluster if none are
 * specified
 */
DatabaseCluster.DEFAULT_NUM_INSTANCES = 1;
/**
 * The default port Document DB listens on
 */
DatabaseCluster.DEFAULT_PORT = 27017;
/**
 * The single user secret rotation application.
 */
DatabaseCluster.SINGLE_USER_ROTATION_APPLICATION = secretsmanager.SecretRotationApplication.MONGODB_ROTATION_SINGLE_USER;
/**
 * The multi user secret rotation application.
 */
DatabaseCluster.MULTI_USER_ROTATION_APPLICATION = secretsmanager.SecretRotationApplication.MONGODB_ROTATION_MULTI_USER;
exports.DatabaseCluster = DatabaseCluster;
/**
 * Turn a regular instance type into a database instance type
 */
function databaseInstanceType(instanceType) {
    return 'db.' + instanceType.toString();
}
//# sourceMappingURL=data:application/json;base64,