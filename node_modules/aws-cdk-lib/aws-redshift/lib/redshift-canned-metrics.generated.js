"use strict";
// Copyright 2012-2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedshiftMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class RedshiftMetrics {
    static commitQueueLengthAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'CommitQueueLength',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static concurrencyScalingActiveClustersAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'ConcurrencyScalingActiveClusters',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static concurrencyScalingSecondsAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'ConcurrencyScalingSeconds',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static cpuUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'CPUUtilization',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static databaseConnectionsAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'DatabaseConnections',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static healthStatusSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'HealthStatus',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static maintenanceModeSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'MaintenanceMode',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static maxConfiguredConcurrencyScalingClustersSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'MaxConfiguredConcurrencyScalingClusters',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static networkReceiveThroughputSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'NetworkReceiveThroughput',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static networkTransmitThroughputSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'NetworkTransmitThroughput',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static numExceededSchemaQuotasAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'NumExceededSchemaQuotas',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static percentageDiskSpaceUsedAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'PercentageDiskSpaceUsed',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static percentageQuotaUsedAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'PercentageQuotaUsed',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static queriesCompletedPerSecondSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'QueriesCompletedPerSecond',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static queryDurationAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'QueryDuration',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static queryRuntimeBreakdownSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'QueryRuntimeBreakdown',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static readIopsSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'ReadIOPS',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static readLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'ReadLatency',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static readThroughputSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'ReadThroughput',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static storageUsedAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'StorageUsed',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static totalTableCountAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'TotalTableCount',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static wlmQueriesCompletedPerSecondAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WLMQueriesCompletedPerSecond',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static wlmQueryDurationAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WLMQueryDuration',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static wlmQueueLengthSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WLMQueueLength',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static writeIopsSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WriteIOPS',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static writeLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WriteLatency',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static writeThroughputSum(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WriteThroughput',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static wlmQueueWaitTimeAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WLMQueueWaitTime',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static wlmRunningQueriesAverage(dimensions) {
        return {
            namespace: 'AWS/Redshift',
            metricName: 'WLMRunningQueries',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
}
exports.RedshiftMetrics = RedshiftMetrics;
//# sourceMappingURL=data:application/json;base64,