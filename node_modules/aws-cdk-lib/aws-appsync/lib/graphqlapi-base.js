"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphqlApiBase = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const data_source_1 = require("./data-source");
const resolver_1 = require("./resolver");
/**
 * Base Class for GraphQL API
 */
class GraphqlApiBase extends core_1.Resource {
    /**
     * add a new dummy data source to this API. Useful for pipeline resolvers
     * and for backend changes that don't require a data source.
     *
     * @param id The data source's id
     * @param options The optional configuration for this data source
     */
    addNoneDataSource(id, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_DataSourceOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addNoneDataSource);
            }
            throw error;
        }
        return new data_source_1.NoneDataSource(this, id, {
            api: this,
            name: options?.name,
            description: options?.description,
        });
    }
    /**
     * add a new DynamoDB data source to this API
     *
     * @param id The data source's id
     * @param table The DynamoDB table backing this data source
     * @param options The optional configuration for this data source
     */
    addDynamoDbDataSource(id, table, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_dynamodb_ITable(table);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_DataSourceOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addDynamoDbDataSource);
            }
            throw error;
        }
        return new data_source_1.DynamoDbDataSource(this, id, {
            api: this,
            table,
            name: options?.name,
            description: options?.description,
        });
    }
    /**
     * add a new http data source to this API
     *
     * @param id The data source's id
     * @param endpoint The http endpoint
     * @param options The optional configuration for this data source
     */
    addHttpDataSource(id, endpoint, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_HttpDataSourceOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addHttpDataSource);
            }
            throw error;
        }
        return new data_source_1.HttpDataSource(this, id, {
            api: this,
            endpoint,
            name: options?.name,
            description: options?.description,
            authorizationConfig: options?.authorizationConfig,
        });
    }
    /**
     * add a new Lambda data source to this API
     *
     * @param id The data source's id
     * @param lambdaFunction The Lambda function to call to interact with this data source
     * @param options The optional configuration for this data source
     */
    addLambdaDataSource(id, lambdaFunction, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_lambda_IFunction(lambdaFunction);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_DataSourceOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addLambdaDataSource);
            }
            throw error;
        }
        return new data_source_1.LambdaDataSource(this, id, {
            api: this,
            lambdaFunction,
            name: options?.name,
            description: options?.description,
        });
    }
    /**
     * add a new Rds data source to this API
     * @param id The data source's id
     * @param serverlessCluster The serverless cluster to interact with this data source
     * @param secretStore The secret store that contains the username and password for the serverless cluster
     * @param databaseName The optional name of the database to use within the cluster
     * @param options The optional configuration for this data source
     */
    addRdsDataSource(id, serverlessCluster, secretStore, databaseName, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_rds_IServerlessCluster(serverlessCluster);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_secretsmanager_ISecret(secretStore);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_DataSourceOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addRdsDataSource);
            }
            throw error;
        }
        return new data_source_1.RdsDataSource(this, id, {
            api: this,
            name: options?.name,
            description: options?.description,
            serverlessCluster,
            secretStore,
            databaseName,
        });
    }
    /**
     * add a new elasticsearch data source to this API
     *
     * @deprecated - use `addOpenSearchDataSource`
     * @param id The data source's id
     * @param domain The elasticsearch domain for this data source
     * @param options The optional configuration for this data source
     */
    addElasticsearchDataSource(id, domain, options) {
        try {
            jsiiDeprecationWarnings.print("aws-cdk-lib.aws_appsync.GraphqlApiBase#addElasticsearchDataSource", "- use `addOpenSearchDataSource`");
            jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticsearch_IDomain(domain);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_DataSourceOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addElasticsearchDataSource);
            }
            throw error;
        }
        return new data_source_1.ElasticsearchDataSource(this, id, {
            api: this,
            name: options?.name,
            description: options?.description,
            domain,
        });
    }
    /**
     * add a new OpenSearch data source to this API
     *
     * @param id The data source's id
     * @param domain The OpenSearch domain for this data source
     * @param options The optional configuration for this data source
     */
    addOpenSearchDataSource(id, domain, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_opensearchservice_IDomain(domain);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_DataSourceOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addOpenSearchDataSource);
            }
            throw error;
        }
        return new data_source_1.OpenSearchDataSource(this, id, {
            api: this,
            name: options?.name,
            description: options?.description,
            domain,
        });
    }
    /**
     * creates a new resolver for this datasource and API using the given properties
     */
    createResolver(id, props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appsync_ExtendedResolverProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.createResolver);
            }
            throw error;
        }
        return new resolver_1.Resolver(this, id, {
            api: this,
            ...props,
        });
    }
    /**
     * Add schema dependency if not imported
     *
     * @param construct the dependee
     */
    addSchemaDependency(construct) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_CfnResource(construct);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addSchemaDependency);
            }
            throw error;
        }
        construct;
        return false;
    }
}
_a = JSII_RTTI_SYMBOL_1;
GraphqlApiBase[_a] = { fqn: "aws-cdk-lib.aws_appsync.GraphqlApiBase", version: "2.75.1" };
exports.GraphqlApiBase = GraphqlApiBase;
//# sourceMappingURL=data:application/json;base64,