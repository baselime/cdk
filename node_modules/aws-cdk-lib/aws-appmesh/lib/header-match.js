"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderMatch = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Used to generate header matching methods.
 */
class HeaderMatch {
    /**
     * The value of the header with the given name in the request must match the
     * specified value exactly.
     *
     * @param headerName the name of the header to match against
     * @param headerValue The exact value to test against
     */
    static valueIs(headerName, headerValue) {
        return new HeaderMatchImpl(headerName, false, { exact: headerValue });
    }
    /**
     * The value of the header with the given name in the request must not match
     * the specified value exactly.
     *
     * @param headerName the name of the header to match against
     * @param headerValue The exact value to test against
     */
    static valueIsNot(headerName, headerValue) {
        return new HeaderMatchImpl(headerName, true, { exact: headerValue });
    }
    /**
     * The value of the header with the given name in the request must start with
     * the specified characters.
     *
     * @param headerName the name of the header to match against
     * @param prefix The prefix to test against
     */
    static valueStartsWith(headerName, prefix) {
        return new HeaderMatchImpl(headerName, false, { prefix });
    }
    /**
     * The value of the header with the given name in the request must not start
     * with the specified characters.
     *
     * @param headerName the name of the header to match against
     * @param prefix The prefix to test against
     */
    static valueDoesNotStartWith(headerName, prefix) {
        return new HeaderMatchImpl(headerName, true, { prefix });
    }
    /**
     * The value of the header with the given name in the request must end with
     * the specified characters.
     *
     * @param headerName the name of the header to match against
     * @param suffix The suffix to test against
     */
    static valueEndsWith(headerName, suffix) {
        return new HeaderMatchImpl(headerName, false, { suffix });
    }
    /**
     * The value of the header with the given name in the request must not end
     * with the specified characters.
     *
     * @param headerName the name of the header to match against
     * @param suffix The suffix to test against
     */
    static valueDoesNotEndWith(headerName, suffix) {
        return new HeaderMatchImpl(headerName, true, { suffix });
    }
    /**
     * The value of the header with the given name in the request must include
     * the specified characters.
     *
     * @param headerName the name of the header to match against
     * @param regex The regex to test against
     */
    static valueMatchesRegex(headerName, regex) {
        return new HeaderMatchImpl(headerName, false, { regex });
    }
    /**
     * The value of the header with the given name in the request must not
     * include the specified characters.
     *
     * @param headerName the name of the header to match against
     * @param regex The regex to test against
     */
    static valueDoesNotMatchRegex(headerName, regex) {
        return new HeaderMatchImpl(headerName, true, { regex });
    }
    /**
     * The value of the header with the given name in the request must be in a
     * range of values.
     *
     * @param headerName the name of the header to match against
     * @param start Match on values starting at and including this value
     * @param end Match on values up to but not including this value
     */
    static valuesIsInRange(headerName, start, end) {
        return new HeaderMatchImpl(headerName, false, {
            range: {
                start,
                end,
            },
        });
    }
    /**
     * The value of the header with the given name in the request must not be in
     * a range of values.
     *
     * @param headerName the name of the header to match against
     * @param start Match on values starting at and including this value
     * @param end Match on values up to but not including this value
     */
    static valuesIsNotInRange(headerName, start, end) {
        return new HeaderMatchImpl(headerName, true, {
            range: {
                start,
                end,
            },
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
HeaderMatch[_a] = { fqn: "aws-cdk-lib.aws_appmesh.HeaderMatch", version: "2.75.1" };
exports.HeaderMatch = HeaderMatch;
class HeaderMatchImpl extends HeaderMatch {
    constructor(headerName, invert, matchProperty) {
        super();
        this.headerName = headerName;
        this.invert = invert;
        this.matchProperty = matchProperty;
    }
    bind(_scope) {
        return {
            headerMatch: {
                name: this.headerName,
                invert: this.invert,
                match: this.matchProperty,
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,