"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Backend = exports.AccessLog = exports.Protocol = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("../../core");
const utils_1 = require("./private/utils");
/**
 * Enum of supported AppMesh protocols
 *
 * @deprecated not for use outside package
 */
var Protocol;
(function (Protocol) {
    Protocol["HTTP"] = "http";
    Protocol["TCP"] = "tcp";
    Protocol["HTTP2"] = "http2";
    Protocol["GRPC"] = "grpc";
})(Protocol = exports.Protocol || (exports.Protocol = {}));
/**
 * Configuration for Envoy Access logs for mesh endpoints
 */
class AccessLog {
    /**
     * Path to a file to write access logs to
     *
     * @default - no file based access logging
     */
    static fromFilePath(filePath) {
        return new FileAccessLog(filePath);
    }
}
_a = JSII_RTTI_SYMBOL_1;
AccessLog[_a] = { fqn: "aws-cdk-lib.aws_appmesh.AccessLog", version: "2.75.1" };
exports.AccessLog = AccessLog;
/**
 * Configuration for Envoy Access logs for mesh endpoints
 */
class FileAccessLog extends AccessLog {
    constructor(filePath) {
        super();
        this.filePath = filePath;
    }
    bind(_scope) {
        return {
            virtualNodeAccessLog: {
                file: {
                    path: this.filePath,
                },
            },
            virtualGatewayAccessLog: {
                file: {
                    path: this.filePath,
                },
            },
        };
    }
}
/**
 * Contains static factory methods to create backends
 */
class Backend {
    /**
     * Construct a Virtual Service backend
     */
    static virtualService(virtualService, props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_IVirtualService(virtualService);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_VirtualServiceBackendOptions(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.virtualService);
            }
            throw error;
        }
        return new VirtualServiceBackend(virtualService, props.tlsClientPolicy);
    }
}
_b = JSII_RTTI_SYMBOL_1;
Backend[_b] = { fqn: "aws-cdk-lib.aws_appmesh.Backend", version: "2.75.1" };
exports.Backend = Backend;
/**
 * Represents the properties needed to define a Virtual Service backend
 */
class VirtualServiceBackend extends Backend {
    constructor(virtualService, tlsClientPolicy) {
        super();
        this.virtualService = virtualService;
        this.tlsClientPolicy = tlsClientPolicy;
    }
    /**
     * Return config for a Virtual Service backend
     */
    bind(scope) {
        return {
            virtualServiceBackend: {
                virtualService: {
                    /**
                     * We want to use the name of the Virtual Service here directly instead of
                     * a `{ 'Fn::GetAtt' }` CFN expression. This avoids a circular dependency in
                     * the case where this Virtual Node is the Virtual Service's provider.
                     */
                    virtualServiceName: cdk.Token.isUnresolved(this.virtualService.virtualServiceName)
                        ? this.virtualService.physicalName
                        : this.virtualService.virtualServiceName,
                    clientPolicy: this.tlsClientPolicy
                        ? {
                            tls: (0, utils_1.renderTlsClientPolicy)(scope, this.tlsClientPolicy),
                        }
                        : undefined,
                },
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,