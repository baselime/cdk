"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteSpec = exports.GrpcRetryEvent = exports.TcpRetryEvent = exports.HttpRetryEvent = exports.HttpRouteProtocol = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const http_route_path_match_1 = require("./http-route-path-match");
const utils_1 = require("./private/utils");
const shared_interfaces_1 = require("./shared-interfaces");
/**
 * Supported :scheme options for HTTP2
 */
var HttpRouteProtocol;
(function (HttpRouteProtocol) {
    /**
     * Match HTTP requests
     */
    HttpRouteProtocol["HTTP"] = "http";
    /**
     * Match HTTPS requests
     */
    HttpRouteProtocol["HTTPS"] = "https";
})(HttpRouteProtocol = exports.HttpRouteProtocol || (exports.HttpRouteProtocol = {}));
/**
 * HTTP events on which to retry.
 */
var HttpRetryEvent;
(function (HttpRetryEvent) {
    /**
     * HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511
     */
    HttpRetryEvent["SERVER_ERROR"] = "server-error";
    /**
     * HTTP status codes 502, 503, and 504
     */
    HttpRetryEvent["GATEWAY_ERROR"] = "gateway-error";
    /**
     * HTTP status code 409
     */
    HttpRetryEvent["CLIENT_ERROR"] = "client-error";
    /**
     * Retry on refused stream
     */
    HttpRetryEvent["STREAM_ERROR"] = "stream-error";
})(HttpRetryEvent = exports.HttpRetryEvent || (exports.HttpRetryEvent = {}));
/**
 * TCP events on which you may retry
 */
var TcpRetryEvent;
(function (TcpRetryEvent) {
    /**
     * A connection error
     */
    TcpRetryEvent["CONNECTION_ERROR"] = "connection-error";
})(TcpRetryEvent = exports.TcpRetryEvent || (exports.TcpRetryEvent = {}));
/**
 * gRPC events
 */
var GrpcRetryEvent;
(function (GrpcRetryEvent) {
    /**
     * Request was cancelled
     *
     * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html
     */
    GrpcRetryEvent["CANCELLED"] = "cancelled";
    /**
     * The deadline was exceeded
     *
     * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html
     */
    GrpcRetryEvent["DEADLINE_EXCEEDED"] = "deadline-exceeded";
    /**
     * Internal error
     *
     * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html
     */
    GrpcRetryEvent["INTERNAL_ERROR"] = "internal";
    /**
     * A resource was exhausted
     *
     * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html
     */
    GrpcRetryEvent["RESOURCE_EXHAUSTED"] = "resource-exhausted";
    /**
     * The service is unavailable
     *
     * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html
     */
    GrpcRetryEvent["UNAVAILABLE"] = "unavailable";
})(GrpcRetryEvent = exports.GrpcRetryEvent || (exports.GrpcRetryEvent = {}));
/**
 * Used to generate specs with different protocols for a RouteSpec
 */
class RouteSpec {
    /**
     * Creates an HTTP Based RouteSpec
     */
    static http(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_HttpRouteSpecOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.http);
            }
            throw error;
        }
        return new HttpRouteSpec(options, shared_interfaces_1.Protocol.HTTP);
    }
    /**
     * Creates an HTTP2 Based RouteSpec
     *
     */
    static http2(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_HttpRouteSpecOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.http2);
            }
            throw error;
        }
        return new HttpRouteSpec(options, shared_interfaces_1.Protocol.HTTP2);
    }
    /**
     * Creates a TCP Based RouteSpec
     */
    static tcp(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_TcpRouteSpecOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.tcp);
            }
            throw error;
        }
        return new TcpRouteSpec(options);
    }
    /**
     * Creates a GRPC Based RouteSpec
     */
    static grpc(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_GrpcRouteSpecOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.grpc);
            }
            throw error;
        }
        return new GrpcRouteSpec(options);
    }
}
_a = JSII_RTTI_SYMBOL_1;
RouteSpec[_a] = { fqn: "aws-cdk-lib.aws_appmesh.RouteSpec", version: "2.75.1" };
exports.RouteSpec = RouteSpec;
class HttpRouteSpec extends RouteSpec {
    constructor(props, protocol) {
        super();
        this.protocol = protocol;
        this.match = props.match;
        this.weightedTargets = props.weightedTargets;
        this.timeout = props.timeout;
        this.priority = props.priority;
        if (props.retryPolicy) {
            const httpRetryEvents = props.retryPolicy.httpRetryEvents ?? [];
            const tcpRetryEvents = props.retryPolicy.tcpRetryEvents ?? [];
            if (httpRetryEvents.length + tcpRetryEvents.length === 0) {
                throw new Error('You must specify one value for at least one of `httpRetryEvents` or `tcpRetryEvents`');
            }
            this.retryPolicy = {
                ...props.retryPolicy,
                httpRetryEvents: httpRetryEvents.length > 0 ? httpRetryEvents : undefined,
                tcpRetryEvents: tcpRetryEvents.length > 0 ? tcpRetryEvents : undefined,
            };
        }
    }
    bind(scope) {
        const pathMatchConfig = (this.match?.path ?? http_route_path_match_1.HttpRoutePathMatch.startsWith('/')).bind(scope);
        // Set prefix path match to '/' if none of path matches are defined.
        const headers = this.match?.headers;
        const queryParameters = this.match?.queryParameters;
        (0, utils_1.validateHttpMatchArrayLength)(headers, queryParameters);
        const httpConfig = {
            action: {
                weightedTargets: renderWeightedTargets(this.weightedTargets),
            },
            match: {
                prefix: pathMatchConfig.prefixPathMatch,
                path: pathMatchConfig.wholePathMatch,
                headers: headers?.map(header => header.bind(scope).headerMatch),
                method: this.match?.method,
                scheme: this.match?.protocol,
                queryParameters: queryParameters?.map(queryParameter => queryParameter.bind(scope).queryParameterMatch),
            },
            timeout: renderTimeout(this.timeout),
            retryPolicy: this.retryPolicy ? renderHttpRetryPolicy(this.retryPolicy) : undefined,
        };
        return {
            priority: this.priority,
            httpRouteSpec: this.protocol === shared_interfaces_1.Protocol.HTTP ? httpConfig : undefined,
            http2RouteSpec: this.protocol === shared_interfaces_1.Protocol.HTTP2 ? httpConfig : undefined,
        };
    }
}
class TcpRouteSpec extends RouteSpec {
    constructor(props) {
        super();
        this.weightedTargets = props.weightedTargets;
        this.timeout = props.timeout;
        this.priority = props.priority;
    }
    bind(_scope) {
        return {
            priority: this.priority,
            tcpRouteSpec: {
                action: {
                    weightedTargets: renderWeightedTargets(this.weightedTargets),
                },
                timeout: renderTimeout(this.timeout),
            },
        };
    }
}
class GrpcRouteSpec extends RouteSpec {
    constructor(props) {
        super();
        this.weightedTargets = props.weightedTargets;
        this.match = props.match;
        this.timeout = props.timeout;
        this.priority = props.priority;
        if (props.retryPolicy) {
            const grpcRetryEvents = props.retryPolicy.grpcRetryEvents ?? [];
            const httpRetryEvents = props.retryPolicy.httpRetryEvents ?? [];
            const tcpRetryEvents = props.retryPolicy.tcpRetryEvents ?? [];
            if (grpcRetryEvents.length + httpRetryEvents.length + tcpRetryEvents.length === 0) {
                throw new Error('You must specify one value for at least one of `grpcRetryEvents`, `httpRetryEvents` or `tcpRetryEvents`');
            }
            this.retryPolicy = {
                ...props.retryPolicy,
                grpcRetryEvents: grpcRetryEvents.length > 0 ? grpcRetryEvents : undefined,
                httpRetryEvents: httpRetryEvents.length > 0 ? httpRetryEvents : undefined,
                tcpRetryEvents: tcpRetryEvents.length > 0 ? tcpRetryEvents : undefined,
            };
        }
    }
    bind(scope) {
        const serviceName = this.match.serviceName;
        const methodName = this.match.methodName;
        const metadata = this.match.metadata;
        (0, utils_1.validateGrpcRouteMatch)(this.match);
        (0, utils_1.validateGrpcMatchArrayLength)(metadata);
        if (methodName && !serviceName) {
            throw new Error('If you specify a method name, you must also specify a service name');
        }
        return {
            priority: this.priority,
            grpcRouteSpec: {
                action: {
                    weightedTargets: renderWeightedTargets(this.weightedTargets),
                },
                match: {
                    serviceName: serviceName,
                    methodName: methodName,
                    metadata: metadata?.map(singleMetadata => singleMetadata.bind(scope).headerMatch),
                },
                timeout: renderTimeout(this.timeout),
                retryPolicy: this.retryPolicy ? renderGrpcRetryPolicy(this.retryPolicy) : undefined,
            },
        };
    }
}
/**
 * Utility method to add weighted route targets to an existing route
 */
function renderWeightedTargets(weightedTargets) {
    const renderedTargets = [];
    for (const t of weightedTargets) {
        renderedTargets.push({
            virtualNode: t.virtualNode.virtualNodeName,
            weight: t.weight == undefined ? 1 : t.weight,
        });
    }
    return renderedTargets;
}
/**
 * Utility method to construct a route timeout object
 */
function renderTimeout(timeout) {
    return timeout
        ? {
            idle: timeout?.idle !== undefined
                ? {
                    unit: 'ms',
                    value: timeout?.idle.toMilliseconds(),
                }
                : undefined,
            perRequest: timeout?.perRequest !== undefined
                ? {
                    unit: 'ms',
                    value: timeout?.perRequest.toMilliseconds(),
                }
                : undefined,
        }
        : undefined;
}
function renderHttpRetryPolicy(retryPolicy) {
    return {
        maxRetries: retryPolicy.retryAttempts,
        perRetryTimeout: {
            unit: 'ms',
            value: retryPolicy.retryTimeout.toMilliseconds(),
        },
        httpRetryEvents: retryPolicy.httpRetryEvents,
        tcpRetryEvents: retryPolicy.tcpRetryEvents,
    };
}
function renderGrpcRetryPolicy(retryPolicy) {
    return {
        ...renderHttpRetryPolicy(retryPolicy),
        grpcRetryEvents: retryPolicy.grpcRetryEvents,
    };
}
//# sourceMappingURL=data:application/json;base64,