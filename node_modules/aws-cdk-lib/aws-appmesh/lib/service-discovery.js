"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceDiscovery = exports.DnsResponseType = exports.IpPreference = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Enum of supported IP preferences.
 * Used to dictate the IP version for mesh wide and virtual node service discovery.
 * Also used to specify the IP version that a sidecar Envoy uses when sending traffic to a local application.
 */
var IpPreference;
(function (IpPreference) {
    /**
     * Use IPv4 when sending traffic to a local application.
     * Only use IPv4 for service discovery.
     */
    IpPreference["IPV4_ONLY"] = "IPv4_ONLY";
    /**
     * Use IPv4 when sending traffic to a local application.
     * First attempt to use IPv4 and fall back to IPv6 for service discovery.
     */
    IpPreference["IPV4_PREFERRED"] = "IPv4_PREFERRED";
    /**
     * Use IPv6 when sending traffic to a local application.
     * Only use IPv6 for service discovery.
     */
    IpPreference["IPV6_ONLY"] = "IPv6_ONLY";
    /**
     * Use IPv6 when sending traffic to a local application.
     * First attempt to use IPv6 and fall back to IPv4 for service discovery.
     */
    IpPreference["IPV6_PREFERRED"] = "IPv6_PREFERRED";
})(IpPreference = exports.IpPreference || (exports.IpPreference = {}));
/**
 * Enum of DNS service discovery response type
 */
var DnsResponseType;
(function (DnsResponseType) {
    /**
     * DNS resolver returns a loadbalanced set of endpoints and the traffic would be sent to the given endpoints.
     * It would not drain existing connections to other endpoints that are not part of this list.
     */
    DnsResponseType["LOAD_BALANCER"] = "LOADBALANCER";
    /**
     * DNS resolver is returning all the endpoints.
     * This also means that if an endpoint is missing, it would drain the current connections to the missing endpoint.
     */
    DnsResponseType["ENDPOINTS"] = "ENDPOINTS";
})(DnsResponseType = exports.DnsResponseType || (exports.DnsResponseType = {}));
/**
 * Provides the Service Discovery method a VirtualNode uses
 */
class ServiceDiscovery {
    /**
     * Returns DNS based service discovery
     *
     * @param hostname
     * @param responseType Specifies the DNS response type for the virtual node.
     *  The default is `DnsResponseType.LOAD_BALANCER`.
     * @param ipPreference No IP preference is applied to the Virtual Node.
     */
    static dns(hostname, responseType, ipPreference) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_DnsResponseType(responseType);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_IpPreference(ipPreference);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.dns);
            }
            throw error;
        }
        return new DnsServiceDiscovery(hostname, responseType, ipPreference);
    }
    /**
     * Returns Cloud Map based service discovery
     *
     * @param service The AWS Cloud Map Service to use for service discovery
     * @param instanceAttributes A string map that contains attributes with values that you can use to
     *  filter instances by any custom attribute that you specified when you
     *  registered the instance. Only instances that match all of the specified
     *  key/value pairs will be returned.
     * @param ipPreference No IP preference is applied to the Virtual Node.
     */
    static cloudMap(service, instanceAttributes, ipPreference) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_servicediscovery_IService(service);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_appmesh_IpPreference(ipPreference);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.cloudMap);
            }
            throw error;
        }
        return new CloudMapServiceDiscovery(service, instanceAttributes, ipPreference);
    }
}
_a = JSII_RTTI_SYMBOL_1;
ServiceDiscovery[_a] = { fqn: "aws-cdk-lib.aws_appmesh.ServiceDiscovery", version: "2.75.1" };
exports.ServiceDiscovery = ServiceDiscovery;
class DnsServiceDiscovery extends ServiceDiscovery {
    constructor(hostname, responseType, ipPreference) {
        super();
        this.hostname = hostname;
        this.responseType = responseType;
        this.ipPreference = ipPreference;
    }
    bind(_scope) {
        return {
            dns: {
                hostname: this.hostname,
                responseType: this.responseType,
                ipPreference: this.ipPreference,
            },
        };
    }
}
class CloudMapServiceDiscovery extends ServiceDiscovery {
    constructor(service, instanceAttributes, ipPreference) {
        super();
        this.service = service;
        this.instanceAttributes = instanceAttributes;
        this.ipPreference = ipPreference;
    }
    bind(_scope) {
        return {
            cloudmap: {
                namespaceName: this.service.namespace.namespaceName,
                serviceName: this.service.serviceName,
                attributes: renderAttributes(this.instanceAttributes),
                ipPreference: this.ipPreference,
            },
        };
    }
}
function renderAttributes(attrs) {
    if (attrs === undefined) {
        return undefined;
    }
    return Object.entries(attrs).map(([key, value]) => ({ key, value }));
}
//# sourceMappingURL=data:application/json;base64,