"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stats = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Factory functions for standard statistics strings
 */
class Stats {
    /**
     * Percentile indicates the relative standing of a value in a dataset.
     *
     * Percentiles help you get a better understanding of the distribution of your metric data.
     *
     * For example, `p(90)` is the 90th percentile and means that 90% of the data
     * within the period is lower than this value and 10% of the data is higher
     * than this value.
     */
    static percentile(percentile) {
        assertPercentage(percentile);
        return `p${percentile}`;
    }
    /**
     * A shorter alias for `percentile()`.
     */
    static p(percentile) {
        return Stats.percentile(percentile);
    }
    /**
     * Trimmed mean (TM) is the mean of all values that are between two specified boundaries.
     *
     * Values outside of the boundaries are ignored when the mean is calculated.
     * You define the boundaries as one or two numbers between 0 and 100, up to 10
     * decimal places. The numbers are percentages.
     *
     * - If two numbers are given, they define the lower and upper bounds in percentages,
     *   respectively.
     * - If one number is given, it defines the upper bound (the lower bound is assumed to
     *   be 0).
     *
     * For example, `tm(90)` calculates the average after removing the 10% of data
     * points with the highest values; `tm(10, 90)` calculates the average after removing the
     * 10% with the lowest and 10% with the highest values.
     */
    static trimmedMean(p1, p2) {
        return boundaryPercentileStat('tm', 'TM', p1, p2);
    }
    /**
     * A shorter alias for `trimmedMean()`.
     */
    static tm(p1, p2) {
        return Stats.trimmedMean(p1, p2);
    }
    /**
     * Winsorized mean (WM) is similar to trimmed mean.
     *
     * However, with winsorized mean, the values that are outside the boundary are
     * not ignored, but instead are considered to be equal to the value at the
     * edge of the appropriate boundary.  After this normalization, the average is
     * calculated. You define the boundaries as one or two numbers between 0 and
     * 100, up to 10 decimal places.
     *
     * - If two numbers are given, they define the lower and upper bounds in percentages,
     *   respectively.
     * - If one number is given, it defines the upper bound (the lower bound is assumed to
     *   be 0).
     *
     * For example, `tm(90)` calculates the average after removing the 10% of data
     * points with the highest values; `tm(10, 90)` calculates the average after removing the
     * 10% with the lowest and 10% with the highest values.
     *
     * For example, `wm(90)` calculates the average while treating the 10% of the
     * highest values to be equal to the value at the 90th percentile.
     * `wm(10, 90)` calculates the average while treaing the bottom 10% and the
     * top 10% of values to be equal to the boundary values.
     */
    static winsorizedMean(p1, p2) {
        return boundaryPercentileStat('wm', 'WM', p1, p2);
    }
    /**
     * A shorter alias for `winsorizedMean()`.
     */
    static wm(p1, p2) {
        return Stats.winsorizedMean(p1, p2);
    }
    /**
     * Trimmed count (TC) is the number of data points in the chosen range for a trimmed mean statistic.
     *
     * - If two numbers are given, they define the lower and upper bounds in percentages,
     *   respectively.
     * - If one number is given, it defines the upper bound (the lower bound is assumed to
     *   be 0).
     *
     * For example, `tc(90)` returns the number of data points not including any
     * data points that fall in the highest 10% of the values. `tc(10, 90)`
     * returns the number of data points not including any data points that fall
     * in the lowest 10% of the values and the highest 90% of the values.
     */
    static trimmedCount(p1, p2) {
        return boundaryPercentileStat('tc', 'TC', p1, p2);
    }
    /**
     * Shorter alias for `trimmedCount()`.
     */
    static tc(p1, p2) {
        return Stats.trimmedCount(p1, p2);
    }
    /**
     * Trimmed sum (TS) is the sum of the values of data points in a chosen range for a trimmed mean statistic.
     * It is equivalent to `(Trimmed Mean) * (Trimmed count)`.
     *
     * - If two numbers are given, they define the lower and upper bounds in percentages,
     *   respectively.
     * - If one number is given, it defines the upper bound (the lower bound is assumed to
     *   be 0).
     *
     * For example, `ts(90)` returns the sum of the data points not including any
     * data points that fall in the highest 10% of the values.  `ts(10, 90)`
     * returns the sum of the data points not including any data points that fall
     * in the lowest 10% of the values and the highest 90% of the values.
     */
    static trimmedSum(p1, p2) {
        return boundaryPercentileStat('ts', 'TS', p1, p2);
    }
    /**
     * Shorter alias for `trimmedSum()`.
     */
    static ts(p1, p2) {
        return Stats.trimmedSum(p1, p2);
    }
    /**
     * Percentile rank (PR) is the percentage of values that meet a fixed threshold.
     *
     * - If two numbers are given, they define the lower and upper bounds in absolute values,
     *   respectively.
     * - If one number is given, it defines the upper bound (the lower bound is assumed to
     *   be 0).
     *
     * For example, `percentileRank(300)` returns the percentage of data points that have a value of 300 or less.
     * `percentileRank(100, 2000)` returns the percentage of data points that have a value between 100 and 2000.
     */
    static percentileRank(v1, v2) {
        if (v2 !== undefined) {
            return `PR(${v1}:${v2})`;
        }
        else {
            return `PR(:${v1})`;
        }
    }
    /**
     * Shorter alias for `percentileRank()`.
     */
    static pr(v1, v2) {
        return this.percentileRank(v1, v2);
    }
}
_a = JSII_RTTI_SYMBOL_1;
Stats[_a] = { fqn: "aws-cdk-lib.aws_cloudwatch.Stats", version: "2.75.1" };
/**
 * The count (number) of data points used for the statistical calculation.
 */
Stats.SAMPLE_COUNT = 'SampleCount';
/**
 * The value of Sum / SampleCount during the specified period.
 */
Stats.AVERAGE = 'Average';
/**
 * All values submitted for the matching metric added together.
 * This statistic can be useful for determining the total volume of a metric.
 */
Stats.SUM = 'Sum';
/**
 * The lowest value observed during the specified period.
 * You can use this value to determine low volumes of activity for your application.
 */
Stats.MINIMUM = 'Minimum';
/**
 * The highest value observed during the specified period.
 * You can use this value to determine high volumes of activity for your application.
 */
Stats.MAXIMUM = 'Maximum';
/**
 * Interquartile mean (IQM) is the trimmed mean of the interquartile range, or the middle 50% of values.
 *
 * It is equivalent to `trimmedMean(25, 75)`.
 */
Stats.IQM = 'IQM';
exports.Stats = Stats;
function assertPercentage(x) {
    if (x !== undefined && (x < 0 || x > 100)) {
        throw new Error(`Expecting a percentage, got: ${x}`);
    }
}
/**
 * Formatting helper because all these stats look the same
 */
function boundaryPercentileStat(oneBoundaryStat, twoBoundaryStat, p1, p2) {
    assertPercentage(p1);
    assertPercentage(p2);
    if (p2 !== undefined) {
        return `${twoBoundaryStat}(${p1}%:${p2}%)`;
    }
    else {
        return `${oneBoundaryStat}${p1}`;
    }
}
//# sourceMappingURL=data:application/json;base64,