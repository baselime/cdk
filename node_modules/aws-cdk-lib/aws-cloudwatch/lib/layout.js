"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spacer = exports.Column = exports.Row = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const widget_1 = require("./widget");
// This file contains widgets that exist for layout purposes
/**
 * A widget that contains other widgets in a horizontal row
 *
 * Widgets will be laid out next to each other
 */
class Row {
    constructor(...widgets) {
        /**
         * Relative position of each widget inside this row
         */
        this.offsets = [];
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_IWidget(widgets);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Row);
            }
            throw error;
        }
        this.widgets = widgets;
        this._width = 0;
        this._height = 0;
        let x = 0;
        let y = 0;
        for (const widget of widgets) {
            // See if we need to horizontally wrap to add this widget
            if (x + widget.width > widget_1.GRID_WIDTH) {
                y = this._height;
                x = 0;
            }
            this.updateDimensions(x, y, widget);
            x += widget.width;
        }
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    updateDimensions(x, y, widget) {
        this.offsets.push({ x, y });
        this._width = Math.max(this.width, x + widget.width);
        this._height = Math.max(this.height, y + widget.height);
    }
    /**
     * Add the widget to this container
     */
    addWidget(w) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_IWidget(w);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addWidget);
            }
            throw error;
        }
        this.widgets.push(w);
        let x = this.width;
        let y = this.height;
        if (x + w.width > widget_1.GRID_WIDTH) {
            y = this.height;
            x = 0;
        }
        this.updateDimensions(x, y, w);
    }
    position(x, y) {
        for (let i = 0; i < this.widgets.length; i++) {
            this.widgets[i].position(x + this.offsets[i].x, y + this.offsets[i].y);
        }
    }
    toJson() {
        const ret = [];
        for (const widget of this.widgets) {
            ret.push(...widget.toJson());
        }
        return ret;
    }
}
_a = JSII_RTTI_SYMBOL_1;
Row[_a] = { fqn: "aws-cdk-lib.aws_cloudwatch.Row", version: "2.75.1" };
exports.Row = Row;
/**
 * A widget that contains other widgets in a vertical column
 *
 * Widgets will be laid out next to each other
 */
class Column {
    constructor(...widgets) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_IWidget(widgets);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Column);
            }
            throw error;
        }
        this.widgets = widgets;
        // There's no vertical wrapping so this one's a lot easier
        this._width = Math.max(...this.widgets.map(w => w.width));
        this._height = sum(...this.widgets.map(w => w.height));
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    /**
     * Add the widget to this container
     */
    addWidget(w) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_IWidget(w);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addWidget);
            }
            throw error;
        }
        this.widgets.push(w);
        this._width = Math.max(this.width, w.width);
        this._height += w.height;
    }
    position(x, y) {
        let widgetY = y;
        for (const widget of this.widgets) {
            widget.position(x, widgetY);
            widgetY += widget.height;
        }
    }
    toJson() {
        const ret = [];
        for (const widget of this.widgets) {
            ret.push(...widget.toJson());
        }
        return ret;
    }
}
_b = JSII_RTTI_SYMBOL_1;
Column[_b] = { fqn: "aws-cdk-lib.aws_cloudwatch.Column", version: "2.75.1" };
exports.Column = Column;
/**
 * A widget that doesn't display anything but takes up space
 */
class Spacer {
    constructor(props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_SpacerProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Spacer);
            }
            throw error;
        }
        this.width = props.width || 1;
        this.height = props.height || 1;
    }
    position(_x, _y) {
    }
    toJson() {
        return [];
    }
}
_c = JSII_RTTI_SYMBOL_1;
Spacer[_c] = { fqn: "aws-cdk-lib.aws_cloudwatch.Spacer", version: "2.75.1" };
exports.Spacer = Spacer;
/**
 * Return the sum of a list of numbers
 */
function sum(...xs) {
    let ret = 0;
    for (const x of xs) {
        ret += x;
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,