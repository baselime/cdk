"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeRawStringStatistic = exports.normalizeStatistic = exports.parseStatistic = exports.pairStatisticToString = exports.singleStatisticToString = void 0;
const stats_1 = require("../stats");
function parseSingleStatistic(statistic, prefix) {
    const prefixLower = prefix.toLowerCase();
    // Allow `P99` uppercase
    statistic = statistic.toLowerCase();
    if (!statistic.startsWith(prefixLower)) {
        return undefined;
    }
    // A decimal positive number regex (1, 1.2, 99.999, etc)
    const reDecimal = '\\d+(?:\\.\\d+)?';
    // p99.99
    // /^p(\d+(?:\.\d+)?)$/
    const r = new RegExp(`^${prefixLower}(${reDecimal})$`).exec(statistic);
    if (!r) {
        return undefined;
    }
    const value = parseFloat(r[1]);
    if (value < 0 || value > 100) {
        return undefined;
    }
    return {
        type: 'single',
        rawStatistic: statistic,
        statPrefix: prefixLower,
        value,
    };
}
/**
 * Parse a statistic that looks like `tm( LOWER : UPPER )`.
 */
function parsePairStatistic(statistic, prefix) {
    const r = new RegExp(`^${prefix}\\(([^)]+)\\)$`, 'i').exec(statistic);
    if (!r) {
        return undefined;
    }
    const common = {
        type: 'pair',
        canBeSingleStat: false,
        rawStatistic: statistic,
        statPrefix: prefix.toUpperCase(),
    };
    const [lhs, rhs] = r[1].split(':');
    if (rhs === undefined) {
        // Doesn't have 2 parts
        return undefined;
    }
    const parseNumberAndPercent = (x) => {
        x = x.trim();
        if (!x) {
            return [undefined, false];
        }
        const value = parseFloat(x.replace(/%$/, ''));
        const percent = x.endsWith('%');
        if (isNaN(value) || value < 0 || (percent && value > 100)) {
            return ['fail', false];
        }
        return [value, percent];
    };
    const [lower, lhsPercent] = parseNumberAndPercent(lhs);
    const [upper, rhsPercent] = parseNumberAndPercent(rhs);
    if (lower === 'fail' || upper === 'fail' || (lower === undefined && upper === undefined)) {
        return undefined;
    }
    if (lower !== undefined && upper !== undefined && lhsPercent !== rhsPercent) {
        // If one value is a percentage, the other one must be too
        return undefined;
    }
    const isPercent = lhsPercent || rhsPercent;
    const canBeSingleStat = lower === undefined && isPercent;
    const asSingleStatStr = canBeSingleStat ? `${prefix.toLowerCase()}${upper}` : undefined;
    return { ...common, lower, upper, isPercent, canBeSingleStat, asSingleStatStr };
}
function singleStatisticToString(parsed) {
    return `${parsed.statPrefix}${parsed.value}`;
}
exports.singleStatisticToString = singleStatisticToString;
function pairStatisticToString(parsed) {
    const percent = parsed.isPercent ? '%' : '';
    const lower = parsed.lower ? `${parsed.lower}${percent}` : '';
    const upper = parsed.upper ? `${parsed.upper}${percent}` : '';
    return `${parsed.statPrefix}(${lower}:${upper})`;
}
exports.pairStatisticToString = pairStatisticToString;
/**
 * Parse a statistic, returning the type of metric that was used
 */
function parseStatistic(stat) {
    const lowerStat = stat.toLowerCase();
    // Simple statistics
    const statMap = {
        average: stats_1.Stats.AVERAGE,
        avg: stats_1.Stats.AVERAGE,
        minimum: stats_1.Stats.MINIMUM,
        min: stats_1.Stats.MINIMUM,
        maximum: stats_1.Stats.MAXIMUM,
        max: stats_1.Stats.MAXIMUM,
        samplecount: stats_1.Stats.SAMPLE_COUNT,
        n: stats_1.Stats.SAMPLE_COUNT,
        sum: stats_1.Stats.SUM,
        iqm: stats_1.Stats.IQM,
    };
    if (lowerStat in statMap) {
        return {
            type: 'simple',
            statistic: statMap[lowerStat],
        };
    }
    let m = undefined;
    // Percentile statistics
    m = parseSingleStatistic(stat, 'p');
    if (m)
        return { ...m, statName: 'percentile' };
    // Trimmed mean statistics
    m = parseSingleStatistic(stat, 'tm') || parsePairStatistic(stat, 'tm');
    if (m)
        return { ...m, statName: 'trimmedMean' };
    // Winsorized mean statistics
    m = parseSingleStatistic(stat, 'wm') || parsePairStatistic(stat, 'wm');
    if (m)
        return { ...m, statName: 'winsorizedMean' };
    // Trimmed count statistics
    m = parseSingleStatistic(stat, 'tc') || parsePairStatistic(stat, 'tc');
    if (m)
        return { ...m, statName: 'trimmedCount' };
    // Trimmed sum statistics
    m = parseSingleStatistic(stat, 'ts') || parsePairStatistic(stat, 'ts');
    if (m)
        return { ...m, statName: 'trimmedSum' };
    return {
        type: 'generic',
        statistic: stat,
    };
}
exports.parseStatistic = parseStatistic;
function normalizeStatistic(parsed) {
    if (parsed.type === 'simple' || parsed.type === 'generic') {
        return parsed.statistic;
    }
    else if (parsed.type === 'single') {
        // Avoid parsing because we might get into
        // floating point rounding issues, return as-is but lowercase the stat prefix.
        return parsed.rawStatistic.toLowerCase();
    }
    else if (parsed.type === 'pair') {
        // Avoid parsing because we might get into
        // floating point rounding issues, return as-is but uppercase the stat prefix.
        return parsed.rawStatistic.toUpperCase();
    }
    return '';
}
exports.normalizeStatistic = normalizeStatistic;
function normalizeRawStringStatistic(stat) {
    const parsed = parseStatistic(stat);
    return normalizeStatistic(parsed);
}
exports.normalizeRawStringStatistic = normalizeRawStringStatistic;
//# sourceMappingURL=data:application/json;base64,