"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryDefinition = exports.QueryString = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const _1 = require(".");
/**
 * Define a QueryString
 */
class QueryString {
    constructor(props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_logs_QueryStringProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, QueryString);
            }
            throw error;
        }
        this.fields = props.fields;
        this.stats = props.stats;
        this.sort = props.sort;
        this.limit = props.limit;
        this.display = props.display;
        // Determine parsing by either the parseStatements or parse properties, or default to empty array
        if (props.parseStatements) {
            this.parse = props.parseStatements;
        }
        else if (props.parse) {
            this.parse = [props.parse];
        }
        else {
            this.parse = [];
        }
        // Determine filtering by either the filterStatements or filter properties, or default to empty array
        if (props.filterStatements) {
            this.filter = props.filterStatements;
        }
        else if (props.filter) {
            this.filter = [props.filter];
        }
        else {
            this.filter = [];
        }
    }
    /**
    * String representation of this QueryString.
    */
    toString() {
        return [
            this.buildQueryLine('fields', this.fields?.join(', ')),
            ...this.buildQueryLines('parse', this.parse),
            ...this.buildQueryLines('filter', this.filter),
            this.buildQueryLine('stats', this.stats),
            this.buildQueryLine('sort', this.sort),
            this.buildQueryLine('limit', this.limit?.toString()),
            this.buildQueryLine('display', this.display),
        ].filter((queryLine) => queryLine !== undefined && queryLine.length > 0).join('\n| ');
    }
    /**
     * Build an array of query lines given a command and statement(s).
     *
     * @param command a query command
     * @param statements one or more query statements for the specified command, or undefined
     * @returns an array of the query string lines generated from the provided command and statements
     */
    buildQueryLines(command, statements) {
        if (statements === undefined) {
            return [];
        }
        return statements.map((statement) => this.buildQueryLine(command, statement));
    }
    /**
     * Build a single query line given a command and statement.
     *
     * @param command a query command
     * @param statement a single query statement
     * @returns a single query string line generated from the provided command and statement
     */
    buildQueryLine(command, statement) {
        return statement ? `${command} ${statement}` : '';
    }
}
_a = JSII_RTTI_SYMBOL_1;
QueryString[_a] = { fqn: "aws-cdk-lib.aws_logs.QueryString", version: "2.75.1" };
exports.QueryString = QueryString;
/**
 * Define a query definition for CloudWatch Logs Insights
 */
class QueryDefinition extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.queryDefinitionName,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_logs_QueryDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, QueryDefinition);
            }
            throw error;
        }
        const queryDefinition = new _1.CfnQueryDefinition(this, 'Resource', {
            name: props.queryDefinitionName,
            queryString: props.queryString.toString(),
            logGroupNames: typeof props.logGroups === 'undefined' ? [] : props.logGroups.flatMap(logGroup => logGroup.logGroupName),
        });
        this.queryDefinitionId = queryDefinition.attrQueryDefinitionId;
    }
}
_b = JSII_RTTI_SYMBOL_1;
QueryDefinition[_b] = { fqn: "aws-cdk-lib.aws_logs.QueryDefinition", version: "2.75.1" };
exports.QueryDefinition = QueryDefinition;
//# sourceMappingURL=data:application/json;base64,