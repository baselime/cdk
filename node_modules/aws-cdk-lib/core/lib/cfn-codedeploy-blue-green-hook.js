"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnCodeDeployBlueGreenHook = exports.CfnTrafficRoutingType = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cfn_hook_1 = require("./cfn-hook");
const util_1 = require("./util");
/**
 * The possible types of traffic shifting for the blue-green deployment configuration.
 * The type of the `CfnTrafficRoutingConfig.type` property.
 */
var CfnTrafficRoutingType;
(function (CfnTrafficRoutingType) {
    /**
     * Switch from blue to green at once.
     */
    CfnTrafficRoutingType["ALL_AT_ONCE"] = "AllAtOnce";
    /**
     * Specifies a configuration that shifts traffic from blue to green in two increments.
     */
    CfnTrafficRoutingType["TIME_BASED_CANARY"] = "TimeBasedCanary";
    /**
     * Specifies a configuration that shifts traffic from blue to green in equal increments,
     * with an equal number of minutes between each increment.
     */
    CfnTrafficRoutingType["TIME_BASED_LINEAR"] = "TimeBasedLinear";
})(CfnTrafficRoutingType = exports.CfnTrafficRoutingType || (exports.CfnTrafficRoutingType = {}));
/**
 * A CloudFormation Hook for CodeDeploy blue-green ECS deployments.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/blue-green.html#blue-green-template-reference
 */
class CfnCodeDeployBlueGreenHook extends cfn_hook_1.CfnHook {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, hookAttributes, options) {
        hookAttributes = hookAttributes || {};
        const hookProperties = options.parser.parseValue(hookAttributes.Properties);
        return new CfnCodeDeployBlueGreenHook(scope, id, {
            serviceRole: hookProperties?.ServiceRole,
            applications: hookProperties?.Applications?.map(applicationFromCloudFormation),
            trafficRoutingConfig: {
                type: hookProperties?.TrafficRoutingConfig?.Type,
                timeBasedCanary: {
                    stepPercentage: hookProperties?.TrafficRoutingConfig?.TimeBasedCanary?.StepPercentage,
                    bakeTimeMins: hookProperties?.TrafficRoutingConfig?.TimeBasedCanary?.BakeTimeMins,
                },
                timeBasedLinear: {
                    stepPercentage: hookProperties?.TrafficRoutingConfig?.TimeBasedLinear?.StepPercentage,
                    bakeTimeMins: hookProperties?.TrafficRoutingConfig?.TimeBasedLinear?.BakeTimeMins,
                },
            },
            additionalOptions: {
                terminationWaitTimeInMinutes: hookProperties?.AdditionalOptions?.TerminationWaitTimeInMinutes,
            },
            lifecycleEventHooks: {
                beforeInstall: hookProperties?.LifecycleEventHooks?.BeforeInstall,
                afterInstall: hookProperties?.LifecycleEventHooks?.AfterInstall,
                afterAllowTestTraffic: hookProperties?.LifecycleEventHooks?.AfterAllowTestTraffic,
                beforeAllowTraffic: hookProperties?.LifecycleEventHooks?.BeforeAllowTraffic,
                afterAllowTraffic: hookProperties?.LifecycleEventHooks?.AfterAllowTraffic,
            },
        });
        function applicationFromCloudFormation(app) {
            const target = findResource(app?.Target?.LogicalID);
            const taskDefinitions = app?.ECSAttributes?.TaskDefinitions?.map((td) => findResource(td));
            const taskSets = app?.ECSAttributes?.TaskSets?.map((ts) => findResource(ts));
            const prodTrafficRoute = findResource(app?.ECSAttributes?.TrafficRouting?.ProdTrafficRoute?.LogicalID);
            const testTrafficRoute = findResource(app?.ECSAttributes?.TrafficRouting?.TestTrafficRoute?.LogicalID);
            const targetGroups = app?.ECSAttributes?.TrafficRouting?.TargetGroups?.map((tg) => findResource(tg));
            return {
                target: {
                    type: app?.Target?.Type,
                    logicalId: target?.logicalId,
                },
                ecsAttributes: {
                    taskDefinitions: taskDefinitions?.map(td => td?.logicalId),
                    taskSets: taskSets?.map(ts => ts?.logicalId),
                    trafficRouting: {
                        prodTrafficRoute: {
                            type: app?.ECSAttributes?.TrafficRouting?.ProdTrafficRoute?.Type,
                            logicalId: prodTrafficRoute?.logicalId,
                        },
                        testTrafficRoute: {
                            type: app?.ECSAttributes?.TrafficRouting?.TestTrafficRoute?.Type,
                            logicalId: testTrafficRoute?.logicalId,
                        },
                        targetGroups: targetGroups?.map((tg) => tg?.logicalId),
                    },
                },
            };
        }
        function findResource(logicalId) {
            if (logicalId == null) {
                return undefined;
            }
            const ret = options.parser.finder.findResource(logicalId);
            if (!ret) {
                throw new Error(`Hook '${id}' references resource '${logicalId}' that was not found in the template`);
            }
            return ret;
        }
    }
    /**
     * Creates a new CodeDeploy blue-green ECS Hook.
     *
     * @param scope the scope to create the hook in (usually the containing Stack object)
     * @param id the identifier of the construct - will be used to generate the logical ID of the Hook
     * @param props the properties of the Hook
     */
    constructor(scope, id, props) {
        super(scope, id, {
            type: 'AWS::CodeDeploy::BlueGreen',
            // we render the properties ourselves
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_CfnCodeDeployBlueGreenHookProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnCodeDeployBlueGreenHook);
            }
            throw error;
        }
        this._serviceRole = props.serviceRole;
        this._applications = props.applications;
        this._trafficRoutingConfig = props.trafficRoutingConfig;
        this._additionalOptions = props.additionalOptions;
        this._lifecycleEventHooks = props.lifecycleEventHooks;
    }
    /**
     * The IAM Role for CloudFormation to use to perform blue-green deployments.
     */
    get serviceRole() {
        return this._serviceRole;
    }
    set serviceRole(serviceRole) {
        this._serviceRole = serviceRole;
    }
    /**
     * Properties of the Amazon ECS applications being deployed.
     */
    get applications() {
        return this._applications;
    }
    set applications(value) {
        this._applications = value;
    }
    /**
     * Traffic routing configuration settings.
     *
     * @default - time-based canary traffic shifting, with a 15% step percentage and a five minute bake time
     */
    get trafficRoutingConfig() {
        return this._trafficRoutingConfig;
    }
    set trafficRoutingConfig(value) {
        this._trafficRoutingConfig = value;
    }
    /**
     * Additional options for the blue/green deployment.
     *
     * @default - no additional options
     */
    get additionalOptions() {
        return this._additionalOptions;
    }
    set additionalOptions(value) {
        this._additionalOptions = value;
    }
    /**
     * Use lifecycle event hooks to specify a Lambda function that CodeDeploy can call to validate a deployment.
     * You can use the same function or a different one for deployment lifecycle events.
     * Following completion of the validation tests,
     * the Lambda `CfnCodeDeployBlueGreenLifecycleEventHooks.afterAllowTraffic`
     * function calls back CodeDeploy and delivers a result of 'Succeeded' or 'Failed'.
     *
     * @default - no lifecycle event hooks
     */
    get lifecycleEventHooks() {
        return this._lifecycleEventHooks;
    }
    set lifecycleEventHooks(value) {
        this._lifecycleEventHooks = value;
    }
    renderProperties(_props) {
        return {
            ServiceRole: this.serviceRole,
            Applications: this.applications.map((app) => ({
                Target: {
                    Type: app.target.type,
                    LogicalID: app.target.logicalId,
                },
                ECSAttributes: {
                    TaskDefinitions: app.ecsAttributes.taskDefinitions,
                    TaskSets: app.ecsAttributes.taskSets,
                    TrafficRouting: {
                        ProdTrafficRoute: {
                            Type: app.ecsAttributes.trafficRouting.prodTrafficRoute.type,
                            LogicalID: app.ecsAttributes.trafficRouting.prodTrafficRoute.logicalId,
                        },
                        TestTrafficRoute: {
                            Type: app.ecsAttributes.trafficRouting.testTrafficRoute.type,
                            LogicalID: app.ecsAttributes.trafficRouting.testTrafficRoute.logicalId,
                        },
                        TargetGroups: app.ecsAttributes.trafficRouting.targetGroups,
                    },
                },
            })),
            TrafficRoutingConfig: (0, util_1.undefinedIfAllValuesAreEmpty)({
                Type: this.trafficRoutingConfig?.type,
                TimeBasedCanary: (0, util_1.undefinedIfAllValuesAreEmpty)({
                    StepPercentage: this.trafficRoutingConfig?.timeBasedCanary?.stepPercentage,
                    BakeTimeMins: this.trafficRoutingConfig?.timeBasedCanary?.bakeTimeMins,
                }),
                TimeBasedLinear: (0, util_1.undefinedIfAllValuesAreEmpty)({
                    StepPercentage: this.trafficRoutingConfig?.timeBasedLinear?.stepPercentage,
                    BakeTimeMins: this.trafficRoutingConfig?.timeBasedLinear?.bakeTimeMins,
                }),
            }),
            AdditionalOptions: (0, util_1.undefinedIfAllValuesAreEmpty)({
                TerminationWaitTimeInMinutes: this.additionalOptions?.terminationWaitTimeInMinutes,
            }),
            LifecycleEventHooks: (0, util_1.undefinedIfAllValuesAreEmpty)({
                BeforeInstall: this.lifecycleEventHooks?.beforeInstall,
                AfterInstall: this.lifecycleEventHooks?.afterInstall,
                AfterAllowTestTraffic: this.lifecycleEventHooks?.afterAllowTestTraffic,
                BeforeAllowTraffic: this.lifecycleEventHooks?.beforeAllowTraffic,
                AfterAllowTraffic: this.lifecycleEventHooks?.afterAllowTraffic,
            }),
        };
    }
}
_a = JSII_RTTI_SYMBOL_1;
CfnCodeDeployBlueGreenHook[_a] = { fqn: "aws-cdk-lib.CfnCodeDeployBlueGreenHook", version: "2.75.1" };
exports.CfnCodeDeployBlueGreenHook = CfnCodeDeployBlueGreenHook;
//# sourceMappingURL=data:application/json;base64,