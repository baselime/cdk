"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeMetadata = void 0;
const fs = require("fs");
const path = require("path");
const cloud_assembly_schema_1 = require("../../../cloud-assembly-schema");
const constructs_1 = require("constructs");
const runtime_info_1 = require("./runtime-info");
const annotations_1 = require("../annotations");
const stack_1 = require("../stack");
const tree_1 = require("../tree");
const FILE_PATH = 'tree.json';
/**
 * Construct that is automatically attached to the top-level `App`.
 * This generates, as part of synthesis, a file containing the construct tree and the metadata for each node in the tree.
 * The output is in a tree format so as to preserve the construct hierarchy.
 *
 */
class TreeMetadata extends constructs_1.Construct {
    constructor(scope) {
        super(scope, 'Tree');
    }
    /**
     * Create tree.json
     * @internal
     */
    _synthesizeTree(session) {
        const lookup = {};
        const visit = (construct) => {
            const children = construct.node.children.map((c) => {
                try {
                    return visit(c);
                }
                catch (e) {
                    annotations_1.Annotations.of(this).addWarning(`Failed to render tree metadata for node [${c.node.id}]. Reason: ${e}`);
                    return undefined;
                }
            });
            const childrenMap = children
                .filter((child) => child !== undefined)
                .reduce((map, child) => Object.assign(map, { [child.id]: child }), {});
            const parent = construct.node.scope;
            const node = {
                id: construct.node.id || 'App',
                path: construct.node.path,
                parent: parent && parent.node.path ? {
                    id: parent.node.id,
                    path: parent.node.path,
                    constructInfo: (0, runtime_info_1.constructInfoFromConstruct)(parent),
                } : undefined,
                children: Object.keys(childrenMap).length === 0 ? undefined : childrenMap,
                attributes: this.synthAttributes(construct),
                constructInfo: (0, runtime_info_1.constructInfoFromConstruct)(construct),
            };
            lookup[node.path] = node;
            return node;
        };
        const tree = {
            version: 'tree-0.1',
            tree: visit(this.node.root),
        };
        this._tree = lookup;
        const builder = session.assembly;
        fs.writeFileSync(path.join(builder.outdir, FILE_PATH), JSON.stringify(tree, (key, value) => {
            // we are adding in the `parent` attribute for internal use
            // and it doesn't make much sense to include it in the
            // tree.json
            if (key === 'parent')
                return undefined;
            return value;
        }, 2), { encoding: 'utf-8' });
        builder.addArtifact('Tree', {
            type: cloud_assembly_schema_1.ArtifactType.CDK_TREE,
            properties: {
                file: FILE_PATH,
            },
        });
    }
    /**
     * Each node will only have 1 level up (node.parent.parent will always be undefined)
     * so we need to reconstruct the node making sure the parents are set
     */
    getNodeWithParents(node) {
        if (!this._tree) {
            throw new Error(`attempting to get node branch for ${node.path}, but the tree has not been created yet!`);
        }
        let tree = node;
        if (node.parent) {
            tree = {
                ...node,
                parent: this.getNodeWithParents(this._tree[node.parent.path]),
            };
        }
        return tree;
    }
    /**
     * Construct a new tree with only the nodes that we care about.
     * Normally each node can contain many child nodes, but we only care about the
     * tree that leads to a specific construct so drop any nodes not in that path
     *
     * @param node Node the current tree node
     * @param child Node the previous tree node and the current node's child node
     * @returns Node the new tree
     */
    renderTreeWithChildren(node, child) {
        if (node.parent) {
            return this.renderTreeWithChildren(node.parent, node);
        }
        else if (child) {
            return {
                ...node,
                children: {
                    [child.id]: child,
                },
            };
        }
        return node;
    }
    /**
     * This gets a specific "branch" of the tree for a given construct path.
     * It will return the root Node of the tree with non-relevant branches filtered
     * out (i.e. node children that don't traverse to the given construct path)
     *
     * @internal
     */
    _getNodeBranch(constructPath) {
        if (!this._tree) {
            throw new Error(`attempting to get node branch for ${constructPath}, but the tree has not been created yet!`);
        }
        const tree = this._tree[constructPath];
        const treeWithParents = this.getNodeWithParents(tree);
        return this.renderTreeWithChildren(treeWithParents);
    }
    synthAttributes(construct) {
        // check if a construct implements IInspectable
        function canInspect(inspectable) {
            return inspectable.inspect !== undefined;
        }
        const inspector = new tree_1.TreeInspector();
        // get attributes from the inspector
        if (canInspect(construct)) {
            construct.inspect(inspector);
            return stack_1.Stack.of(construct).resolve(inspector.attributes);
        }
        return undefined;
    }
}
exports.TreeMetadata = TreeMetadata;
//# sourceMappingURL=data:application/json;base64,