"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCustomSynthesis = exports.synthesize = void 0;
const crypto_1 = require("crypto");
const fs = require("fs");
const path = require("path");
const cxapi = require("../../../cx-api");
const metadata_resource_1 = require("./metadata-resource");
const prepare_app_1 = require("./prepare-app");
const tree_metadata_1 = require("./tree-metadata");
const annotations_1 = require("../annotations");
const app_1 = require("../app");
const aspect_1 = require("../aspect");
const stack_1 = require("../stack");
const stage_1 = require("../stage");
const construct_tree_1 = require("../validation/private/construct-tree");
const report_1 = require("../validation/private/report");
const POLICY_VALIDATION_FILE_PATH = 'policy-validation-report.json';
const VALIDATION_REPORT_JSON_CONTEXT = '@aws-cdk/core:validationReportJson';
function synthesize(root, options = {}) {
    // add the TreeMetadata resource to the App first
    injectTreeMetadata(root);
    // we start by calling "synth" on all nested assemblies (which will take care of all their children)
    synthNestedAssemblies(root, options);
    invokeAspects(root);
    injectMetadataResources(root);
    // resolve references
    (0, prepare_app_1.prepareApp)(root);
    // give all children an opportunity to validate now that we've finished prepare
    if (!options.skipValidation) {
        validateTree(root);
    }
    // in unit tests, we support creating free-standing stacks, so we create the
    // assembly builder here.
    const builder = stage_1.Stage.isStage(root)
        ? root._assemblyBuilder
        : new cxapi.CloudAssemblyBuilder(options.outdir);
    // next, we invoke "onSynthesize" on all of our children. this will allow
    // stacks to add themselves to the synthesized cloud assembly.
    synthesizeTree(root, builder, options.validateOnSynthesis);
    const assembly = builder.buildAssembly();
    invokeValidationPlugins(root, builder.outdir, assembly);
    return assembly;
}
exports.synthesize = synthesize;
/**
 * Find all the assemblies in the app, including all levels of nested assemblies
 * and return a map where the assemblyId is the key
 */
function getAssemblies(root, rootAssembly) {
    const assemblies = new Map();
    assemblies.set(root.artifactId, rootAssembly);
    visitAssemblies(root, 'pre', construct => {
        const stage = construct;
        if (stage.parentStage && assemblies.has(stage.parentStage.artifactId)) {
            assemblies.set(stage.artifactId, assemblies.get(stage.parentStage.artifactId).getNestedAssembly(stage.artifactId));
        }
    });
    return assemblies;
}
/**
 * Invoke validation plugins for all stages in an App.
 */
function invokeValidationPlugins(root, outdir, assembly) {
    if (!app_1.App.isApp(root))
        return;
    const hash = computeChecksumOfFolder(outdir);
    const assemblies = getAssemblies(root, assembly);
    const templatePathsByPlugin = new Map();
    visitAssemblies(root, 'post', construct => {
        if (stage_1.Stage.isStage(construct)) {
            for (const plugin of construct.policyValidationBeta1) {
                if (!templatePathsByPlugin.has(plugin)) {
                    templatePathsByPlugin.set(plugin, []);
                }
                let assemblyToUse = assemblies.get(construct.artifactId);
                if (!assemblyToUse)
                    throw new Error(`Validation failed, cannot find cloud assembly for stage ${construct.stageName}`);
                templatePathsByPlugin.get(plugin).push(...assemblyToUse.stacksRecursively.map(stack => stack.templateFullPath));
            }
        }
    });
    const reports = [];
    if (templatePathsByPlugin.size > 0) {
        // eslint-disable-next-line no-console
        console.log('Performing Policy Validations\n');
    }
    for (const [plugin, paths] of templatePathsByPlugin.entries()) {
        try {
            const report = plugin.validate({ templatePaths: paths });
            reports.push({ ...report, pluginName: plugin.name });
        }
        catch (e) {
            reports.push({
                success: false,
                pluginName: plugin.name,
                pluginVersion: plugin.version,
                violations: [],
                metadata: {
                    error: `Validation plugin '${plugin.name}' failed: ${e.message}`,
                },
            });
        }
        if (computeChecksumOfFolder(outdir) !== hash) {
            throw new Error(`Illegal operation: validation plugin '${plugin.name}' modified the cloud assembly`);
        }
    }
    if (reports.length > 0) {
        const tree = new construct_tree_1.ConstructTree(root);
        const formatter = new report_1.PolicyValidationReportFormatter(tree);
        const formatJson = root.node.tryGetContext(VALIDATION_REPORT_JSON_CONTEXT) ?? false;
        const output = formatJson
            ? formatter.formatJson(reports)
            : formatter.formatPrettyPrinted(reports);
        const reportFile = path.join(assembly.directory, POLICY_VALIDATION_FILE_PATH);
        if (formatJson) {
            fs.writeFileSync(reportFile, JSON.stringify(output, undefined, 2));
        }
        else {
            // eslint-disable-next-line no-console
            console.error(output);
        }
        const failed = reports.some(r => !r.success);
        if (failed) {
            const message = formatJson
                ? `Validation failed. See the validation report in '${reportFile}' for details`
                : 'Validation failed. See the validation report above for details';
            // eslint-disable-next-line no-console
            console.log(message);
            process.exitCode = 1;
        }
        else {
            // eslint-disable-next-line no-console
            console.log('Policy Validation Successful!');
        }
    }
}
function computeChecksumOfFolder(folder) {
    const hash = (0, crypto_1.createHash)('sha256');
    const files = fs.readdirSync(folder, { withFileTypes: true });
    for (const file of files) {
        const fullPath = path.join(folder, file.name);
        if (file.isDirectory()) {
            hash.update(computeChecksumOfFolder(fullPath));
        }
        else if (file.isFile()) {
            hash.update(fs.readFileSync(fullPath));
        }
    }
    return hash.digest().toString('hex');
}
const CUSTOM_SYNTHESIS_SYM = Symbol.for('@aws-cdk/core:customSynthesis');
function addCustomSynthesis(construct, synthesis) {
    Object.defineProperty(construct, CUSTOM_SYNTHESIS_SYM, {
        value: synthesis,
        enumerable: false,
    });
}
exports.addCustomSynthesis = addCustomSynthesis;
function getCustomSynthesis(construct) {
    return construct[CUSTOM_SYNTHESIS_SYM];
}
/**
 * Find Assemblies inside the construct and call 'synth' on them
 *
 * (They will in turn recurse again)
 */
function synthNestedAssemblies(root, options) {
    for (const child of root.node.children) {
        if (stage_1.Stage.isStage(child)) {
            child.synth(options);
        }
        else {
            synthNestedAssemblies(child, options);
        }
    }
}
/**
 * Invoke aspects on the given construct tree.
 *
 * Aspects are not propagated across Assembly boundaries. The same Aspect will not be invoked
 * twice for the same construct.
 */
function invokeAspects(root) {
    const invokedByPath = {};
    let nestedAspectWarning = false;
    recurse(root, []);
    function recurse(construct, inheritedAspects) {
        const node = construct.node;
        const aspects = aspect_1.Aspects.of(construct);
        const allAspectsHere = [...inheritedAspects ?? [], ...aspects.all];
        const nodeAspectsCount = aspects.all.length;
        for (const aspect of allAspectsHere) {
            let invoked = invokedByPath[node.path];
            if (!invoked) {
                invoked = invokedByPath[node.path] = [];
            }
            if (invoked.includes(aspect)) {
                continue;
            }
            aspect.visit(construct);
            // if an aspect was added to the node while invoking another aspect it will not be invoked, emit a warning
            // the `nestedAspectWarning` flag is used to prevent the warning from being emitted for every child
            if (!nestedAspectWarning && nodeAspectsCount !== aspects.all.length) {
                annotations_1.Annotations.of(construct).addWarning('We detected an Aspect was added via another Aspect, and will not be applied');
                nestedAspectWarning = true;
            }
            // mark as invoked for this node
            invoked.push(aspect);
        }
        for (const child of construct.node.children) {
            if (!stage_1.Stage.isStage(child)) {
                recurse(child, allAspectsHere);
            }
        }
    }
}
/**
 * Find all stacks and add Metadata Resources to all of them
 *
 * There is no good generic place to do this. Can't do it in the constructor
 * (because adding a child construct makes it impossible to set context on the
 * node), and the generic prepare phase is deprecated.
 *
 * Only do this on [parent] stacks (not nested stacks), don't do this when
 * disabled by the user.
 *
 * Also, only when running via the CLI. If we do it unconditionally,
 * all unit tests everywhere are going to break massively. I've spent a day
 * fixing our own, but downstream users would be affected just as badly.
 *
 * Stop at Assembly boundaries.
 */
function injectMetadataResources(root) {
    visit(root, 'post', construct => {
        if (!stack_1.Stack.isStack(construct) || !construct._versionReportingEnabled) {
            return;
        }
        // Because of https://github.com/aws/aws-cdk/blob/main/packages/assert-internal/lib/synth-utils.ts#L74
        // synthesize() may be called more than once on a stack in unit tests, and the below would break
        // if we execute it a second time. Guard against the constructs already existing.
        const CDKMetadata = 'CDKMetadata';
        if (construct.node.tryFindChild(CDKMetadata)) {
            return;
        }
        new metadata_resource_1.MetadataResource(construct, CDKMetadata);
    });
}
/**
 * Find the root App and add the TreeMetadata resource (if enabled).
 *
 * There is no good generic place to do this. Can't do it in the constructor
 * (because adding a child construct makes it impossible to set context on the
 * node), and the generic prepare phase is deprecated.
 */
function injectTreeMetadata(root) {
    visit(root, 'post', construct => {
        if (!app_1.App.isApp(construct) || !construct._treeMetadata)
            return;
        const CDKTreeMetadata = 'Tree';
        if (construct.node.tryFindChild(CDKTreeMetadata))
            return;
        new tree_metadata_1.TreeMetadata(construct);
    });
}
/**
 * Synthesize children in post-order into the given builder
 *
 * Stop at Assembly boundaries.
 */
function synthesizeTree(root, builder, validateOnSynth = false) {
    visit(root, 'post', construct => {
        const session = {
            outdir: builder.outdir,
            assembly: builder,
            validateOnSynth,
        };
        if (stack_1.Stack.isStack(construct)) {
            construct.synthesizer.synthesize(session);
        }
        else if (construct instanceof tree_metadata_1.TreeMetadata) {
            construct._synthesizeTree(session);
        }
        else {
            const custom = getCustomSynthesis(construct);
            custom?.onSynthesize(session);
        }
    });
}
/**
 * Validate all constructs in the given construct tree
 */
function validateTree(root) {
    const errors = new Array();
    visit(root, 'pre', construct => {
        for (const message of construct.node.validate()) {
            errors.push({ message, source: construct });
        }
    });
    if (errors.length > 0) {
        const errorList = errors.map(e => `[${e.source.node.path}] ${e.message}`).join('\n  ');
        throw new Error(`Validation failed with the following errors:\n  ${errorList}`);
    }
}
/**
 * Visit the given construct tree in either pre or post order, only looking at Assemblies
 */
function visitAssemblies(root, order, cb) {
    if (order === 'pre') {
        cb(root);
    }
    for (const child of root.node.children) {
        if (!stage_1.Stage.isStage(child)) {
            continue;
        }
        visitAssemblies(child, order, cb);
    }
    if (order === 'post') {
        cb(root);
    }
}
/**
 * Visit the given construct tree in either pre or post order, stopping at Assemblies
 */
function visit(root, order, cb) {
    if (order === 'pre') {
        cb(root);
    }
    for (const child of root.node.children) {
        if (stage_1.Stage.isStage(child)) {
            continue;
        }
        visit(child, order, cb);
    }
    if (order === 'post') {
        cb(root);
    }
}
//# sourceMappingURL=data:application/json;base64,