"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeBuildSpecs = exports.BuildSpec = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const s3_assets = require("../../aws-s3-assets");
const core_1 = require("../../core");
const yaml_cfn = require("./private/yaml-cfn");
/**
 * BuildSpec for CodeBuild projects
 */
class BuildSpec {
    static fromObject(value) {
        return new ObjectBuildSpec(value);
    }
    /**
     * Create a buildspec from an object that will be rendered as YAML in the resulting CloudFormation template.
     *
     * @param value the object containing the buildspec that will be rendered as YAML
     */
    static fromObjectToYaml(value) {
        return new YamlBuildSpec(value);
    }
    /**
     * Use a file from the source as buildspec
     *
     * Use this if you want to use a file different from 'buildspec.yml'`
     */
    static fromSourceFilename(filename) {
        return new FilenameBuildSpec(filename);
    }
    /**
      * Use the contents of a local file as the build spec string
      *
      * Use this if you have a local .yml or .json file that you want to use as the buildspec
      */
    static fromAsset(path) {
        return new AssetBuildSpec(path);
    }
    constructor() {
    }
}
_a = JSII_RTTI_SYMBOL_1;
BuildSpec[_a] = { fqn: "aws-cdk-lib.aws_codebuild.BuildSpec", version: "2.75.1" };
exports.BuildSpec = BuildSpec;
/**
 * BuildSpec that just returns the contents of a local file
 */
class AssetBuildSpec extends BuildSpec {
    constructor(path, options = {}) {
        super();
        this.path = path;
        this.options = options;
        this.isImmediate = true;
    }
    toBuildSpec(scope) {
        if (!scope) {
            throw new Error('`AssetBuildSpec` requires a `scope` argument');
        }
        // If the same AssetCode is used multiple times, retain only the first instantiation.
        if (!this.asset) {
            this.asset = new s3_assets.Asset(scope, 'Code', {
                path: this.path,
                ...this.options,
            });
        }
        else if (core_1.Stack.of(this.asset) !== core_1.Stack.of(scope)) {
            throw new Error(`Asset is already associated with another stack '${core_1.Stack.of(this.asset).stackName}'. ` +
                'Create a new BuildSpec instance for every stack.');
        }
        this.asset.grantRead(scope);
        return this.asset.bucket.arnForObjects(this.asset.s3ObjectKey);
    }
    toString() {
        return `<buildspec file: ${this.path}>`;
    }
}
/**
 * BuildSpec that just returns the input unchanged
 */
class FilenameBuildSpec extends BuildSpec {
    constructor(filename) {
        super();
        this.filename = filename;
        this.isImmediate = false;
    }
    toBuildSpec() {
        return this.filename;
    }
    toString() {
        return `<buildspec file: ${this.filename}>`;
    }
}
/**
 * BuildSpec that understands about structure
 */
class ObjectBuildSpec extends BuildSpec {
    constructor(spec) {
        super();
        this.spec = spec;
        this.isImmediate = true;
    }
    toBuildSpec() {
        // We have to pretty-print the buildspec, otherwise
        // CodeBuild will not recognize it as an inline buildspec.
        return core_1.Lazy.uncachedString({
            produce: (ctx) => core_1.Stack.of(ctx.scope).toJsonString(this.spec, 2),
        });
    }
}
/**
 * BuildSpec that exports into YAML format
 */
class YamlBuildSpec extends BuildSpec {
    constructor(spec) {
        super();
        this.spec = spec;
        this.isImmediate = true;
    }
    toBuildSpec() {
        return yaml_cfn.serialize(this.spec);
    }
}
/**
 * Merge two buildspecs into a new BuildSpec by doing a deep merge
 *
 * We decided to disallow merging of artifact specs, which is
 * actually impossible since we can't merge two buildspecs with a
 * single primary output into a buildspec with multiple outputs.
 * In case of multiple outputs they must have identifiers but we won't have that information.
 *
 * In case of test reports we replace the whole object with the RHS (instead of recursively merging)
*/
function mergeBuildSpecs(lhs, rhs) {
    if (!(lhs instanceof ObjectBuildSpec) || !(rhs instanceof ObjectBuildSpec)) {
        throw new Error('Can only merge buildspecs created using BuildSpec.fromObject()');
    }
    if (lhs.spec.version === '0.1') {
        throw new Error('Cannot extend buildspec at version "0.1". Set the version to "0.2" or higher instead.');
    }
    if (lhs.spec.artifacts && rhs.spec.artifacts) {
        // We decided to disallow merging of artifact specs, which is
        // actually impossible since we can't merge two buildspecs with a
        // single primary output into a buildspec with multiple outputs.
        // In case of multiple outputs they must have identifiers but we won't have that information.
        throw new Error('Only one build spec is allowed to specify artifacts.');
    }
    const lhsSpec = JSON.parse(JSON.stringify(lhs.spec));
    const rhsSpec = JSON.parse(JSON.stringify(rhs.spec));
    normalizeSpec(lhsSpec);
    normalizeSpec(rhsSpec);
    const merged = mergeDeep(lhsSpec, rhsSpec);
    // In case of test reports we replace the whole object with the RHS (instead of recursively merging)
    if (lhsSpec.reports && rhsSpec.reports) {
        merged.reports = { ...lhsSpec.reports, ...rhsSpec.reports };
    }
    return new ObjectBuildSpec(merged);
}
exports.mergeBuildSpecs = mergeBuildSpecs;
/*
 * Normalizes the build spec
 * The CodeBuild runtime allows fields that are defined as string[] to be strings
 * and interprets them as singleton lists.
 * When merging we need to normalize this to have the correct concat semantics
 */
function normalizeSpec(spec) {
    if (spec.env && typeof spec.env['exported-variables'] === 'string') {
        spec.env['exported-variables'] = [spec.env['exported-variables']];
    }
    for (const key in spec.phases) {
        if (Object.prototype.hasOwnProperty.call(spec.phases, key)) {
            normalizeSpecPhase(spec.phases[key]);
        }
    }
    if (spec.reports) {
        for (const key in spec.reports) {
            if (Object.prototype.hasOwnProperty.call(spec.reports, key)) {
                const report = spec.reports[key];
                if (typeof report.files === 'string') {
                    report.files = [report.files];
                }
            }
        }
    }
    if (spec.artifacts) {
        if (typeof spec.artifacts.files === 'string') {
            spec.artifacts.files = [spec.artifacts.files];
        }
        for (const key in spec.artifacts['secondary-artifacts']) {
            if (Object.prototype.hasOwnProperty.call(spec.artifacts['secondary-artifacts'], key)) {
                const secArtifact = spec.artifacts['secondary-artifacts'][key];
                if (typeof secArtifact.files === 'string') {
                    secArtifact.files = [secArtifact.files];
                }
            }
        }
    }
    if (spec.cache && typeof spec.cache.paths === 'string') {
        spec.cache.paths = [spec.cache.paths];
    }
}
function normalizeSpecPhase(phase) {
    if (phase.commands && typeof phase.commands === 'string') {
        phase.commands = [phase.commands];
    }
    if (phase.finally && typeof phase.finally === 'string') {
        phase.finally = [phase.finally];
    }
}
function mergeDeep(lhs, rhs) {
    if (Array.isArray(lhs) && Array.isArray(rhs)) {
        return [...lhs, ...rhs];
    }
    if (Array.isArray(lhs) || Array.isArray(rhs)) {
        return rhs;
    }
    const isObject = (obj) => obj && typeof obj === 'object';
    if (isObject(lhs) && isObject(rhs)) {
        const ret = { ...lhs };
        for (const k of Object.keys(rhs)) {
            ret[k] = k in lhs ? mergeDeep(lhs[k], rhs[k]) : rhs[k];
        }
        return ret;
    }
    return rhs;
}
;
//# sourceMappingURL=data:application/json;base64,