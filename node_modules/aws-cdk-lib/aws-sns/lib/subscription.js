"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = exports.Filter = exports.FilterOrPolicy = exports.FilterOrPolicyType = exports.SubscriptionProtocol = exports.Subscription = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_iam_1 = require("../../aws-iam");
const core_1 = require("../../core");
const sns_generated_1 = require("./sns.generated");
/**
 * A new subscription.
 *
 * Prefer to use the `ITopic.addSubscription()` methods to create instances of
 * this class.
 */
class Subscription extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_sns_SubscriptionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Subscription);
            }
            throw error;
        }
        if (props.rawMessageDelivery &&
            [
                SubscriptionProtocol.HTTP,
                SubscriptionProtocol.HTTPS,
                SubscriptionProtocol.SQS,
                SubscriptionProtocol.FIREHOSE,
            ]
                .indexOf(props.protocol) < 0) {
            throw new Error('Raw message delivery can only be enabled for HTTP, HTTPS, SQS, and Firehose subscriptions.');
        }
        if (props.filterPolicy) {
            if (Object.keys(props.filterPolicy).length > 5) {
                throw new Error('A filter policy can have a maximum of 5 attribute names.');
            }
            this.filterPolicy = Object.entries(props.filterPolicy)
                .reduce((acc, [k, v]) => ({ ...acc, [k]: v.conditions }), {});
            let total = 1;
            Object.values(this.filterPolicy).forEach(filter => { total *= filter.length; });
            if (total > 150) {
                throw new Error(`The total combination of values (${total}) must not exceed 150.`);
            }
        }
        else if (props.filterPolicyWithMessageBody) {
            if (Object.keys(props.filterPolicyWithMessageBody).length > 5) {
                throw new Error('A filter policy can have a maximum of 5 attribute names.');
            }
            this.filterPolicyWithMessageBody = props.filterPolicyWithMessageBody;
        }
        if (props.protocol === SubscriptionProtocol.FIREHOSE && !props.subscriptionRoleArn) {
            throw new Error('Subscription role arn is required field for subscriptions with a firehose protocol.');
        }
        // Format filter policy
        const filterPolicy = this.filterPolicyWithMessageBody
            ? buildFilterPolicyWithMessageBody(this.filterPolicyWithMessageBody)
            : this.filterPolicy;
        this.deadLetterQueue = this.buildDeadLetterQueue(props);
        new sns_generated_1.CfnSubscription(this, 'Resource', {
            endpoint: props.endpoint,
            protocol: props.protocol,
            topicArn: props.topic.topicArn,
            rawMessageDelivery: props.rawMessageDelivery,
            filterPolicy,
            filterPolicyScope: this.filterPolicyWithMessageBody ? 'MessageBody' : undefined,
            region: props.region,
            redrivePolicy: this.buildDeadLetterConfig(this.deadLetterQueue),
            subscriptionRoleArn: props.subscriptionRoleArn,
        });
    }
    buildDeadLetterQueue(props) {
        if (!props.deadLetterQueue) {
            return undefined;
        }
        const deadLetterQueue = props.deadLetterQueue;
        deadLetterQueue.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            resources: [deadLetterQueue.queueArn],
            actions: ['sqs:SendMessage'],
            principals: [new aws_iam_1.ServicePrincipal('sns.amazonaws.com')],
            conditions: {
                ArnEquals: { 'aws:SourceArn': props.topic.topicArn },
            },
        }));
        return deadLetterQueue;
    }
    buildDeadLetterConfig(deadLetterQueue) {
        if (deadLetterQueue) {
            return {
                deadLetterTargetArn: deadLetterQueue.queueArn,
            };
        }
        else {
            return undefined;
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
Subscription[_a] = { fqn: "aws-cdk-lib.aws_sns.Subscription", version: "2.75.1" };
exports.Subscription = Subscription;
/**
 * The type of subscription, controlling the type of the endpoint parameter.
 */
var SubscriptionProtocol;
(function (SubscriptionProtocol) {
    /**
     * JSON-encoded message is POSTED to an HTTP url.
     */
    SubscriptionProtocol["HTTP"] = "http";
    /**
     * JSON-encoded message is POSTed to an HTTPS url.
     */
    SubscriptionProtocol["HTTPS"] = "https";
    /**
     * Notifications are sent via email.
     */
    SubscriptionProtocol["EMAIL"] = "email";
    /**
     * Notifications are JSON-encoded and sent via mail.
     */
    SubscriptionProtocol["EMAIL_JSON"] = "email-json";
    /**
     * Notification is delivered by SMS
     */
    SubscriptionProtocol["SMS"] = "sms";
    /**
     * Notifications are enqueued into an SQS queue.
     */
    SubscriptionProtocol["SQS"] = "sqs";
    /**
     * JSON-encoded notifications are sent to a mobile app endpoint.
     */
    SubscriptionProtocol["APPLICATION"] = "application";
    /**
     * Notifications trigger a Lambda function.
     */
    SubscriptionProtocol["LAMBDA"] = "lambda";
    /**
     * Notifications put records into a firehose delivery stream.
     */
    SubscriptionProtocol["FIREHOSE"] = "firehose";
})(SubscriptionProtocol = exports.SubscriptionProtocol || (exports.SubscriptionProtocol = {}));
function buildFilterPolicyWithMessageBody(inputObject, depth = 1, totalCombinationValues = [1]) {
    const result = {};
    for (const [key, filterOrPolicy] of Object.entries(inputObject)) {
        if (filterOrPolicy.isPolicy()) {
            result[key] = buildFilterPolicyWithMessageBody(filterOrPolicy.policyDoc, depth + 1, totalCombinationValues);
        }
        else if (filterOrPolicy.isFilter()) {
            const filter = filterOrPolicy.filterDoc.conditions;
            result[key] = filter;
            totalCombinationValues[0] *= filter.length * depth;
        }
    }
    // https://docs.aws.amazon.com/sns/latest/dg/subscription-filter-policy-constraints.html
    if (totalCombinationValues[0] > 150) {
        throw new Error(`The total combination of values (${totalCombinationValues}) must not exceed 150.`);
    }
    return result;
}
;
/**
 * The type of the MessageBody at a given key value pair
 */
var FilterOrPolicyType;
(function (FilterOrPolicyType) {
    /**
     * The filter of the MessageBody
     */
    FilterOrPolicyType[FilterOrPolicyType["FILTER"] = 0] = "FILTER";
    /**
     * A nested key of the MessageBody
     */
    FilterOrPolicyType[FilterOrPolicyType["POLICY"] = 1] = "POLICY";
})(FilterOrPolicyType = exports.FilterOrPolicyType || (exports.FilterOrPolicyType = {}));
/**
 * Class for building the FilterPolicy by avoiding union types
 */
class FilterOrPolicy {
    /**
     * Filter of MessageBody
     * @param filter
     * @returns
     */
    static filter(filter) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_sns_SubscriptionFilter(filter);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.filter);
            }
            throw error;
        }
        return new Filter(filter);
    }
    /**
     * Policy of MessageBody
     * @param policy
     * @returns
     */
    static policy(policy) {
        return new Policy(policy);
    }
    /**
     * Check if instance is `Policy` type
     */
    isPolicy() {
        return this.type === FilterOrPolicyType.POLICY;
    }
    /**
     * Check if instance is `Filter` type
     */
    isFilter() {
        return this.type === FilterOrPolicyType.FILTER;
    }
}
_b = JSII_RTTI_SYMBOL_1;
FilterOrPolicy[_b] = { fqn: "aws-cdk-lib.aws_sns.FilterOrPolicy", version: "2.75.1" };
exports.FilterOrPolicy = FilterOrPolicy;
/**
 * Filter implementation of FilterOrPolicy
 */
class Filter extends FilterOrPolicy {
    /**
     * Policy constructor
     * @param filterDoc filter argument to construct
     */
    constructor(filterDoc) {
        super();
        this.filterDoc = filterDoc;
        /**
         * Type used in DFS buildFilterPolicyWithMessageBody to determine json value type
         */
        this.type = FilterOrPolicyType.FILTER;
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_sns_SubscriptionFilter(filterDoc);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Filter);
            }
            throw error;
        }
    }
}
_c = JSII_RTTI_SYMBOL_1;
Filter[_c] = { fqn: "aws-cdk-lib.aws_sns.Filter", version: "2.75.1" };
exports.Filter = Filter;
/**
 * Policy Implementation of FilterOrPolicy
 */
class Policy extends FilterOrPolicy {
    /**
     * Policy constructor
     * @param policyDoc policy argument to construct
     */
    constructor(policyDoc) {
        super();
        this.policyDoc = policyDoc;
        /**
         * Type used in DFS buildFilterPolicyWithMessageBody to determine json value type
         */
        this.type = FilterOrPolicyType.POLICY;
    }
}
_d = JSII_RTTI_SYMBOL_1;
Policy[_d] = { fqn: "aws-cdk-lib.aws_sns.Policy", version: "2.75.1" };
exports.Policy = Policy;
//# sourceMappingURL=data:application/json;base64,