"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudWatchLogGroup = exports.LogGroupTargetInput = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_events_1 = require("../../aws-events");
const iam = require("../../aws-iam");
const cdk = require("../../core");
const core_1 = require("../../core");
const log_group_resource_policy_1 = require("./log-group-resource-policy");
const util_1 = require("./util");
/**
 * The input to send to the CloudWatch LogGroup target
 */
class LogGroupTargetInput {
    /**
     * Pass a JSON object to the the log group event target
     *
     * May contain strings returned by `EventField.from()` to substitute in parts of the
     * matched event.
     */
    static fromObject(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_events_targets_LogGroupTargetInputOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromObject);
            }
            throw error;
        }
        return aws_events_1.RuleTargetInput.fromObject({
            timestamp: options?.timestamp ?? aws_events_1.EventField.time,
            message: options?.message ?? aws_events_1.EventField.detailType,
        });
    }
    ;
}
_a = JSII_RTTI_SYMBOL_1;
LogGroupTargetInput[_a] = { fqn: "aws-cdk-lib.aws_events_targets.LogGroupTargetInput", version: "2.75.1" };
exports.LogGroupTargetInput = LogGroupTargetInput;
/**
 * Use an AWS CloudWatch LogGroup as an event rule target.
 */
class CloudWatchLogGroup {
    constructor(logGroup, props = {}) {
        this.logGroup = logGroup;
        this.props = props;
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_logs_ILogGroup(logGroup);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_events_targets_LogGroupProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CloudWatchLogGroup);
            }
            throw error;
        }
    }
    /**
     * Returns a RuleTarget that can be used to log an event into a CloudWatch LogGroup
     */
    bind(_rule, _id) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_events_IRule(_rule);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        // Use a custom resource to set the log group resource policy since it is not supported by CDK and cfn.
        const resourcePolicyId = `EventsLogGroupPolicy${cdk.Names.nodeUniqueId(_rule.node)}`;
        const logGroupStack = cdk.Stack.of(this.logGroup);
        if (this.props.event && this.props.logEvent) {
            throw new Error('Only one of "event" or "logEvent" can be specified');
        }
        this.target = this.props.event?.bind(_rule);
        if (this.target?.inputPath || this.target?.input) {
            throw new Error('CloudWatchLogGroup targets does not support input or inputPath');
        }
        _rule.node.addValidation({ validate: () => this.validateInputTemplate() });
        if (!this.logGroup.node.tryFindChild(resourcePolicyId)) {
            new log_group_resource_policy_1.LogGroupResourcePolicy(logGroupStack, resourcePolicyId, {
                policyStatements: [new iam.PolicyStatement({
                        effect: iam.Effect.ALLOW,
                        actions: ['logs:PutLogEvents', 'logs:CreateLogStream'],
                        resources: [this.logGroup.logGroupArn],
                        principals: [new iam.ServicePrincipal('events.amazonaws.com')],
                    })],
            });
        }
        return {
            ...(0, util_1.bindBaseTargetConfig)(this.props),
            arn: logGroupStack.formatArn({
                service: 'logs',
                resource: 'log-group',
                arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
                resourceName: this.logGroup.logGroupName,
            }),
            input: this.props.event ?? this.props.logEvent,
            targetResource: this.logGroup,
        };
    }
    /**
     * Validate that the target event input template has the correct format.
     * The CloudWatchLogs target only supports a template with the format of:
     *   {"timestamp": <time>, "message": <message>}
     *
     * This is only needed if the deprecated `event` property is used.
     *
     * @see https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutTargets.html
     */
    validateInputTemplate() {
        if (this.target?.inputTemplate) {
            const resolvedTemplate = core_1.Stack.of(this.logGroup).resolve(this.target.inputTemplate);
            if (typeof (resolvedTemplate) === 'string') {
                // need to add the quotes back to the string so that we can parse the json
                // '{"timestamp": <time>}' -> '{"timestamp": "<time>"}'
                const quotedTemplate = resolvedTemplate.replace(new RegExp('(\<.*?\>)', 'g'), '"$1"');
                try {
                    const inputTemplate = JSON.parse(quotedTemplate);
                    const inputTemplateKeys = Object.keys(inputTemplate);
                    if (inputTemplateKeys.length !== 2 ||
                        (!inputTemplateKeys.includes('timestamp') || !inputTemplateKeys.includes('message'))) {
                        return ['CloudWatchLogGroup targets only support input templates in the format {timestamp: <timestamp>, message: <message>}'];
                    }
                }
                catch (e) {
                    return ['Could not parse input template as JSON.\n' +
                            'CloudWatchLogGroup targets only support input templates in the format {timestamp: <timestamp>, message: <message>}', e];
                }
            }
        }
        return [];
    }
}
_b = JSII_RTTI_SYMBOL_1;
CloudWatchLogGroup[_b] = { fqn: "aws-cdk-lib.aws_events_targets.CloudWatchLogGroup", version: "2.75.1" };
exports.CloudWatchLogGroup = CloudWatchLogGroup;
//# sourceMappingURL=data:application/json;base64,