"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpAddresses = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const cidr_splits_1 = require("./cidr-splits");
const network_util_1 = require("./network-util");
/**
 * An abstract Provider of IpAddresses
 */
class IpAddresses {
    /**
     * Used to provide local Ip Address Management services for your VPC
     *
     * VPC Cidr is supplied at creation and subnets are calculated locally
     *
     */
    static cidr(cidrBlock) {
        return new Cidr(cidrBlock);
    }
    /**
     * Used to provide centralized Ip Address Management services for your VPC
     *
     * Uses VPC Cidr allocations from AWS IPAM
     *
     * @see https://docs.aws.amazon.com/vpc/latest/ipam/what-it-is-ipam.html
     */
    static awsIpamAllocation(props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AwsIpamProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.awsIpamAllocation);
            }
            throw error;
        }
        return new AwsIpam(props);
    }
    constructor() { }
}
_a = JSII_RTTI_SYMBOL_1;
IpAddresses[_a] = { fqn: "aws-cdk-lib.aws_ec2.IpAddresses", version: "2.75.1" };
exports.IpAddresses = IpAddresses;
/**
 * Implements integration with Amazon VPC IP Address Manager (IPAM).
 *
 * See the package-level documentation of this package for an overview
 * of the various dimensions in which you can configure your VPC.
 *
 * For example:
 *
 * ```ts
 *  new ec2.Vpc(stack, 'TheVPC', {
 *   ipAddresses: IpAddresses.awsIpamAllocation({
 *     ipv4IpamPoolId: pool.ref,
 *     ipv4NetmaskLength: 18,
 *     defaultSubnetIpv4NetmaskLength: 24
 *   })
 * });
 * ```
 *
 */
class AwsIpam {
    constructor(props) {
        this.props = props;
    }
    /**
     * Allocates Vpc Cidr. called when creating a Vpc using AwsIpam.
     */
    allocateVpcCidr() {
        return {
            ipv4NetmaskLength: this.props.ipv4NetmaskLength,
            ipv4IpamPoolId: this.props.ipv4IpamPoolId,
        };
    }
    /**
     * Allocates Subnets Cidrs. Called by VPC when creating subnets.
     */
    allocateSubnetsCidr(input) {
        const cidrSplit = (0, cidr_splits_1.calculateCidrSplits)(this.props.ipv4NetmaskLength, input.requestedSubnets.map((mask => {
            if ((mask.configuration.cidrMask === undefined) && (this.props.defaultSubnetIpv4NetmaskLength === undefined)) {
                throw new Error('If you have not set a cidr for all subnets in this case you must set a defaultCidrMask in AwsIpam Options');
            }
            const cidrMask = mask.configuration.cidrMask ?? this.props.defaultSubnetIpv4NetmaskLength;
            if (cidrMask === undefined) {
                throw new Error('Should not have happened, but satisfies the type checker');
            }
            return cidrMask;
        })));
        const allocatedSubnets = cidrSplit.map(subnet => {
            return {
                cidr: core_1.Fn.select(subnet.index, core_1.Fn.cidr(input.vpcCidr, subnet.count, `${32 - subnet.netmask}`)),
            };
        });
        return {
            allocatedSubnets: allocatedSubnets,
        };
    }
}
/**
 * Implements static Ip assignment locally.
 *
 * See the package-level documentation of this package for an overview
 * of the various dimensions in which you can configure your VPC.
 *
 * For example:
 *
 * ```ts
 *  new ec2.Vpc(stack, 'TheVPC', {
 *   ipAddresses: ec2.IpAddresses.cidr('10.0.1.0/20')
 * });
 * ```
 *
 */
class Cidr {
    constructor(cidrBlock) {
        this.cidrBlock = cidrBlock;
        if (core_1.Token.isUnresolved(cidrBlock)) {
            throw new Error('\'cidr\' property must be a concrete CIDR string, got a Token (we need to parse it for automatic subdivision)');
        }
        this.networkBuilder = new network_util_1.NetworkBuilder(this.cidrBlock);
    }
    /**
     * Allocates Vpc Cidr. called when creating a Vpc using IpAddresses.cidr.
     */
    allocateVpcCidr() {
        return {
            cidrBlock: this.networkBuilder.networkCidr.cidr,
        };
    }
    /**
     * Allocates Subnets Cidrs. Called by VPC when creating subnets.
     */
    allocateSubnetsCidr(input) {
        const allocatedSubnets = [];
        const subnetsWithoutDefinedCidr = [];
        //default: Available IP space is evenly divided across subnets if no cidr is given.
        input.requestedSubnets.forEach((requestedSubnet, index) => {
            if (requestedSubnet.configuration.cidrMask === undefined) {
                subnetsWithoutDefinedCidr.push({
                    index,
                    requestedSubnet,
                });
            }
            else {
                allocatedSubnets.push({
                    cidr: this.networkBuilder.addSubnet(requestedSubnet.configuration.cidrMask),
                });
            }
        });
        const cidrMaskForRemaining = this.networkBuilder.maskForRemainingSubnets(subnetsWithoutDefinedCidr.length);
        subnetsWithoutDefinedCidr.forEach((subnet) => {
            allocatedSubnets.splice(subnet.index, 0, {
                cidr: this.networkBuilder.addSubnet(cidrMaskForRemaining),
            });
        });
        return {
            allocatedSubnets: allocatedSubnets,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,