"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Port = exports.Protocol = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
/**
 * Protocol for use in Connection Rules
 *
 * https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
 */
var Protocol;
(function (Protocol) {
    Protocol["ALL"] = "-1";
    Protocol["HOPOPT"] = "0";
    Protocol["ICMP"] = "icmp";
    Protocol["IGMP"] = "2";
    Protocol["GGP"] = "3";
    Protocol["IPV4"] = "4";
    Protocol["ST"] = "5";
    Protocol["TCP"] = "tcp";
    Protocol["CBT"] = "7";
    Protocol["EGP"] = "8";
    Protocol["IGP"] = "9";
    Protocol["BBN_RCC_MON"] = "10";
    Protocol["NVP_II"] = "11";
    Protocol["PUP"] = "12";
    Protocol["EMCON"] = "14";
    Protocol["XNET"] = "15";
    Protocol["CHAOS"] = "16";
    Protocol["UDP"] = "udp";
    Protocol["MUX"] = "18";
    Protocol["DCN_MEAS"] = "19";
    Protocol["HMP"] = "20";
    Protocol["PRM"] = "21";
    Protocol["XNS_IDP"] = "22";
    Protocol["TRUNK_1"] = "23";
    Protocol["TRUNK_2"] = "24";
    Protocol["LEAF_1"] = "25";
    Protocol["LEAF_2"] = "26";
    Protocol["RDP"] = "27";
    Protocol["IRTP"] = "28";
    Protocol["ISO_TP4"] = "29";
    Protocol["NETBLT"] = "30";
    Protocol["MFE_NSP"] = "31";
    Protocol["MERIT_INP"] = "32";
    Protocol["DCCP"] = "33";
    Protocol["THREEPC"] = "34";
    Protocol["IDPR"] = "35";
    Protocol["XTP"] = "36";
    Protocol["DDP"] = "37";
    Protocol["IDPR_CMTP"] = "38";
    Protocol["TPPLUSPLUS"] = "39";
    Protocol["IL"] = "40";
    Protocol["IPV6"] = "41";
    Protocol["SDRP"] = "42";
    Protocol["IPV6_ROUTE"] = "43";
    Protocol["IPV6_FRAG"] = "44";
    Protocol["IDRP"] = "45";
    Protocol["RSVP"] = "46";
    Protocol["GRE"] = "47";
    Protocol["DSR"] = "48";
    Protocol["BNA"] = "49";
    Protocol["ESP"] = "50";
    Protocol["AH"] = "51";
    Protocol["I_NLSP"] = "52";
    Protocol["SWIPE"] = "53";
    Protocol["NARP"] = "54";
    Protocol["MOBILE"] = "55";
    Protocol["TLSP"] = "56";
    Protocol["SKIP"] = "57";
    Protocol["ICMPV6"] = "icmpv6";
    Protocol["IPV6_NONXT"] = "59";
    Protocol["IPV6_OPTS"] = "60";
    Protocol["CFTP"] = "62";
    Protocol["ANY_LOCAL"] = "63";
    Protocol["SAT_EXPAK"] = "64";
    Protocol["KRYPTOLAN"] = "65";
    Protocol["RVD"] = "66";
    Protocol["IPPC"] = "67";
    Protocol["ANY_DFS"] = "68";
    Protocol["SAT_MON"] = "69";
    Protocol["VISA"] = "70";
    Protocol["IPCV"] = "71";
    Protocol["CPNX"] = "72";
    Protocol["CPHB"] = "73";
    Protocol["WSN"] = "74";
    Protocol["PVP"] = "75";
    Protocol["BR_SAT_MON"] = "76";
    Protocol["SUN_ND"] = "77";
    Protocol["WB_MON"] = "78";
    Protocol["WB_EXPAK"] = "79";
    Protocol["ISO_IP"] = "80";
    Protocol["VMTP"] = "81";
    Protocol["SECURE_VMTP"] = "82";
    Protocol["VINES"] = "83";
    Protocol["TTP"] = "84";
    Protocol["IPTM"] = "84_";
    Protocol["NSFNET_IGP"] = "85";
    Protocol["DGP"] = "86";
    Protocol["TCF"] = "87";
    Protocol["EIGRP"] = "88";
    Protocol["OSPFIGP"] = "89";
    Protocol["SPRITE_RPC"] = "90";
    Protocol["LARP"] = "91";
    Protocol["MTP"] = "92";
    Protocol["AX_25"] = "93";
    Protocol["IPIP"] = "94";
    Protocol["MICP"] = "95";
    Protocol["SCC_SP"] = "96";
    Protocol["ETHERIP"] = "97";
    Protocol["ENCAP"] = "98";
    Protocol["ANY_ENC"] = "99";
    Protocol["GMTP"] = "100";
    Protocol["IFMP"] = "101";
    Protocol["PNNI"] = "102";
    Protocol["PIM"] = "103";
    Protocol["ARIS"] = "104";
    Protocol["SCPS"] = "105";
    Protocol["QNX"] = "106";
    Protocol["A_N"] = "107";
    Protocol["IPCOMP"] = "108";
    Protocol["SNP"] = "109";
    Protocol["COMPAQ_PEER"] = "110";
    Protocol["IPX_IN_IP"] = "111";
    Protocol["VRRP"] = "112";
    Protocol["PGM"] = "113";
    Protocol["ANY_0_HOP"] = "114";
    Protocol["L2_T_P"] = "115";
    Protocol["DDX"] = "116";
    Protocol["IATP"] = "117";
    Protocol["STP"] = "118";
    Protocol["SRP"] = "119";
    Protocol["UTI"] = "120";
    Protocol["SMP"] = "121";
    Protocol["SM"] = "122";
    Protocol["PTP"] = "123";
    Protocol["ISIS_IPV4"] = "124";
    Protocol["FIRE"] = "125";
    Protocol["CRTP"] = "126";
    Protocol["CRUDP"] = "127";
    Protocol["SSCOPMCE"] = "128";
    Protocol["IPLT"] = "129";
    Protocol["SPS"] = "130";
    Protocol["PIPE"] = "131";
    Protocol["SCTP"] = "132";
    Protocol["FC"] = "133";
    Protocol["RSVP_E2E_IGNORE"] = "134";
    Protocol["MOBILITY_HEADER"] = "135";
    Protocol["UDPLITE"] = "136";
    Protocol["MPLS_IN_IP"] = "137";
    Protocol["MANET"] = "138";
    Protocol["HIP"] = "139";
    Protocol["SHIM6"] = "140";
    Protocol["WESP"] = "141";
    Protocol["ROHC"] = "142";
    Protocol["ETHERNET"] = "143";
    Protocol["EXPERIMENT_1"] = "253";
    Protocol["EXPERIMENT_2"] = "254";
    Protocol["RESERVED"] = "255";
})(Protocol = exports.Protocol || (exports.Protocol = {}));
/**
 * Interface for classes that provide the connection-specification parts of a security group rule
 */
class Port {
    /**
     * A single TCP port
     */
    static tcp(port) {
        return new Port({
            protocol: Protocol.TCP,
            fromPort: port,
            toPort: port,
            stringRepresentation: renderPort(port),
        });
    }
    /**
     * A TCP port range
     */
    static tcpRange(startPort, endPort) {
        return new Port({
            protocol: Protocol.TCP,
            fromPort: startPort,
            toPort: endPort,
            stringRepresentation: `${renderPort(startPort)}-${renderPort(endPort)}`,
        });
    }
    /**
     * Any TCP traffic
     */
    static allTcp() {
        return new Port({
            protocol: Protocol.TCP,
            fromPort: 0,
            toPort: 65535,
            stringRepresentation: 'ALL PORTS',
        });
    }
    /**
     * A single UDP port
     */
    static udp(port) {
        return new Port({
            protocol: Protocol.UDP,
            fromPort: port,
            toPort: port,
            stringRepresentation: `UDP ${renderPort(port)}`,
        });
    }
    /**
     * A UDP port range
     */
    static udpRange(startPort, endPort) {
        return new Port({
            protocol: Protocol.UDP,
            fromPort: startPort,
            toPort: endPort,
            stringRepresentation: `UDP ${renderPort(startPort)}-${renderPort(endPort)}`,
        });
    }
    /**
     * Any UDP traffic
     */
    static allUdp() {
        return new Port({
            protocol: Protocol.UDP,
            fromPort: 0,
            toPort: 65535,
            stringRepresentation: 'UDP ALL PORTS',
        });
    }
    /**
     * A specific combination of ICMP type and code
     *
     * @see https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
     */
    static icmpTypeAndCode(type, code) {
        return new Port({
            protocol: Protocol.ICMP,
            fromPort: type,
            toPort: code,
            stringRepresentation: `ICMP Type ${type} Code ${code}`,
        });
    }
    /**
     * All codes for a single ICMP type
     */
    static icmpType(type) {
        return new Port({
            protocol: Protocol.ICMP,
            fromPort: type,
            toPort: -1,
            stringRepresentation: `ICMP Type ${type}`,
        });
    }
    /**
     * ICMP ping (echo) traffic
     */
    static icmpPing() {
        return Port.icmpType(8);
    }
    /**
     * All ICMP traffic
     */
    static allIcmp() {
        return new Port({
            protocol: Protocol.ICMP,
            fromPort: -1,
            toPort: -1,
            stringRepresentation: 'ALL ICMP',
        });
    }
    /**
     * All ICMPv6 traffic
     */
    static allIcmpV6() {
        return new Port({
            protocol: Protocol.ICMPV6,
            fromPort: -1,
            toPort: -1,
            stringRepresentation: 'ALL ICMPv6',
        });
    }
    /**
     * All traffic
     */
    static allTraffic() {
        return new Port({
            protocol: Protocol.ALL,
            stringRepresentation: 'ALL TRAFFIC',
        });
    }
    /**
     * A single ESP port
     */
    static esp() {
        return new Port({
            protocol: Protocol.ESP,
            fromPort: 50,
            toPort: 50,
            stringRepresentation: 'ESP 50',
        });
    }
    /**
     * A single AH port
     */
    static ah() {
        return new Port({
            protocol: Protocol.AH,
            fromPort: 51,
            toPort: 51,
            stringRepresentation: 'AH 51',
        });
    }
    constructor(props) {
        this.props = props;
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_PortProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Port);
            }
            throw error;
        }
        this.canInlineRule =
            !core_1.Token.isUnresolved(props.fromPort) && !core_1.Token.isUnresolved(props.toPort);
    }
    /**
     * Produce the ingress/egress rule JSON for the given connection
     */
    toRuleJson() {
        // JSII does not allow enum types to have same value. So to support the enum, the enum with same value has to be mapped later.
        const PROTOCOL_MAP = {
            [Protocol.IPTM]: '84',
        };
        return {
            ipProtocol: PROTOCOL_MAP[this.props.protocol] ?? this.props.protocol,
            fromPort: this.props.fromPort,
            toPort: this.props.toPort,
        };
    }
    toString() {
        return this.props.stringRepresentation;
    }
}
_a = JSII_RTTI_SYMBOL_1;
Port[_a] = { fqn: "aws-cdk-lib.aws_ec2.Port", version: "2.75.1" };
exports.Port = Port;
function renderPort(port) {
    return core_1.Token.isUnresolved(port) ? '{IndirectPort}' : port.toString();
}
//# sourceMappingURL=data:application/json;base64,