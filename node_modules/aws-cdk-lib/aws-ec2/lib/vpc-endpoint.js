"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceVpcEndpoint = exports.InterfaceVpcEndpointAwsService = exports.InterfaceVpcEndpointService = exports.GatewayVpcEndpoint = exports.GatewayVpcEndpointAwsService = exports.VpcEndpointType = exports.VpcEndpoint = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../aws-iam");
const cxschema = require("../../cloud-assembly-schema");
const core_1 = require("../../core");
const connections_1 = require("./connections");
const ec2_generated_1 = require("./ec2.generated");
const peer_1 = require("./peer");
const port_1 = require("./port");
const security_group_1 = require("./security-group");
const util_1 = require("./util");
class VpcEndpoint extends core_1.Resource {
    /**
     * Adds a statement to the policy document of the VPC endpoint. The statement
     * must have a Principal.
     *
     * Not all interface VPC endpoints support policy. For more information
     * see https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html
     *
     * @param statement the IAM statement to add
     */
    addToPolicy(statement) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_PolicyStatement(statement);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addToPolicy);
            }
            throw error;
        }
        if (!statement.hasPrincipal) {
            throw new Error('Statement must have a `Principal`.');
        }
        if (!this.policyDocument) {
            this.policyDocument = new iam.PolicyDocument();
        }
        this.policyDocument.addStatements(statement);
    }
}
_a = JSII_RTTI_SYMBOL_1;
VpcEndpoint[_a] = { fqn: "aws-cdk-lib.aws_ec2.VpcEndpoint", version: "2.75.1" };
exports.VpcEndpoint = VpcEndpoint;
/**
 * The type of VPC endpoint.
 */
var VpcEndpointType;
(function (VpcEndpointType) {
    /**
     * Interface
     *
     * An interface endpoint is an elastic network interface with a private IP
     * address that serves as an entry point for traffic destined to a supported
     * service.
     */
    VpcEndpointType["INTERFACE"] = "Interface";
    /**
     * Gateway
     *
     * A gateway endpoint is a gateway that is a target for a specified route in
     * your route table, used for traffic destined to a supported AWS service.
     */
    VpcEndpointType["GATEWAY"] = "Gateway";
})(VpcEndpointType = exports.VpcEndpointType || (exports.VpcEndpointType = {}));
/**
 * An AWS service for a gateway VPC endpoint.
 */
class GatewayVpcEndpointAwsService {
    constructor(name, prefix) {
        this.name = `${prefix || 'com.amazonaws'}.${core_1.Aws.REGION}.${name}`;
    }
}
_b = JSII_RTTI_SYMBOL_1;
GatewayVpcEndpointAwsService[_b] = { fqn: "aws-cdk-lib.aws_ec2.GatewayVpcEndpointAwsService", version: "2.75.1" };
GatewayVpcEndpointAwsService.DYNAMODB = new GatewayVpcEndpointAwsService('dynamodb');
GatewayVpcEndpointAwsService.S3 = new GatewayVpcEndpointAwsService('s3');
exports.GatewayVpcEndpointAwsService = GatewayVpcEndpointAwsService;
/**
 * A gateway VPC endpoint.
 * @resource AWS::EC2::VPCEndpoint
 */
class GatewayVpcEndpoint extends VpcEndpoint {
    static fromGatewayVpcEndpointId(scope, id, gatewayVpcEndpointId) {
        class Import extends VpcEndpoint {
            constructor() {
                super(...arguments);
                this.vpcEndpointId = gatewayVpcEndpointId;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_GatewayVpcEndpointProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, GatewayVpcEndpoint);
            }
            throw error;
        }
        const subnets = props.subnets
            ? (0, util_1.flatten)(props.subnets.map(s => props.vpc.selectSubnets(s).subnets))
            : [...props.vpc.privateSubnets, ...props.vpc.publicSubnets, ...props.vpc.isolatedSubnets];
        const routeTableIds = (0, util_1.allRouteTableIds)(subnets);
        if (routeTableIds.length === 0) {
            throw new Error('Can\'t add a gateway endpoint to VPC; route table IDs are not available');
        }
        const endpoint = new ec2_generated_1.CfnVPCEndpoint(this, 'Resource', {
            policyDocument: core_1.Lazy.any({ produce: () => this.policyDocument }),
            routeTableIds,
            serviceName: props.service.name,
            vpcEndpointType: VpcEndpointType.GATEWAY,
            vpcId: props.vpc.vpcId,
        });
        this.vpcEndpointId = endpoint.ref;
        this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;
        this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;
        this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;
    }
}
_c = JSII_RTTI_SYMBOL_1;
GatewayVpcEndpoint[_c] = { fqn: "aws-cdk-lib.aws_ec2.GatewayVpcEndpoint", version: "2.75.1" };
exports.GatewayVpcEndpoint = GatewayVpcEndpoint;
/**
 * A custom-hosted service for an interface VPC endpoint.
 */
class InterfaceVpcEndpointService {
    constructor(name, port) {
        /**
         * Whether Private DNS is supported by default.
         */
        this.privateDnsDefault = false;
        this.name = name;
        this.port = port || 443;
    }
}
_d = JSII_RTTI_SYMBOL_1;
InterfaceVpcEndpointService[_d] = { fqn: "aws-cdk-lib.aws_ec2.InterfaceVpcEndpointService", version: "2.75.1" };
exports.InterfaceVpcEndpointService = InterfaceVpcEndpointService;
/**
 * An AWS service for an interface VPC endpoint.
 */
class InterfaceVpcEndpointAwsService {
    constructor(name, prefix, port) {
        /**
         * Whether Private DNS is supported by default.
         */
        this.privateDnsDefault = true;
        const region = core_1.Lazy.uncachedString({
            produce: (context) => core_1.Stack.of(context.scope).region,
        });
        const defaultEndpointPrefix = core_1.Lazy.uncachedString({
            produce: (context) => {
                const regionName = core_1.Stack.of(context.scope).region;
                return this.getDefaultEndpointPrefix(name, regionName);
            },
        });
        const defaultEndpointSuffix = core_1.Lazy.uncachedString({
            produce: (context) => {
                const regionName = core_1.Stack.of(context.scope).region;
                return this.getDefaultEndpointSuffix(name, regionName);
            },
        });
        this.name = `${prefix || defaultEndpointPrefix}.${region}.${name}${defaultEndpointSuffix}`;
        this.shortName = name;
        this.port = port || 443;
    }
    /**
     * Get the endpoint prefix for the service in the specified region
     * because the prefix for some of the services in cn-north-1 and cn-northwest-1 are different
     *
     * For future maintenance， the vpc endpoint services could be fetched using AWS CLI Commmand:
     * aws ec2 describe-vpc-endpoint-services
     */
    getDefaultEndpointPrefix(name, region) {
        const VPC_ENDPOINT_SERVICE_EXCEPTIONS = {
            'cn-north-1': ['application-autoscaling', 'athena', 'autoscaling', 'awsconnector', 'cassandra',
                'cloudformation', 'codedeploy-commands-secure', 'databrew', 'dms', 'ebs', 'ec2', 'ecr.api', 'ecr.dkr',
                'elasticbeanstalk', 'elasticfilesystem', 'elasticfilesystem-fips', 'execute-api', 'imagebuilder',
                'iotsitewise.api', 'iotsitewise.data', 'kinesis-streams', 'lambda', 'license-manager', 'monitoring',
                'rds', 'redshift', 'redshift-data', 's3', 'sagemaker.api', 'sagemaker.featurestore-runtime',
                'sagemaker.runtime', 'servicecatalog', 'sms', 'sqs', 'states', 'sts', 'synthetics', 'transcribe',
                'transcribestreaming', 'transfer', 'xray'],
            'cn-northwest-1': ['application-autoscaling', 'athena', 'autoscaling', 'awsconnector', 'cassandra',
                'cloudformation', 'codedeploy-commands-secure', 'databrew', 'dms', 'ebs', 'ec2', 'ecr.api', 'ecr.dkr',
                'elasticbeanstalk', 'elasticfilesystem', 'elasticfilesystem-fips', 'execute-api', 'imagebuilder',
                'kinesis-streams', 'lambda', 'license-manager', 'monitoring', 'rds', 'redshift', 'redshift-data', 's3',
                'sagemaker.api', 'sagemaker.featurestore-runtime', 'sagemaker.runtime', 'servicecatalog', 'sms', 'sqs',
                'states', 'sts', 'synthetics', 'transcribe', 'transcribestreaming', 'transfer', 'workspaces', 'xray'],
        };
        if (VPC_ENDPOINT_SERVICE_EXCEPTIONS[region]?.includes(name)) {
            return 'cn.com.amazonaws';
        }
        else {
            return 'com.amazonaws';
        }
    }
    /**
     * Get the endpoint suffix for the service in the specified region.
     * In cn-north-1 and cn-northwest-1, the vpc endpoint of transcribe is:
     *   cn.com.amazonaws.cn-north-1.transcribe.cn
     *   cn.com.amazonaws.cn-northwest-1.transcribe.cn
     * so suffix '.cn' should be return in these scenarios.
     *
     * For future maintenance， the vpc endpoint services could be fetched using AWS CLI Commmand:
     * aws ec2 describe-vpc-endpoint-services
     */
    getDefaultEndpointSuffix(name, region) {
        const VPC_ENDPOINT_SERVICE_EXCEPTIONS = {
            'cn-north-1': ['transcribe'],
            'cn-northwest-1': ['transcribe'],
        };
        return VPC_ENDPOINT_SERVICE_EXCEPTIONS[region]?.includes(name) ? '.cn' : '';
    }
}
_e = JSII_RTTI_SYMBOL_1;
InterfaceVpcEndpointAwsService[_e] = { fqn: "aws-cdk-lib.aws_ec2.InterfaceVpcEndpointAwsService", version: "2.75.1" };
InterfaceVpcEndpointAwsService.SAGEMAKER_STUDIO = new InterfaceVpcEndpointAwsService('studio', 'aws.sagemaker');
InterfaceVpcEndpointAwsService.SAGEMAKER_NOTEBOOK = new InterfaceVpcEndpointAwsService('notebook', 'aws.sagemaker');
InterfaceVpcEndpointAwsService.KENDRA_RANKING = new InterfaceVpcEndpointAwsService('kendra-ranking', 'aws.api');
InterfaceVpcEndpointAwsService.ACCESS_ANALYZER = new InterfaceVpcEndpointAwsService('access-analyzer');
InterfaceVpcEndpointAwsService.ACCOUNT_MANAGEMENT = new InterfaceVpcEndpointAwsService('account');
InterfaceVpcEndpointAwsService.APP_MESH = new InterfaceVpcEndpointAwsService('appmesh-envoy-management');
InterfaceVpcEndpointAwsService.APP_RUNNER = new InterfaceVpcEndpointAwsService('apprunner');
InterfaceVpcEndpointAwsService.APP_RUNNER_REQUESTS = new InterfaceVpcEndpointAwsService('apprunner.requests');
InterfaceVpcEndpointAwsService.APPLICATION_MIGRATION_SERVICE = new InterfaceVpcEndpointAwsService('mgn');
InterfaceVpcEndpointAwsService.APPSTREAM_API = new InterfaceVpcEndpointAwsService('appstream.api');
InterfaceVpcEndpointAwsService.APPSTREAM_STREAMING = new InterfaceVpcEndpointAwsService('appstream.streaming');
InterfaceVpcEndpointAwsService.ATHENA = new InterfaceVpcEndpointAwsService('athena');
InterfaceVpcEndpointAwsService.AUDIT_MANAGER = new InterfaceVpcEndpointAwsService('auditmanager');
InterfaceVpcEndpointAwsService.APPLICATION_AUTOSCALING = new InterfaceVpcEndpointAwsService('application-autoscaling');
InterfaceVpcEndpointAwsService.AUTOSCALING = new InterfaceVpcEndpointAwsService('autoscaling');
InterfaceVpcEndpointAwsService.AUTOSCALING_PLANS = new InterfaceVpcEndpointAwsService('autoscaling-plans');
InterfaceVpcEndpointAwsService.BACKUP = new InterfaceVpcEndpointAwsService('backup');
InterfaceVpcEndpointAwsService.BACKUP_GATEWAY = new InterfaceVpcEndpointAwsService('backup-gateway');
InterfaceVpcEndpointAwsService.BATCH = new InterfaceVpcEndpointAwsService('batch');
InterfaceVpcEndpointAwsService.BILLING_CONDUCTOR = new InterfaceVpcEndpointAwsService('billingconductor');
InterfaceVpcEndpointAwsService.BRAKET = new InterfaceVpcEndpointAwsService('braket');
InterfaceVpcEndpointAwsService.PRIVATE_CERTIFICATE_AUTHORITY = new InterfaceVpcEndpointAwsService('acm-pca');
InterfaceVpcEndpointAwsService.CLOUD_CONTROL_API = new InterfaceVpcEndpointAwsService('cloudcontrolapi');
InterfaceVpcEndpointAwsService.CLOUD_CONTROL_API_FIPS = new InterfaceVpcEndpointAwsService('cloudcontrolapi-fips');
InterfaceVpcEndpointAwsService.CLOUD_DIRECTORY = new InterfaceVpcEndpointAwsService('clouddirectory');
InterfaceVpcEndpointAwsService.CLOUDFORMATION = new InterfaceVpcEndpointAwsService('cloudformation');
InterfaceVpcEndpointAwsService.CLOUDHSM = new InterfaceVpcEndpointAwsService('cloudhsmv2');
InterfaceVpcEndpointAwsService.CLOUDTRAIL = new InterfaceVpcEndpointAwsService('cloudtrail');
InterfaceVpcEndpointAwsService.CLOUDWATCH_EVIDENTLY = new InterfaceVpcEndpointAwsService('evidently');
InterfaceVpcEndpointAwsService.CLOUDWATCH_EVIDENTLY_DATAPLANE = new InterfaceVpcEndpointAwsService('evidently-dataplane');
InterfaceVpcEndpointAwsService.CLOUDWATCH_MONITORING = new InterfaceVpcEndpointAwsService('monitoring');
InterfaceVpcEndpointAwsService.CLOUDWATCH_RUM = new InterfaceVpcEndpointAwsService('rum');
InterfaceVpcEndpointAwsService.CLOUDWATCH_RUM_DATAPLANE = new InterfaceVpcEndpointAwsService('rum-dataplane');
InterfaceVpcEndpointAwsService.CLOUDWATCH_SYNTHETICS = new InterfaceVpcEndpointAwsService('synthetics');
InterfaceVpcEndpointAwsService.CODEARTIFACT_API = new InterfaceVpcEndpointAwsService('codeartifact.api');
InterfaceVpcEndpointAwsService.CODEARTIFACT_REPOSITORIES = new InterfaceVpcEndpointAwsService('codeartifact.repositories');
InterfaceVpcEndpointAwsService.CODEBUILD = new InterfaceVpcEndpointAwsService('codebuild');
InterfaceVpcEndpointAwsService.CODEBUILD_FIPS = new InterfaceVpcEndpointAwsService('codebuild-fips');
InterfaceVpcEndpointAwsService.CODECOMMIT = new InterfaceVpcEndpointAwsService('codecommit');
InterfaceVpcEndpointAwsService.CODECOMMIT_FIPS = new InterfaceVpcEndpointAwsService('codecommit-fips');
InterfaceVpcEndpointAwsService.CODEDEPLOY = new InterfaceVpcEndpointAwsService('codedeploy');
InterfaceVpcEndpointAwsService.CODEDEPLOY_COMMANDS_SECURE = new InterfaceVpcEndpointAwsService('codedeploy-commands-secure');
InterfaceVpcEndpointAwsService.CODEGURU_PROFILER = new InterfaceVpcEndpointAwsService('codeguru-profiler');
InterfaceVpcEndpointAwsService.CODEGURU_REVIEWER = new InterfaceVpcEndpointAwsService('codeguru-reviewer');
InterfaceVpcEndpointAwsService.CODEPIPELINE = new InterfaceVpcEndpointAwsService('codepipeline');
InterfaceVpcEndpointAwsService.CODESTAR_CONNECTIONS = new InterfaceVpcEndpointAwsService('codestar-connections.api');
InterfaceVpcEndpointAwsService.COMPREHEND = new InterfaceVpcEndpointAwsService('comprehend');
InterfaceVpcEndpointAwsService.COMPREHEND_MEDICAL = new InterfaceVpcEndpointAwsService('comprehendmedical');
InterfaceVpcEndpointAwsService.CONFIG = new InterfaceVpcEndpointAwsService('config');
InterfaceVpcEndpointAwsService.CONNECT_APP_INTEGRATIONS = new InterfaceVpcEndpointAwsService('app-integrations');
InterfaceVpcEndpointAwsService.CONNECT_CASES = new InterfaceVpcEndpointAwsService('cases');
InterfaceVpcEndpointAwsService.CONNECT_CONNECT_CAMPAIGNS = new InterfaceVpcEndpointAwsService('connect-campaigns');
InterfaceVpcEndpointAwsService.CONNECT_PROFILE = new InterfaceVpcEndpointAwsService('profile');
InterfaceVpcEndpointAwsService.CONNECT_VOICEID = new InterfaceVpcEndpointAwsService('voiceid');
InterfaceVpcEndpointAwsService.CONNECT_WISDOM = new InterfaceVpcEndpointAwsService('wisdom');
InterfaceVpcEndpointAwsService.DATA_EXCHANGE = new InterfaceVpcEndpointAwsService('dataexchange');
InterfaceVpcEndpointAwsService.DATABASE_MIGRATION_SERVICE = new InterfaceVpcEndpointAwsService('dms');
InterfaceVpcEndpointAwsService.DATABASE_MIGRATION_SERVICE_FIPS = new InterfaceVpcEndpointAwsService('dms-fips');
InterfaceVpcEndpointAwsService.DATASYNC = new InterfaceVpcEndpointAwsService('datasync');
InterfaceVpcEndpointAwsService.DEVOPS_GURU = new InterfaceVpcEndpointAwsService('devops-guru');
InterfaceVpcEndpointAwsService.EBS_DIRECT = new InterfaceVpcEndpointAwsService('ebs');
InterfaceVpcEndpointAwsService.EC2 = new InterfaceVpcEndpointAwsService('ec2');
InterfaceVpcEndpointAwsService.EC2_MESSAGES = new InterfaceVpcEndpointAwsService('ec2messages');
InterfaceVpcEndpointAwsService.IMAGE_BUILDER = new InterfaceVpcEndpointAwsService('imagebuilder');
InterfaceVpcEndpointAwsService.ECR = new InterfaceVpcEndpointAwsService('ecr.api');
InterfaceVpcEndpointAwsService.ECR_DOCKER = new InterfaceVpcEndpointAwsService('ecr.dkr');
InterfaceVpcEndpointAwsService.ECS = new InterfaceVpcEndpointAwsService('ecs');
InterfaceVpcEndpointAwsService.ECS_AGENT = new InterfaceVpcEndpointAwsService('ecs-agent');
InterfaceVpcEndpointAwsService.ECS_TELEMETRY = new InterfaceVpcEndpointAwsService('ecs-telemetry');
InterfaceVpcEndpointAwsService.EKS = new InterfaceVpcEndpointAwsService('eks');
InterfaceVpcEndpointAwsService.ELASTIC_BEANSTALK = new InterfaceVpcEndpointAwsService('elasticbeanstalk');
InterfaceVpcEndpointAwsService.ELASTIC_BEANSTALK_HEALTH = new InterfaceVpcEndpointAwsService('elasticbeanstalk-health');
InterfaceVpcEndpointAwsService.ELASTIC_DISASTER_RECOVERY = new InterfaceVpcEndpointAwsService('drs');
InterfaceVpcEndpointAwsService.ELASTIC_FILESYSTEM = new InterfaceVpcEndpointAwsService('elasticfilesystem');
InterfaceVpcEndpointAwsService.ELASTIC_FILESYSTEM_FIPS = new InterfaceVpcEndpointAwsService('elasticfilesystem-fips');
InterfaceVpcEndpointAwsService.ELASTIC_INFERENCE_RUNTIME = new InterfaceVpcEndpointAwsService('elastic-inference.runtime');
InterfaceVpcEndpointAwsService.ELASTIC_LOAD_BALANCING = new InterfaceVpcEndpointAwsService('elasticloadbalancing');
InterfaceVpcEndpointAwsService.ELASTICACHE = new InterfaceVpcEndpointAwsService('elasticache');
InterfaceVpcEndpointAwsService.ELASTICACHE_FIPS = new InterfaceVpcEndpointAwsService('elasticache-fips');
InterfaceVpcEndpointAwsService.EMR = new InterfaceVpcEndpointAwsService('elasticmapreduce');
InterfaceVpcEndpointAwsService.EMR_EKS = new InterfaceVpcEndpointAwsService('emr-containers');
InterfaceVpcEndpointAwsService.EMR_SERVERLESS = new InterfaceVpcEndpointAwsService('emr-serverless');
InterfaceVpcEndpointAwsService.CLOUDWATCH_EVENTS = new InterfaceVpcEndpointAwsService('events');
InterfaceVpcEndpointAwsService.EVENTBRIDGE = new InterfaceVpcEndpointAwsService('events');
InterfaceVpcEndpointAwsService.APIGATEWAY = new InterfaceVpcEndpointAwsService('execute-api');
InterfaceVpcEndpointAwsService.FAULT_INJECTION_SIMULATOR = new InterfaceVpcEndpointAwsService('fis');
InterfaceVpcEndpointAwsService.FINSPACE = new InterfaceVpcEndpointAwsService('finspace');
InterfaceVpcEndpointAwsService.FINSPACE_API = new InterfaceVpcEndpointAwsService('finspace-api');
InterfaceVpcEndpointAwsService.FORECAST = new InterfaceVpcEndpointAwsService('forecast');
InterfaceVpcEndpointAwsService.FORECAST_QUERY = new InterfaceVpcEndpointAwsService('forecastquery');
InterfaceVpcEndpointAwsService.FORECAST_FIPS = new InterfaceVpcEndpointAwsService('forecast-fips');
InterfaceVpcEndpointAwsService.FORECAST_QUERY_FIPS = new InterfaceVpcEndpointAwsService('forecastquery-fips');
InterfaceVpcEndpointAwsService.FRAUD_DETECTOR = new InterfaceVpcEndpointAwsService('frauddetector');
InterfaceVpcEndpointAwsService.FSX = new InterfaceVpcEndpointAwsService('fsx');
InterfaceVpcEndpointAwsService.FSX_FIPS = new InterfaceVpcEndpointAwsService('fsx-fips');
InterfaceVpcEndpointAwsService.CODECOMMIT_GIT = new InterfaceVpcEndpointAwsService('git-codecommit');
InterfaceVpcEndpointAwsService.CODECOMMIT_GIT_FIPS = new InterfaceVpcEndpointAwsService('git-codecommit-fips');
InterfaceVpcEndpointAwsService.GLUE = new InterfaceVpcEndpointAwsService('glue');
InterfaceVpcEndpointAwsService.GLUE_DATABREW = new InterfaceVpcEndpointAwsService('databrew');
InterfaceVpcEndpointAwsService.GRAFANA = new InterfaceVpcEndpointAwsService('grafana');
InterfaceVpcEndpointAwsService.GRAFANA_WORKSPACE = new InterfaceVpcEndpointAwsService('grafana-workspace');
InterfaceVpcEndpointAwsService.GROUNDSTATION = new InterfaceVpcEndpointAwsService('groundstation');
InterfaceVpcEndpointAwsService.HEALTHLAKE = new InterfaceVpcEndpointAwsService('healthlake');
InterfaceVpcEndpointAwsService.IAM_IDENTITY_CENTER = new InterfaceVpcEndpointAwsService('identitystore');
InterfaceVpcEndpointAwsService.IAM_ROLES_ANYWHERE = new InterfaceVpcEndpointAwsService('rolesanywhere');
InterfaceVpcEndpointAwsService.INSPECTOR = new InterfaceVpcEndpointAwsService('inspector2');
InterfaceVpcEndpointAwsService.IOT_CORE = new InterfaceVpcEndpointAwsService('iot.data');
InterfaceVpcEndpointAwsService.IOT_CORE_DEVICE_ADVISOR = new InterfaceVpcEndpointAwsService('deviceadvisor.iot');
InterfaceVpcEndpointAwsService.IOT_CORE_FOR_LORAWAN = new InterfaceVpcEndpointAwsService('iotwireless.api');
InterfaceVpcEndpointAwsService.IOT_LORAWAN_CUPS = new InterfaceVpcEndpointAwsService('lorawan.cups');
InterfaceVpcEndpointAwsService.IOT_LORAWAN_LNS = new InterfaceVpcEndpointAwsService('lorawan.lns');
InterfaceVpcEndpointAwsService.IOT_GREENGRASS = new InterfaceVpcEndpointAwsService('greengrass');
InterfaceVpcEndpointAwsService.IOT_ROBORUNNER = new InterfaceVpcEndpointAwsService('iotroborunner');
InterfaceVpcEndpointAwsService.IOT_SITEWISE_API = new InterfaceVpcEndpointAwsService('iotsitewise.api');
InterfaceVpcEndpointAwsService.IOT_SITEWISE_DATA = new InterfaceVpcEndpointAwsService('iotsitewise.data');
InterfaceVpcEndpointAwsService.IOT_TWINMAKER_API = new InterfaceVpcEndpointAwsService('iottwinmaker.api');
InterfaceVpcEndpointAwsService.IOT_TWINMAKER_DATA = new InterfaceVpcEndpointAwsService('iottwinmaker.data');
InterfaceVpcEndpointAwsService.KENDRA = new InterfaceVpcEndpointAwsService('kendra');
InterfaceVpcEndpointAwsService.KEYSPACES = new InterfaceVpcEndpointAwsService('cassandra', '', 9142);
InterfaceVpcEndpointAwsService.KEYSPACES_FIPS = new InterfaceVpcEndpointAwsService('cassandra-fips', '', 9142);
InterfaceVpcEndpointAwsService.KINESIS_STREAMS = new InterfaceVpcEndpointAwsService('kinesis-streams');
InterfaceVpcEndpointAwsService.KINESIS_FIREHOSE = new InterfaceVpcEndpointAwsService('kinesis-firehose');
InterfaceVpcEndpointAwsService.KMS = new InterfaceVpcEndpointAwsService('kms');
InterfaceVpcEndpointAwsService.KMS_FIPS = new InterfaceVpcEndpointAwsService('kms-fips');
InterfaceVpcEndpointAwsService.LAKE_FORMATION = new InterfaceVpcEndpointAwsService('lakeformation');
InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS = new InterfaceVpcEndpointAwsService('logs');
InterfaceVpcEndpointAwsService.CLOUDWATCH = new InterfaceVpcEndpointAwsService('monitoring');
InterfaceVpcEndpointAwsService.LAMBDA = new InterfaceVpcEndpointAwsService('lambda');
InterfaceVpcEndpointAwsService.LEX_MODELS = new InterfaceVpcEndpointAwsService('models-v2-lex');
InterfaceVpcEndpointAwsService.LEX_RUNTIME = new InterfaceVpcEndpointAwsService('runtime-v2-lex');
InterfaceVpcEndpointAwsService.LICENSE_MANAGER = new InterfaceVpcEndpointAwsService('license-manager');
InterfaceVpcEndpointAwsService.LICENSE_MANAGER_FIPS = new InterfaceVpcEndpointAwsService('license-manager-fips');
InterfaceVpcEndpointAwsService.LOOKOUT_EQUIPMENT = new InterfaceVpcEndpointAwsService('lookoutequipment');
InterfaceVpcEndpointAwsService.LOOKOUT_METRICS = new InterfaceVpcEndpointAwsService('lookoutmetrics');
InterfaceVpcEndpointAwsService.LOOKOUT_VISION = new InterfaceVpcEndpointAwsService('lookoutvision');
InterfaceVpcEndpointAwsService.MACIE = new InterfaceVpcEndpointAwsService('macie2');
InterfaceVpcEndpointAwsService.MAINFRAME_MODERNIZATION = new InterfaceVpcEndpointAwsService('m2');
InterfaceVpcEndpointAwsService.PROMETHEUS = new InterfaceVpcEndpointAwsService('aps');
InterfaceVpcEndpointAwsService.PROMETHEUS_WORKSPACES = new InterfaceVpcEndpointAwsService('aps-workspaces');
InterfaceVpcEndpointAwsService.AIRFLOW_API = new InterfaceVpcEndpointAwsService('airflow.api');
InterfaceVpcEndpointAwsService.AIRFLOW_ENV = new InterfaceVpcEndpointAwsService('airflow.env');
InterfaceVpcEndpointAwsService.AIRFLOW_OPS = new InterfaceVpcEndpointAwsService('airflow.ops');
InterfaceVpcEndpointAwsService.MEMORY_DB = new InterfaceVpcEndpointAwsService('memory-db');
InterfaceVpcEndpointAwsService.MEMORY_DB_FIPS = new InterfaceVpcEndpointAwsService('memorydb-fips');
InterfaceVpcEndpointAwsService.MIGRATIONHUB_ORCHESTRATOR = new InterfaceVpcEndpointAwsService('migrationhub-orchestrator');
InterfaceVpcEndpointAwsService.MIGRATIONHUB_REFACTOR_SPACES = new InterfaceVpcEndpointAwsService('refactor-spaces');
InterfaceVpcEndpointAwsService.MIGRATIONHUB_STRATEGY = new InterfaceVpcEndpointAwsService('migrationhub-strategy');
InterfaceVpcEndpointAwsService.NIMBLE_STUDIO = new InterfaceVpcEndpointAwsService('nimble');
InterfaceVpcEndpointAwsService.OMICS_ANALYTICS = new InterfaceVpcEndpointAwsService('analytics-omics');
InterfaceVpcEndpointAwsService.OMICS_CONTROL_STORAGE = new InterfaceVpcEndpointAwsService('control-storage-omics');
InterfaceVpcEndpointAwsService.OMICS_STORAGE = new InterfaceVpcEndpointAwsService('storage-omics');
InterfaceVpcEndpointAwsService.OMICS_TAGS = new InterfaceVpcEndpointAwsService('tags-omics');
InterfaceVpcEndpointAwsService.OMICS_WORKFLOWS = new InterfaceVpcEndpointAwsService('workflows-omics');
InterfaceVpcEndpointAwsService.PANORAMA = new InterfaceVpcEndpointAwsService('panorama');
InterfaceVpcEndpointAwsService.PINPOINT = new InterfaceVpcEndpointAwsService('pinpoint-sms-voice-v2');
InterfaceVpcEndpointAwsService.POLLY = new InterfaceVpcEndpointAwsService('polly');
InterfaceVpcEndpointAwsService.PRIVATE_5G = new InterfaceVpcEndpointAwsService('private-networks');
InterfaceVpcEndpointAwsService.PROTON = new InterfaceVpcEndpointAwsService('proton');
InterfaceVpcEndpointAwsService.QLDB = new InterfaceVpcEndpointAwsService('qldb.session');
InterfaceVpcEndpointAwsService.RDS = new InterfaceVpcEndpointAwsService('rds');
InterfaceVpcEndpointAwsService.RDS_DATA = new InterfaceVpcEndpointAwsService('rds-data');
InterfaceVpcEndpointAwsService.ROBOMAKER = new InterfaceVpcEndpointAwsService('robomaker');
InterfaceVpcEndpointAwsService.REDSHIFT = new InterfaceVpcEndpointAwsService('redshift');
InterfaceVpcEndpointAwsService.REDSHIFT_FIPS = new InterfaceVpcEndpointAwsService('redshift-fips');
InterfaceVpcEndpointAwsService.REDSHIFT_DATA = new InterfaceVpcEndpointAwsService('redshift-data');
InterfaceVpcEndpointAwsService.S3 = new InterfaceVpcEndpointAwsService('s3');
InterfaceVpcEndpointAwsService.S3_MULTI_REGION_ACCESS_POINTS = new InterfaceVpcEndpointAwsService('s3-global.accesspoint', 'com.amazonaws');
InterfaceVpcEndpointAwsService.S3_OUTPOSTS = new InterfaceVpcEndpointAwsService('s3-outposts');
InterfaceVpcEndpointAwsService.SAGEMAKER_API = new InterfaceVpcEndpointAwsService('sagemaker.api');
InterfaceVpcEndpointAwsService.SAGEMAKER_FEATURESTORE_RUNTIME = new InterfaceVpcEndpointAwsService('sagemaker.featurestore-runtime');
InterfaceVpcEndpointAwsService.SAGEMAKER_METRICS = new InterfaceVpcEndpointAwsService('sagemaker.metrics');
InterfaceVpcEndpointAwsService.SAGEMAKER_RUNTIME = new InterfaceVpcEndpointAwsService('sagemaker.runtime');
InterfaceVpcEndpointAwsService.SAGEMAKER_RUNTIME_FIPS = new InterfaceVpcEndpointAwsService('sagemaker.runtime-fips');
InterfaceVpcEndpointAwsService.SECRETS_MANAGER = new InterfaceVpcEndpointAwsService('secretsmanager');
InterfaceVpcEndpointAwsService.SERVICE_CATALOG = new InterfaceVpcEndpointAwsService('servicecatalog');
InterfaceVpcEndpointAwsService.SERVICE_CATALOG_APPREGISTRY = new InterfaceVpcEndpointAwsService('servicecatalog-appregistry');
InterfaceVpcEndpointAwsService.SERVER_MIGRATION_SERVICE = new InterfaceVpcEndpointAwsService('sms');
InterfaceVpcEndpointAwsService.SERVER_MIGRATION_SERVICE_FIPS = new InterfaceVpcEndpointAwsService('sms-fips');
InterfaceVpcEndpointAwsService.SERVER_MIGRATION_SERVICE_AWSCONNECTOR = new InterfaceVpcEndpointAwsService('awsconnector');
InterfaceVpcEndpointAwsService.SES = new InterfaceVpcEndpointAwsService('email-smtp');
InterfaceVpcEndpointAwsService.SNS = new InterfaceVpcEndpointAwsService('sns');
InterfaceVpcEndpointAwsService.SQS = new InterfaceVpcEndpointAwsService('sqs');
InterfaceVpcEndpointAwsService.SSM = new InterfaceVpcEndpointAwsService('ssm');
InterfaceVpcEndpointAwsService.SSM_MESSAGES = new InterfaceVpcEndpointAwsService('ssmmessages');
InterfaceVpcEndpointAwsService.SSM_CONTACTS = new InterfaceVpcEndpointAwsService('ssm-contacts');
InterfaceVpcEndpointAwsService.SSM_INCIDENTS = new InterfaceVpcEndpointAwsService('ssm-incidents');
InterfaceVpcEndpointAwsService.STS = new InterfaceVpcEndpointAwsService('sts');
InterfaceVpcEndpointAwsService.SNOW_DEVICE_MANAGEMENT = new InterfaceVpcEndpointAwsService('snow-device-management');
InterfaceVpcEndpointAwsService.TEXTRACT = new InterfaceVpcEndpointAwsService('textract');
InterfaceVpcEndpointAwsService.TEXTRACT_FIPS = new InterfaceVpcEndpointAwsService('textract-fips');
InterfaceVpcEndpointAwsService.TRANSFER = new InterfaceVpcEndpointAwsService('transfer');
InterfaceVpcEndpointAwsService.TRANSFER_SERVER = new InterfaceVpcEndpointAwsService('transfer.server');
InterfaceVpcEndpointAwsService.TRANSLATE = new InterfaceVpcEndpointAwsService('translate');
InterfaceVpcEndpointAwsService.STORAGE_GATEWAY = new InterfaceVpcEndpointAwsService('storagegateway');
InterfaceVpcEndpointAwsService.REKOGNITION = new InterfaceVpcEndpointAwsService('rekognition');
InterfaceVpcEndpointAwsService.REKOGNITION_FIPS = new InterfaceVpcEndpointAwsService('rekognition-fips');
InterfaceVpcEndpointAwsService.STEP_FUNCTIONS = new InterfaceVpcEndpointAwsService('states');
InterfaceVpcEndpointAwsService.STEP_FUNCTIONS_SYNC = new InterfaceVpcEndpointAwsService('sync-states');
InterfaceVpcEndpointAwsService.TRANSCRIBE = new InterfaceVpcEndpointAwsService('transcribe');
InterfaceVpcEndpointAwsService.TRANSCRIBE_STREAMING = new InterfaceVpcEndpointAwsService('transcribestreaming');
InterfaceVpcEndpointAwsService.WORKSPACES = new InterfaceVpcEndpointAwsService('workspaces');
InterfaceVpcEndpointAwsService.XRAY = new InterfaceVpcEndpointAwsService('xray');
InterfaceVpcEndpointAwsService.SECURITYHUB = new InterfaceVpcEndpointAwsService('securityhub');
InterfaceVpcEndpointAwsService.EMAIL_SMTP = new InterfaceVpcEndpointAwsService('email-smtp');
exports.InterfaceVpcEndpointAwsService = InterfaceVpcEndpointAwsService;
/**
 * A interface VPC endpoint.
 * @resource AWS::EC2::VPCEndpoint
 */
class InterfaceVpcEndpoint extends VpcEndpoint {
    /**
     * Imports an existing interface VPC endpoint.
     */
    static fromInterfaceVpcEndpointAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_InterfaceVpcEndpointAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromInterfaceVpcEndpointAttributes);
            }
            throw error;
        }
        const securityGroups = attrs.securityGroupId
            ? [security_group_1.SecurityGroup.fromSecurityGroupId(scope, 'SecurityGroup', attrs.securityGroupId)]
            : attrs.securityGroups;
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.vpcEndpointId = attrs.vpcEndpointId;
                this.connections = new connections_1.Connections({
                    defaultPort: port_1.Port.tcp(attrs.port),
                    securityGroups,
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_InterfaceVpcEndpointProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, InterfaceVpcEndpoint);
            }
            throw error;
        }
        const securityGroups = props.securityGroups || [new security_group_1.SecurityGroup(this, 'SecurityGroup', {
                vpc: props.vpc,
            })];
        this.securityGroupId = securityGroups[0].securityGroupId;
        this.connections = new connections_1.Connections({
            defaultPort: port_1.Port.tcp(props.service.port),
            securityGroups,
        });
        if (props.open !== false) {
            this.connections.allowDefaultPortFrom(peer_1.Peer.ipv4(props.vpc.vpcCidrBlock));
        }
        // Determine which subnets to place the endpoint in
        const subnetIds = this.endpointSubnets(props);
        const endpoint = new ec2_generated_1.CfnVPCEndpoint(this, 'Resource', {
            privateDnsEnabled: props.privateDnsEnabled ?? props.service.privateDnsDefault ?? true,
            policyDocument: core_1.Lazy.any({ produce: () => this.policyDocument }),
            securityGroupIds: securityGroups.map(s => s.securityGroupId),
            serviceName: props.service.name,
            vpcEndpointType: VpcEndpointType.INTERFACE,
            subnetIds,
            vpcId: props.vpc.vpcId,
        });
        this.vpcEndpointId = endpoint.ref;
        this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;
        this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;
        this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;
    }
    /**
     * Determine which subnets to place the endpoint in. This is in its own function
     * because there's a lot of code.
     */
    endpointSubnets(props) {
        const lookupSupportedAzs = props.lookupSupportedAzs ?? false;
        const subnetSelection = props.vpc.selectSubnets({ ...props.subnets, onePerAz: true });
        const subnets = subnetSelection.subnets;
        // Sanity check the subnet count
        if (!subnetSelection.isPendingLookup && subnetSelection.subnets.length == 0) {
            throw new Error('Cannot create a VPC Endpoint with no subnets');
        }
        // If we aren't going to lookup supported AZs we'll exit early, returning the subnetIds from the provided subnet selection
        if (!lookupSupportedAzs) {
            return subnetSelection.subnetIds;
        }
        // Some service names, such as AWS service name references, use Tokens to automatically fill in the region
        // If it is an InterfaceVpcEndpointAwsService, then the reference will be resolvable since it only references the region
        const isAwsService = core_1.Token.isUnresolved(props.service.name) && props.service instanceof InterfaceVpcEndpointAwsService;
        // Determine what service name gets pass to the context provider
        // If it is an AWS service it will have a REGION token
        const lookupServiceName = isAwsService ? core_1.Stack.of(this).resolve(props.service.name) : props.service.name;
        // Check that the lookup will work
        this.validateCanLookupSupportedAzs(subnets, lookupServiceName);
        // Do the actual lookup for AZs
        const availableAZs = this.availableAvailabilityZones(lookupServiceName);
        const filteredSubnets = subnets.filter(s => availableAZs.includes(s.availabilityZone));
        // Throw an error if the lookup filtered out all subnets
        // VpcEndpoints must be created with at least one AZ
        if (filteredSubnets.length == 0) {
            throw new Error(`lookupSupportedAzs returned ${availableAZs} but subnets have AZs ${subnets.map(s => s.availabilityZone)}`);
        }
        return filteredSubnets.map(s => s.subnetId);
    }
    /**
     * Sanity checking when looking up AZs for an endpoint service, to make sure it won't fail
     */
    validateCanLookupSupportedAzs(subnets, serviceName) {
        // Having any of these be true will cause the AZ lookup to fail at synthesis time
        const agnosticAcct = core_1.Token.isUnresolved(this.env.account);
        const agnosticRegion = core_1.Token.isUnresolved(this.env.region);
        const agnosticService = core_1.Token.isUnresolved(serviceName);
        // Having subnets with Token AZs can cause the endpoint to be created with no subnets, failing at deployment time
        const agnosticSubnets = subnets.some(s => core_1.Token.isUnresolved(s.availabilityZone));
        const agnosticSubnetList = core_1.Token.isUnresolved(subnets.map(s => s.availabilityZone));
        // Context provider cannot make an AWS call without an account/region
        if (agnosticAcct || agnosticRegion) {
            throw new Error('Cannot look up VPC endpoint availability zones if account/region are not specified');
        }
        // The AWS call will fail if there is a Token in the service name
        if (agnosticService) {
            throw new Error(`Cannot lookup AZs for a service name with a Token: ${serviceName}`);
        }
        // The AWS call return strings for AZs, like us-east-1a, us-east-1b, etc
        // If the subnet AZs are Tokens, a string comparison between the subnet AZs and the AZs from the AWS call
        // will not match
        if (agnosticSubnets || agnosticSubnetList) {
            const agnostic = subnets.filter(s => core_1.Token.isUnresolved(s.availabilityZone));
            throw new Error(`lookupSupportedAzs cannot filter on subnets with Token AZs: ${agnostic}`);
        }
    }
    availableAvailabilityZones(serviceName) {
        // Here we check what AZs the endpoint service is available in
        // If for whatever reason we can't retrieve the AZs, and no context is set,
        // we will fall back to all AZs
        const availableAZs = core_1.ContextProvider.getValue(this, {
            provider: cxschema.ContextProvider.ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER,
            dummyValue: this.stack.availabilityZones,
            props: { serviceName },
        }).value;
        if (!Array.isArray(availableAZs)) {
            throw new Error(`Discovered AZs for endpoint service ${serviceName} must be an array`);
        }
        return availableAZs;
    }
}
_f = JSII_RTTI_SYMBOL_1;
InterfaceVpcEndpoint[_f] = { fqn: "aws-cdk-lib.aws_ec2.InterfaceVpcEndpoint", version: "2.75.1" };
exports.InterfaceVpcEndpoint = InterfaceVpcEndpoint;
//# sourceMappingURL=data:application/json;base64,