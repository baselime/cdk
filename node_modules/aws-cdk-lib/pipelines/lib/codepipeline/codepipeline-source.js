"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipelineSource = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cp_actions = require("../../../aws-codepipeline-actions");
const core_1 = require("../../../core");
const constructs_1 = require("constructs");
const outputs_1 = require("./private/outputs");
const blueprint_1 = require("../blueprint");
/**
 * Factory for CodePipeline source steps
 *
 * This class contains a number of factory methods for the different types
 * of sources that CodePipeline supports.
 */
class CodePipelineSource extends blueprint_1.Step {
    constructor() {
        super(...arguments);
        // tells `PipelineGraph` to hoist a "Source" step
        this.isSource = true;
    }
    /**
     * Returns a GitHub source, using OAuth tokens to authenticate with
     * GitHub and a separate webhook to detect changes. This is no longer
     * the recommended method. Please consider using `connection()`
     * instead.
     *
     * Pass in the owner and repository in a single string, like this:
     *
     * ```ts
     * pipelines.CodePipelineSource.gitHub('owner/repo', 'main');
     * ```
     *
     * Authentication will be done by a secret called `github-token` in AWS
     * Secrets Manager (unless specified otherwise).
     *
     * If you rotate the value in the Secret, you must also change at least one property
     * on the Pipeline, to force CloudFormation to re-read the secret.
     *
     * The token should have these permissions:
     *
     * * **repo** - to read the repository
     * * **admin:repo_hook** - if you plan to use webhooks (true by default)
     *
     * If you need access to symlinks or the repository history, use a source of type
     * `connection` instead.
     */
    static gitHub(repoString, branch, props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_pipelines_GitHubSourceOptions(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.gitHub);
            }
            throw error;
        }
        return new GitHubSource(repoString, branch, props);
    }
    /**
     * Returns an S3 source.
     *
     * @param bucket The bucket where the source code is located.
     * @param props The options, which include the key that identifies the source code file and
     * and how the pipeline should be triggered.
     *
     * @example
     * declare const bucket: s3.Bucket;
     * pipelines.CodePipelineSource.s3(bucket, 'path/to/file.zip');
     */
    static s3(bucket, objectKey, props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_IBucket(bucket);
            jsiiDeprecationWarnings.aws_cdk_lib_pipelines_S3SourceOptions(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.s3);
            }
            throw error;
        }
        return new S3Source(bucket, objectKey, props);
    }
    /**
     * Returns an ECR source.
     *
     * @param repository The repository that will be watched for changes.
     * @param props The options, which include the image tag to be checked for changes.
     *
     * @example
     * declare const repository: ecr.IRepository;
     * pipelines.CodePipelineSource.ecr(repository, {
     *   imageTag: 'latest',
     * });
     */
    static ecr(repository, props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ecr_IRepository(repository);
            jsiiDeprecationWarnings.aws_cdk_lib_pipelines_ECRSourceOptions(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.ecr);
            }
            throw error;
        }
        return new ECRSource(repository, props);
    }
    /**
     * Returns a CodeStar connection source. A CodeStar connection allows AWS CodePipeline to
     * access external resources, such as repositories in GitHub, GitHub Enterprise or
     * BitBucket.
     *
     * To use this method, you first need to create a CodeStar connection
     * using the AWS console. In the process, you may have to sign in to the external provider
     * -- GitHub, for example -- to authorize AWS to read and modify your repository.
     * Once you have done this, copy the connection ARN and use it to create the source.
     *
     * Example:
     *
     * ```ts
     * pipelines.CodePipelineSource.connection('owner/repo', 'main', {
     *   connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console
     * });
     * ```
     *
     * If you need access to symlinks or the repository history, be sure to set
     * `codeBuildCloneOutput`.
     *
     * @param repoString A string that encodes owner and repository separated by a slash (e.g. 'owner/repo').
     * @param branch The branch to use.
     * @param props The source properties, including the connection ARN.
     *
     * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html
     */
    static connection(repoString, branch, props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_pipelines_ConnectionSourceOptions(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.connection);
            }
            throw error;
        }
        return new CodeStarConnectionSource(repoString, branch, props);
    }
    /**
     * Returns a CodeCommit source.
     *
     * If you need access to symlinks or the repository history, be sure to set
     * `codeBuildCloneOutput`.
     *
     *
     * @param repository The CodeCommit repository.
     * @param branch The branch to use.
     * @param props The source properties.
     *
     * @example
     * declare const repository: codecommit.IRepository;
     * pipelines.CodePipelineSource.codeCommit(repository, 'main');
     */
    static codeCommit(repository, branch, props = {}) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codecommit_IRepository(repository);
            jsiiDeprecationWarnings.aws_cdk_lib_pipelines_CodeCommitSourceOptions(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.codeCommit);
            }
            throw error;
        }
        return new CodeCommitSource(repository, branch, props);
    }
    produceAction(stage, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_IStage(stage);
            jsiiDeprecationWarnings.aws_cdk_lib_pipelines_ProduceActionOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.produceAction);
            }
            throw error;
        }
        const output = options.artifacts.toCodePipeline(this.primaryOutput);
        const action = this.getAction(output, options.actionName, options.runOrder, options.variablesNamespace);
        stage.addAction(action);
        return { runOrdersConsumed: 1 };
    }
    /**
     * Return an attribute of the current source revision
     *
     * These values can be passed into the environment variables of pipeline steps,
     * so your steps can access information about the source revision.
     *
     * Pipeline synth step has some source attributes predefined in the environment.
     * If these suffice, you don't need to use this method for the synth step.
     * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
     *
     * What attributes are available depends on the type of source. These attributes
     * are supported:
     *
     * - GitHub, CodeCommit, and CodeStarSourceConnection
     *   - `AuthorDate`
     *   - `BranchName`
     *   - `CommitId`
     *   - `CommitMessage`
     * - GitHub, CodeCommit and ECR
     *   - `RepositoryName`
     * - GitHub and CodeCommit
     *   - `CommitterDate`
     * - GitHub
     *   - `CommitUrl`
     * - CodeStarSourceConnection
     *   - `FullRepositoryName`
     * - S3
     *   - `ETag`
     *   - `VersionId`
     * - ECR
     *   - `ImageDigest`
     *   - `ImageTag`
     *   - `ImageURI`
     *   - `RegistryId`
     *
     * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-variables.html#reference-variables-list
     * @example
     * // Access the CommitId of a GitHub source in the synth
     * const source = pipelines.CodePipelineSource.gitHub('owner/repo', 'main');
     *
     * const pipeline = new pipelines.CodePipeline(scope, 'MyPipeline', {
     *   synth: new pipelines.ShellStep('Synth', {
     *     input: source,
     *     commands: [],
     *     env: {
     *       'COMMIT_ID': source.sourceAttribute('CommitId'),
     *     }
     *   })
     * });
     */
    sourceAttribute(name) {
        return (0, outputs_1.makeCodePipelineOutput)(this, name);
    }
}
_a = JSII_RTTI_SYMBOL_1;
CodePipelineSource[_a] = { fqn: "aws-cdk-lib.pipelines.CodePipelineSource", version: "2.75.1" };
exports.CodePipelineSource = CodePipelineSource;
/**
 * Extend CodePipelineSource so we can type-test in the CodePipelineEngine.
 */
class GitHubSource extends CodePipelineSource {
    constructor(repoString, branch, props) {
        super(repoString);
        this.branch = branch;
        this.props = props;
        const parts = repoString.split('/');
        if (core_1.Token.isUnresolved(repoString) || parts.length !== 2) {
            throw new Error(`GitHub repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);
        }
        this.owner = parts[0];
        this.repo = parts[1];
        this.authentication = props.authentication ?? core_1.SecretValue.secretsManager('github-token');
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, actionName, runOrder, variablesNamespace) {
        return new cp_actions.GitHubSourceAction({
            output,
            actionName: this.props.actionName ?? actionName,
            runOrder,
            oauthToken: this.authentication,
            owner: this.owner,
            repo: this.repo,
            branch: this.branch,
            trigger: this.props.trigger,
            variablesNamespace,
        });
    }
}
class S3Source extends CodePipelineSource {
    constructor(bucket, objectKey, props) {
        super(constructs_1.Node.of(bucket).addr);
        this.bucket = bucket;
        this.objectKey = objectKey;
        this.props = props;
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, _actionName, runOrder, variablesNamespace) {
        return new cp_actions.S3SourceAction({
            output,
            // Bucket names are guaranteed to conform to ActionName restrictions
            actionName: this.props.actionName ?? this.bucket.bucketName,
            runOrder,
            bucketKey: this.objectKey,
            trigger: this.props.trigger,
            bucket: this.bucket,
            role: this.props.role,
            variablesNamespace,
        });
    }
}
class ECRSource extends CodePipelineSource {
    constructor(repository, props) {
        super(constructs_1.Node.of(repository).addr);
        this.repository = repository;
        this.props = props;
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, _actionName, runOrder, variablesNamespace) {
        // RepositoryName can contain '/' that is not a valid ActionName character, use '_' instead
        const formattedRepositoryName = core_1.Fn.join('_', core_1.Fn.split('/', this.repository.repositoryName));
        return new cp_actions.EcrSourceAction({
            output,
            actionName: this.props.actionName ?? formattedRepositoryName,
            runOrder,
            repository: this.repository,
            imageTag: this.props.imageTag,
            variablesNamespace,
        });
    }
}
class CodeStarConnectionSource extends CodePipelineSource {
    constructor(repoString, branch, props) {
        super(repoString);
        this.branch = branch;
        this.props = props;
        const parts = repoString.split('/');
        if (core_1.Token.isUnresolved(repoString) || parts.length !== 2) {
            throw new Error(`CodeStar repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);
        }
        this.owner = parts[0];
        this.repo = parts[1];
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, actionName, runOrder, variablesNamespace) {
        return new cp_actions.CodeStarConnectionsSourceAction({
            output,
            actionName: this.props.actionName ?? actionName,
            runOrder,
            connectionArn: this.props.connectionArn,
            owner: this.owner,
            repo: this.repo,
            branch: this.branch,
            codeBuildCloneOutput: this.props.codeBuildCloneOutput,
            triggerOnPush: this.props.triggerOnPush,
            variablesNamespace,
        });
    }
}
class CodeCommitSource extends CodePipelineSource {
    constructor(repository, branch, props) {
        super(core_1.Token.isUnresolved(repository.repositoryName)
            ? constructs_1.Node.of(repository).addr
            : repository.repositoryName);
        this.repository = repository;
        this.branch = branch;
        this.props = props;
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, _actionName, runOrder, variablesNamespace) {
        return new cp_actions.CodeCommitSourceAction({
            output,
            // Guaranteed to be okay as action name
            actionName: this.props.actionName ?? this.repository.repositoryName,
            runOrder,
            branch: this.branch,
            trigger: this.props.trigger,
            repository: this.repository,
            eventRole: this.props.eventRole,
            codeBuildCloneOutput: this.props.codeBuildCloneOutput,
            variablesNamespace,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,