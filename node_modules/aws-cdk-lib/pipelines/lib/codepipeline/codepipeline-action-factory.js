"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZXBpcGVsaW5lLWFjdGlvbi1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29kZXBpcGVsaW5lLWFjdGlvbi1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjYiBmcm9tICcuLi8uLi8uLi9hd3MtY29kZWJ1aWxkJztcbmltcG9ydCAqIGFzIGNwIGZyb20gJy4uLy4uLy4uL2F3cy1jb2RlcGlwZWxpbmUnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBBcnRpZmFjdE1hcCB9IGZyb20gJy4vYXJ0aWZhY3QtbWFwJztcbmltcG9ydCB7IENvZGVCdWlsZE9wdGlvbnMsIENvZGVQaXBlbGluZSB9IGZyb20gJy4vY29kZXBpcGVsaW5lJztcbmltcG9ydCB7IFN0YWNrT3V0cHV0c01hcCB9IGZyb20gJy4vc3RhY2stb3V0cHV0cy1tYXAnO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBgQ29kZVBpcGVsaW5lQWN0aW9uRmFjdG9yeS5wcm9kdWNlKClgIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9kdWNlQWN0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTY29wZSBpbiB3aGljaCB0byBjcmVhdGUgY29uc3RydWN0c1xuICAgKi9cbiAgcmVhZG9ubHkgc2NvcGU6IENvbnN0cnVjdDtcblxuICAvKipcbiAgICogTmFtZSB0aGUgYWN0aW9uIHNob3VsZCBnZXRcbiAgICovXG4gIHJlYWRvbmx5IGFjdGlvbk5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogUnVuT3JkZXIgdGhlIGFjdGlvbiBzaG91bGQgZ2V0XG4gICAqL1xuICByZWFkb25seSBydW5PcmRlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJZiB0aGlzIHN0ZXAgaXMgcHJvZHVjaW5nIG91dHB1dHMsIHRoZSB2YXJpYWJsZXMgbmFtZXNwYWNlIGFzc2lnbmVkIHRvIGl0XG4gICAqXG4gICAqIFBhc3MgdGhpcyBvbiB0byB0aGUgQWN0aW9uIHlvdSBhcmUgY3JlYXRpbmcuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gU3RlcCBkb2Vzbid0IHByb2R1Y2UgYW55IG91dHB1dHNcbiAgICovXG4gIHJlYWRvbmx5IHZhcmlhYmxlc05hbWVzcGFjZT86IHN0cmluZztcblxuICAvKipcbiAgICogSGVscGVyIG9iamVjdCB0byB0cmFuc2xhdGUgRmlsZVNldHMgdG8gQ29kZVBpcGVsaW5lIEFydGlmYWN0c1xuICAgKi9cbiAgcmVhZG9ubHkgYXJ0aWZhY3RzOiBBcnRpZmFjdE1hcDtcblxuICAvKipcbiAgICogQW4gaW5wdXQgYXJ0aWZhY3QgdGhhdCBDb2RlQnVpbGQgcHJvamVjdHMgdGhhdCBkb24ndCBhY3R1YWxseSBuZWVkIGFuIGlucHV0IGFydGlmYWN0IGNhbiB1c2VcbiAgICpcbiAgICogQ29kZUJ1aWxkIFByb2plY3RzIE1VU1QgaGF2ZSBhbiBpbnB1dCBhcnRpZmFjdCBpbiBvcmRlciB0byBiZSBhZGRlZCB0byB0aGUgUGlwZWxpbmUuIElmXG4gICAqIHRoZSBQcm9qZWN0IGRvZXNuJ3QgYWN0dWFsbHkgY2FyZSBhYm91dCBpdHMgaW5wdXQgKGl0IGNhbiBiZSBhbnl0aGluZyksIGl0IGNhbiB1c2UgdGhlXG4gICAqIEFydGlmYWN0IHBhc3NlZCBoZXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEEgZmFsbGJhY2sgYXJ0aWZhY3QgZG9lcyBub3QgZXhpc3RcbiAgICovXG4gIHJlYWRvbmx5IGZhbGxiYWNrQXJ0aWZhY3Q/OiBjcC5BcnRpZmFjdDtcblxuICAvKipcbiAgICogVGhlIHBpcGVsaW5lIHRoZSBhY3Rpb24gaXMgYmVpbmcgZ2VuZXJhdGVkIGZvclxuICAgKi9cbiAgcmVhZG9ubHkgcGlwZWxpbmU6IENvZGVQaXBlbGluZTtcblxuICAvKipcbiAgICogSWYgdGhpcyBhY3Rpb24gZmFjdG9yeSBjcmVhdGVzIGEgQ29kZUJ1aWxkIHN0ZXAsIGRlZmF1bHQgb3B0aW9ucyB0byBpbmhlcml0XG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm8gQ29kZUJ1aWxkIHByb2plY3QgZGVmYXVsdHNcbiAgICovXG4gIHJlYWRvbmx5IGNvZGVCdWlsZERlZmF1bHRzPzogQ29kZUJ1aWxkT3B0aW9ucztcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGhpcyBhY3Rpb24gaXMgaW5zZXJ0ZWQgYmVmb3JlIHNlbGYgbXV0YXRpb24uXG4gICAqXG4gICAqIElmIGl0IGlzLCB0aGUgYWN0aW9uIHNob3VsZCB0YWtlIGNhcmUgdG8gcmVmbGVjdCBzb21lIHBhcnQgb2ZcbiAgICogaXRzIG93biBkZWZpbml0aW9uIGluIHRoZSBwaXBlbGluZSBhY3Rpb24gZGVmaW5pdGlvbiwgdG9cbiAgICogdHJpZ2dlciBhIHJlc3RhcnQgYWZ0ZXIgc2VsZi1tdXRhdGlvbiAoaWYgbmVjZXNzYXJ5KS5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGJlZm9yZVNlbGZNdXRhdGlvbj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEhlbHBlciBvYmplY3QgdG8gcHJvZHVjZSB2YXJpYWJsZXMgZXhwb3J0ZWQgZnJvbSBzdGFjayBkZXBsb3ltZW50cy5cbiAgICpcbiAgICogSWYgeW91ciBzdGVwIHJlZmVyZW5jZXMgb3V0cHV0cyBmcm9tIGEgc3RhY2sgZGVwbG95bWVudCwgdXNlXG4gICAqIHRoaXMgdG8gbWFwIHRoZSBvdXRwdXQgcmVmZXJlbmNlcyB0byBDb2RlcGlwZWxpbmUgdmFyaWFibGUgbmFtZXMuXG4gICAqXG4gICAqIE5vdGUgLSBDb2RlcGlwZWxpbmUgdmFyaWFibGVzIGNhbiBvbmx5IGJlIHJlZmVyZW5jZWQgaW4gYWN0aW9uXG4gICAqIGNvbmZpZ3VyYXRpb25zLlxuICAgKlxuICAgKi9cbiAgcmVhZG9ubHkgc3RhY2tPdXRwdXRzTWFwOiBTdGFja091dHB1dHNNYXA7XG59XG5cbi8qKlxuICogRmFjdG9yeSBmb3IgZXhwbGljaXQgQ29kZVBpcGVsaW5lIEFjdGlvbnNcbiAqXG4gKiBJZiB5b3UgaGF2ZSBzcGVjaWZpYyB0eXBlcyBvZiBBY3Rpb25zIHlvdSB3YW50IHRvIGFkZCB0byBhXG4gKiBDb2RlUGlwZWxpbmUsIHdyaXRlIGEgc3ViY2xhc3Mgb2YgYFN0ZXBgIHRoYXQgaW1wbGVtZW50cyB0aGlzXG4gKiBpbnRlcmZhY2UsIGFuZCBhZGQgdGhlIGFjdGlvbiBvciBhY3Rpb25zIHlvdSB3YW50IGluIHRoZSBgcHJvZHVjZWAgbWV0aG9kLlxuICpcbiAqIFRoZXJlIG5lZWRzIHRvIGJlIGEgbGV2ZWwgb2YgaW5kaXJlY3Rpb24gaGVyZSwgYmVjYXVzZSBzb21lIGFzcGVjdHMgb2YgdGhlXG4gKiBBY3Rpb24gY3JlYXRpb24gbmVlZCB0byBiZSBjb250cm9sbGVkIGJ5IHRoZSB3b3JrZmxvdyBlbmdpbmUgKG5hbWUgYW5kXG4gKiBydW5PcmRlcikuIEFsbCB0aGUgcmVzdCBvZiB0aGUgcHJvcGVydGllcyBhcmUgY29udHJvbGxlZCBieSB0aGUgZmFjdG9yeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29kZVBpcGVsaW5lQWN0aW9uRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGRlc2lyZWQgQWN0aW9uIGFuZCBhZGQgaXQgdG8gdGhlIHBpcGVsaW5lXG4gICAqL1xuICBwcm9kdWNlQWN0aW9uKHN0YWdlOiBjcC5JU3RhZ2UsIG9wdGlvbnM6IFByb2R1Y2VBY3Rpb25PcHRpb25zKTogQ29kZVBpcGVsaW5lQWN0aW9uRmFjdG9yeVJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgcmVzdWx0IG9mIGFkZGluZyBhY3Rpb25zIHRvIHRoZSBwaXBlbGluZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvZGVQaXBlbGluZUFjdGlvbkZhY3RvcnlSZXN1bHQge1xuICAvKipcbiAgICogSG93IG1hbnkgUnVuT3JkZXJzIHdlcmUgY29uc3VtZWRcbiAgICpcbiAgICogSWYgeW91IGFkZCAxIGFjdGlvbiwgcmV0dXJuIHRoZSB2YWx1ZSAxIGhlcmUuXG4gICAqL1xuICByZWFkb25seSBydW5PcmRlcnNDb25zdW1lZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJZiBhIENvZGVCdWlsZCBwcm9qZWN0IGdvdCBjcmVhdGVkLCB0aGUgcHJvamVjdFxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFRoaXMgZmFjdG9yeSBkaWQgbm90IGNyZWF0ZSBhIENvZGVCdWlsZCBwcm9qZWN0XG4gICAqL1xuICByZWFkb25seSBwcm9qZWN0PzogY2IuSVByb2plY3Q7XG59Il19