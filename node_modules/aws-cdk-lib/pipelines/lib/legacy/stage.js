"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackOutput = exports.CdkStage = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const codebuild = require("../../../aws-codebuild");
const cpactions = require("../../../aws-codepipeline-actions");
const aws_codepipeline_actions_1 = require("../../../aws-codepipeline-actions");
const core_1 = require("../../../core");
const constructs_1 = require("constructs");
const actions_1 = require("./actions");
const pipeline_1 = require("./pipeline");
const asset_type_1 = require("../blueprint/asset-type");
const application_security_check_1 = require("../private/application-security-check");
const asset_manifest_1 = require("../private/asset-manifest");
const construct_internals_1 = require("../private/construct-internals");
const toposort_1 = require("../private/toposort");
/**
 * Stage in a CdkPipeline
 *
 * You don't need to instantiate this class directly. Use
 * `cdkPipeline.addStage()` instead.
 *
 * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead
 */
class CdkStage extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this._nextSequentialRunOrder = 1; // Must start at 1 eh
        this._manualApprovalCounter = 1;
        this.stacksToDeploy = new Array();
        this._prepared = false;
        if (scope instanceof pipeline_1.CdkPipeline) {
            this.pipeline = scope;
        }
        this.stageName = props.stageName;
        this.pipelineStage = props.pipelineStage;
        this.cloudAssemblyArtifact = props.cloudAssemblyArtifact;
        this.host = props.host;
        this.confirmBroadeningPermissions = props.confirmBroadeningPermissions ?? false;
        this.securityNotificationTopic = props.securityNotificationTopic;
        core_1.Aspects.of(this).add({ visit: () => this.prepareStage() });
    }
    /**
     * Add all stacks in the application Stage to this stage
     *
     * The application construct should subclass `Stage` and can contain any
     * number of `Stacks` inside it that may have dependency relationships
     * on one another.
     *
     * All stacks in the application will be deployed in the appropriate order,
     * and all assets found in the application will be added to the asset
     * publishing stage.
     */
    addApplication(appStage, options = {}) {
        const asm = (0, construct_internals_1.pipelineSynth)(appStage);
        const extraRunOrderSpace = options.extraRunOrderSpace ?? 0;
        if (options.confirmBroadeningPermissions ?? this.confirmBroadeningPermissions) {
            this.addSecurityCheck(appStage, options);
        }
        if (asm.stacks.length === 0) {
            // If we don't check here, a more puzzling "stage contains no actions"
            // error will be thrown come deployment time.
            throw new Error(`The given Stage construct ('${appStage.node.path}') should contain at least one Stack`);
        }
        const sortedTranches = (0, toposort_1.topologicalSort)(asm.stacks, stack => stack.id, stack => stack.dependencies.map(d => d.id));
        for (const stacks of sortedTranches) {
            const runOrder = this.nextSequentialRunOrder(extraRunOrderSpace + 2); // 2 actions for Prepare/Execute ChangeSet
            let executeRunOrder = runOrder + extraRunOrderSpace + 1;
            // If we need to insert a manual approval action, then what's the executeRunOrder
            // now is where we add a manual approval step, and we allocate 1 more runOrder
            // for the execute.
            if (options.manualApprovals) {
                this.addManualApprovalAction({ runOrder: runOrder + 1 });
                executeRunOrder = this.nextSequentialRunOrder();
            }
            // These don't have a dependency on each other, so can all be added in parallel
            for (const stack of stacks) {
                this.addStackArtifactDeployment(stack, { runOrder, executeRunOrder });
            }
        }
    }
    /**
     * Get a cached version of an ApplicationSecurityCheck, which consists of:
     *  - CodeBuild Project to check for security changes in a stage
     *  - Lambda Function that approves the manual approval if no security changes are detected
     *
     * The ApplicationSecurityCheck is cached from the pipeline **if** this stage is scoped
     * to a CDK Pipeline. If this stage **is not** scoped to a pipeline, create an ApplicationSecurityCheck
     * scoped to the stage itself.
     *
     * @internal
     */
    getApplicationSecurityCheck() {
        if (this._applicationSecurityCheck) {
            return this._applicationSecurityCheck;
        }
        this._applicationSecurityCheck = this.pipeline
            ? this.pipeline._getApplicationSecurityCheck()
            : new application_security_check_1.ApplicationSecurityCheck(this, 'StageApplicationSecurityCheck', {
                codePipeline: this.pipelineStage.pipeline,
            });
        return this._applicationSecurityCheck;
    }
    /**
     * Add a deployment action based on a stack artifact
     */
    addStackArtifactDeployment(stackArtifact, options = {}) {
        // Get all assets manifests and add the assets in 'em to the asset publishing stage.
        this.publishAssetDependencies(stackArtifact);
        // Remember for later, see 'prepare()'
        // We know that deploying a stack is going to take up 2 runorder slots later on.
        const runOrder = options.runOrder ?? this.nextSequentialRunOrder(2);
        const executeRunOrder = options.executeRunOrder ?? runOrder + 1;
        this.stacksToDeploy.push({
            prepareRunOrder: runOrder,
            executeRunOrder,
            stackArtifact,
        });
        this.advanceRunOrderPast(runOrder);
        this.advanceRunOrderPast(executeRunOrder);
    }
    /**
     * Add a manual approval action
     *
     * If you need more flexibility than what this method offers,
     * use `addAction` with a `ManualApprovalAction`.
     */
    addManualApprovalAction(options = {}) {
        let actionName = options.actionName;
        if (!actionName) {
            actionName = `ManualApproval${this._manualApprovalCounter > 1 ? this._manualApprovalCounter : ''}`;
            this._manualApprovalCounter += 1;
        }
        this.addActions(new cpactions.ManualApprovalAction({
            actionName,
            runOrder: options.runOrder ?? this.nextSequentialRunOrder(),
        }));
    }
    /**
     * Add one or more CodePipeline Actions
     *
     * You need to make sure it is created with the right runOrder. Call `nextSequentialRunOrder()`
     * for every action to get actions to execute in sequence.
     */
    addActions(...actions) {
        for (const action of actions) {
            this.pipelineStage.addAction(action);
        }
    }
    /**
     * Return the runOrder number necessary to run the next Action in sequence with the rest
     *
     * FIXME: This is here because Actions are immutable and can't be reordered
     * after creation, nor is there a way to specify relative priorities, which
     * is a limitation that we should take away in the base library.
     */
    nextSequentialRunOrder(count = 1) {
        const ret = this._nextSequentialRunOrder;
        this._nextSequentialRunOrder += count;
        return ret;
    }
    /**
     * Whether this Stage contains an action to deploy the given stack, identified by its artifact ID
     */
    deploysStack(artifactId) {
        return this.stacksToDeploy.map(s => s.stackArtifact.id).includes(artifactId);
    }
    /**
     * Actually add all the DeployStack actions to the stage.
     *
     * We do this late because before we can render the actual DeployActions,
     * we need to know whether or not we need to capture the stack outputs.
     *
     * FIXME: This is here because Actions are immutable and can't be reordered
     * after creation, nor is there a way to specify relative priorities, which
     * is a limitation that we should take away in the base library.
     */
    prepareStage() {
        // FIXME: Make sure this only gets run once. There seems to be an issue in the reconciliation
        // loop that may trigger this more than once if it throws an error somewhere, and the exception
        // that gets thrown here will then override the actual failure.
        if (this._prepared) {
            return;
        }
        this._prepared = true;
        for (const { prepareRunOrder, stackArtifact, executeRunOrder } of this.stacksToDeploy) {
            const artifact = this.host.stackOutputArtifact(stackArtifact.id);
            this.pipelineStage.addAction(actions_1.DeployCdkStackAction.fromStackArtifact(this, stackArtifact, {
                baseActionName: this.simplifyStackName(stackArtifact.stackName),
                cloudAssemblyInput: this.cloudAssemblyArtifact,
                output: artifact,
                outputFileName: artifact ? 'outputs.json' : undefined,
                prepareRunOrder,
                executeRunOrder,
            }));
        }
    }
    /**
     * Advance the runorder counter so that the next sequential number is higher than the given one
     */
    advanceRunOrderPast(lastUsed) {
        this._nextSequentialRunOrder = Math.max(lastUsed + 1, this._nextSequentialRunOrder);
    }
    /**
     * Simplify the stack name by removing the `Stage-` prefix if it exists.
     */
    simplifyStackName(s) {
        return stripPrefix(s, `${this.stageName}-`);
    }
    /**
     * Add a security check before the prepare/deploy actions of an CDK stage.
     * The security check consists of two actions:
     *  - CodeBuild Action to check for security changes in a stage
     *  - Manual Approval Action that is auto approved via a Lambda if no security changes detected
     */
    addSecurityCheck(appStage, options) {
        const { cdkDiffProject } = this.getApplicationSecurityCheck();
        const notificationTopic = options?.securityNotificationTopic ?? this.securityNotificationTopic;
        notificationTopic?.grantPublish(cdkDiffProject);
        const appStageName = appStage.stageName;
        const approveActionName = `${appStageName}ManualApproval`;
        const diffAction = new aws_codepipeline_actions_1.CodeBuildAction({
            runOrder: this.nextSequentialRunOrder(),
            actionName: `${appStageName}SecurityCheck`,
            input: this.cloudAssemblyArtifact,
            project: cdkDiffProject,
            variablesNamespace: `${appStageName}SecurityCheck`,
            environmentVariables: {
                STAGE_PATH: {
                    value: constructs_1.Node.of(appStage).path,
                    type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                },
                STAGE_NAME: {
                    value: this.stageName,
                    type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                },
                ACTION_NAME: {
                    value: approveActionName,
                    type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                },
                ...notificationTopic ? {
                    NOTIFICATION_ARN: {
                        value: notificationTopic.topicArn,
                        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                    },
                    NOTIFICATION_SUBJECT: {
                        value: `Confirm permission broadening in ${appStageName}`,
                        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                    },
                } : {},
            },
        });
        const approve = new cpactions.ManualApprovalAction({
            actionName: approveActionName,
            runOrder: this.nextSequentialRunOrder(),
            additionalInformation: `#{${appStageName}SecurityCheck.MESSAGE}`,
            externalEntityLink: `#{${appStageName}SecurityCheck.LINK}`,
        });
        this.addActions(diffAction, approve);
    }
    /**
     * Make sure all assets depended on by this stack are published in this pipeline
     *
     * Taking care to exclude the stack template itself -- it is being published
     * as an asset because the CLI needs to know the asset publishing role when
     * pushing the template to S3, but in the case of CodePipeline we always
     * reference the template from the artifact bucket.
     *
     * (NOTE: this is only true for top-level stacks, not nested stacks. Nested
     * Stack templates are always published as assets).
     */
    publishAssetDependencies(stackArtifact) {
        const assetManifests = stackArtifact.dependencies.filter(isAssetManifest);
        for (const manifestArtifact of assetManifests) {
            const manifest = asset_manifest_1.AssetManifestReader.fromFile(manifestArtifact.file);
            for (const entry of manifest.entries) {
                let assetType;
                if (entry instanceof asset_manifest_1.DockerImageManifestEntry) {
                    assetType = asset_type_1.AssetType.DOCKER_IMAGE;
                }
                else if (entry instanceof asset_manifest_1.FileManifestEntry) {
                    // Don't publish the template for this stack
                    if (entry.source.packaging === 'file' && entry.source.path === stackArtifact.templateFile) {
                        continue;
                    }
                    assetType = asset_type_1.AssetType.FILE;
                }
                else {
                    throw new Error(`Unrecognized asset type: ${entry.type}`);
                }
                if (!entry.destination.assumeRoleArn) {
                    throw new Error('assumeRoleArn is missing on asset and required');
                }
                this.host.publishAsset({
                    assetManifestPath: manifestArtifact.file,
                    assetId: entry.id.assetId,
                    assetSelector: entry.id.toString(),
                    assetType,
                    assetPublishingRoleArn: entry.destination.assumeRoleArn,
                });
            }
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
CdkStage[_a] = { fqn: "aws-cdk-lib.pipelines.CdkStage", version: "2.75.1" };
exports.CdkStage = CdkStage;
/**
 * A single output of a Stack
 *
 * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead
 */
class StackOutput {
    /**
     * Build a StackOutput from a known artifact and an output name
     */
    constructor(artifactFile, outputName) {
        this.artifactFile = artifactFile;
        this.outputName = outputName;
    }
}
_b = JSII_RTTI_SYMBOL_1;
StackOutput[_b] = { fqn: "aws-cdk-lib.pipelines.StackOutput", version: "2.75.1" };
exports.StackOutput = StackOutput;
function stripPrefix(s, prefix) {
    return s.startsWith(prefix) ? s.slice(prefix.length) : s;
}
function isAssetManifest(s) {
    // instanceof is too risky, and we're at a too late stage to properly fix.
    // return s instanceof cxapi.AssetManifestArtifact;
    return s.constructor.name === 'AssetManifestArtifact';
}
//# sourceMappingURL=data:application/json;base64,