"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGraph = exports.GraphNodeCollection = exports.Graph = exports.DependencyBuilders = exports.DependencyBuilder = exports.GraphNode = void 0;
/**
 * A library for nested graphs
 */
const toposort_1 = require("./toposort");
const javascript_1 = require("../private/javascript");
class GraphNode {
    static of(id, data) {
        return new GraphNode(id, { data });
    }
    constructor(id, props = {}) {
        this.id = id;
        this.dependencies = [];
        this.data = props.data;
    }
    /**
     * A graph-wide unique identifier for this node. Rendered by joining the IDs
     * of all ancestors with hyphens.
     */
    get uniqueId() {
        return this.ancestorPath(this.root).map(x => x.id).join('-');
    }
    /**
     * The union of all dependencies of this node and the dependencies of all
     * parent graphs.
     */
    get allDeps() {
        const fromParent = this.parentGraph?.allDeps ?? [];
        return Array.from(new Set([...this.dependencies, ...fromParent]));
    }
    dependOn(...dependencies) {
        if (dependencies.includes(this)) {
            throw new Error(`Cannot add dependency on self: ${this}`);
        }
        this.dependencies.push(...dependencies.filter(javascript_1.isDefined));
    }
    ancestorPath(upTo) {
        let x = this;
        const ret = [x];
        while (x.parentGraph && x.parentGraph !== upTo) {
            x = x.parentGraph;
            ret.unshift(x);
        }
        return ret;
    }
    rootPath() {
        let x = this;
        const ret = [x];
        while (x.parentGraph) {
            x = x.parentGraph;
            ret.unshift(x);
        }
        return ret;
    }
    get root() {
        let x = this;
        while (x.parentGraph) {
            x = x.parentGraph;
        }
        return x;
    }
    get rootGraph() {
        const root = this.root;
        if (!(root instanceof Graph)) {
            throw new Error(`Expecting a graph as root, got: ${root}`);
        }
        return root;
    }
    get parentGraph() {
        return this._parentGraph;
    }
    /**
     * @internal
     */
    _setParentGraph(parentGraph) {
        if (this._parentGraph) {
            throw new Error('Node already has a parent');
        }
        this._parentGraph = parentGraph;
    }
    toString() {
        return `${this.constructor.name}(${this.id})`;
    }
}
exports.GraphNode = GraphNode;
/**
 * A dependency set that is constructed over time
 *
 * It doesn't matter in what order sources and targets for the dependency
 * relationship(s) get added. This class can serve as a synchronization
 * point if the order in which graph nodes get added to the graph is not
 * well-defined.
 *
 * You can think of a DependencyBuilder as a vertex that doesn't actually exist in the tree:
 *
 *     ┌────┐               ┌────┐
 *     │ P1 │◀─┐         ┌──│ S1 │
 *     └────┘  │   .─.   │  └────┘
 *             ├──( B )◀─┤
 *     ┌────┐  │   `─'   │  ┌────┐
 *     │ P2 │◀─┘         └──│ S2 │
 *     └────┘               └────┘
 *
 * Ultimately leads to: { S1 -> P1, S1 -> P2, S2 -> P1, S2 -> P2 }.
 */
class DependencyBuilder {
    constructor() {
        this._producers = [];
        this._consumers = [];
    }
    /**
     * Add a producer: make all nodes added by 'dependBy' depend on these
     */
    dependOn(...targets) {
        for (const target of targets) {
            for (const source of this._consumers) {
                source.dependOn(target);
            }
            this._producers.push(target);
        }
        return this;
    }
    /**
     * Add a consumer: make these nodes depend on all nodes added by 'dependOn'.
     */
    dependBy(...sources) {
        for (const source of sources) {
            for (const target of this._producers) {
                source.dependOn(target);
            }
            this._consumers.push(source);
        }
        return this;
    }
    /**
     * Whether there are any consumers (nodes added by 'dependBy') but no producers (nodes added by 'dependOn')
     */
    get hasUnsatisfiedConsumers() {
        return this._consumers.length > 0 && this._producers.length === 0;
    }
    get consumers() {
        return this._consumers;
    }
    consumersAsString() {
        return this.consumers.map(c => `${c}`).join(',');
    }
}
exports.DependencyBuilder = DependencyBuilder;
/**
 * A set of dependency builders identified by a given key.
 */
class DependencyBuilders {
    constructor() {
        this.builders = new Map();
    }
    for(key) {
        const b = this.builders.get(key);
        if (b) {
            return b;
        }
        const ret = new DependencyBuilder();
        this.builders.set(key, ret);
        return ret;
    }
    /**
     * @deprecated Use 'for'
     */
    get(key) {
        return this.for(key);
    }
    unsatisfiedBuilders() {
        const ret = new Array();
        for (const [k, builder] of this.builders.entries()) {
            if (builder.hasUnsatisfiedConsumers) {
                ret.push([k, builder]);
            }
        }
        return ret;
    }
}
exports.DependencyBuilders = DependencyBuilders;
class Graph extends GraphNode {
    static of(id, data, nodes) {
        return new Graph(id, { data, nodes });
    }
    constructor(name, props = {}) {
        super(name, props);
        this.children = new Map();
        if (props.nodes) {
            this.add(...props.nodes);
        }
    }
    get nodes() {
        return new Set(this.children.values());
    }
    tryGetChild(name) {
        return this.children.get(name);
    }
    contains(node) {
        return this.nodes.has(node);
    }
    add(...nodes) {
        for (const node of nodes) {
            node._setParentGraph(this);
            if (this.children.has(node.id)) {
                throw new Error(`Node with duplicate id: ${node.id}`);
            }
            this.children.set(node.id, node);
        }
    }
    absorb(other) {
        this.add(...other.nodes);
    }
    /**
     * Return topologically sorted tranches of nodes at this graph level
     */
    sortedChildren(fail = true) {
        // Project dependencies to current children
        const nodes = this.nodes;
        const projectedDependencies = projectDependencies(this.deepDependencies(), (node) => {
            while (!nodes.has(node) && node.parentGraph) {
                node = node.parentGraph;
            }
            return nodes.has(node) ? [node] : [];
        });
        return (0, toposort_1.topoSort)(nodes, projectedDependencies, fail);
    }
    /**
     * Return a topologically sorted list of non-Graph nodes in the entire subgraph
     */
    sortedLeaves() {
        // Project dependencies to leaf nodes
        const descendantsMap = new Map();
        findDescendants(this);
        function findDescendants(node) {
            const ret = [];
            if (node instanceof Graph) {
                for (const child of node.nodes) {
                    ret.push(...findDescendants(child));
                }
            }
            else {
                ret.push(node);
            }
            descendantsMap.set(node, ret);
            return ret;
        }
        const projectedDependencies = projectDependencies(this.deepDependencies(), (node) => descendantsMap.get(node) ?? []);
        return (0, toposort_1.topoSort)(new Set(projectedDependencies.keys()), projectedDependencies);
    }
    render() {
        const lines = new Array();
        recurse(this, '', true);
        return lines.join('\n');
        function recurse(x, indent, last) {
            const bullet = last ? '└─' : '├─';
            const follow = last ? '  ' : '│ ';
            lines.push(`${indent} ${bullet} ${x}${depString(x)}`);
            if (x instanceof Graph) {
                let i = 0;
                const sortedNodes = Array.prototype.concat.call([], ...x.sortedChildren(false));
                for (const child of sortedNodes) {
                    recurse(child, `${indent} ${follow} `, i++ == x.nodes.size - 1);
                }
            }
        }
        function depString(node) {
            if (node.dependencies.length > 0) {
                return ` -> ${Array.from(node.dependencies).join(', ')}`;
            }
            return '';
        }
    }
    renderDot() {
        const lines = new Array();
        lines.push('digraph G {');
        lines.push('  # Arrows represent an "unlocks" relationship (opposite of dependency). So chosen');
        lines.push('  # because the layout looks more natural that way.');
        lines.push('  # To represent subgraph dependencies, subgraphs are represented by BEGIN/END nodes.');
        lines.push('  # To render: `dot -Tsvg input.dot > graph.svg`, open in a browser.');
        lines.push('  node [shape="box"];');
        for (const child of this.nodes) {
            recurse(child);
        }
        lines.push('}');
        return lines.join('\n');
        function recurse(node) {
            let dependencySource;
            if (node instanceof Graph) {
                lines.push(`${graphBegin(node)} [shape="cds", style="filled", fillcolor="#b7deff"];`);
                lines.push(`${graphEnd(node)} [shape="cds", style="filled", fillcolor="#b7deff"];`);
                dependencySource = graphBegin(node);
            }
            else {
                dependencySource = nodeLabel(node);
                lines.push(`${nodeLabel(node)};`);
            }
            for (const dep of node.dependencies) {
                const dst = dep instanceof Graph ? graphEnd(dep) : nodeLabel(dep);
                lines.push(`${dst} -> ${dependencySource};`);
            }
            if (node instanceof Graph && node.nodes.size > 0) {
                for (const child of node.nodes) {
                    recurse(child);
                }
                // Add dependency arrows between the "subgraph begin" and the first rank of
                // the children, and the last rank of the children and "subgraph end" nodes.
                const sortedChildren = node.sortedChildren(false);
                for (const first of sortedChildren[0]) {
                    const src = first instanceof Graph ? graphBegin(first) : nodeLabel(first);
                    lines.push(`${graphBegin(node)} -> ${src};`);
                }
                for (const last of sortedChildren[sortedChildren.length - 1]) {
                    const dst = last instanceof Graph ? graphEnd(last) : nodeLabel(last);
                    lines.push(`${dst} -> ${graphEnd(node)};`);
                }
            }
        }
        function id(node) {
            return node.rootPath().slice(1).map(n => n.id).join('.');
        }
        function nodeLabel(node) {
            return `"${id(node)}"`;
        }
        function graphBegin(node) {
            return `"BEGIN ${id(node)}"`;
        }
        function graphEnd(node) {
            return `"END ${id(node)}"`;
        }
    }
    consoleLog(_indent = 0) {
        process.stdout.write(this.render() + '\n');
    }
    /**
     * Return the union of all dependencies of the descendants of this graph
     */
    deepDependencies() {
        const ret = new Map();
        for (const node of this.nodes) {
            recurse(node);
        }
        return ret;
        function recurse(node) {
            let deps = ret.get(node);
            if (!deps) {
                ret.set(node, deps = new Set());
            }
            for (let dep of node.dependencies) {
                deps.add(dep);
            }
            if (node instanceof Graph) {
                for (const child of node.nodes) {
                    recurse(child);
                }
            }
        }
    }
    /**
     * Return all non-Graph nodes
     */
    allLeaves() {
        const ret = [];
        recurse(this);
        return new GraphNodeCollection(ret);
        function recurse(node) {
            if (node instanceof Graph) {
                for (const child of node.nodes) {
                    recurse(child);
                }
            }
            else {
                ret.push(node);
            }
        }
    }
}
exports.Graph = Graph;
/**
 * A collection of graph nodes
 */
class GraphNodeCollection {
    constructor(nodes) {
        this.nodes = Array.from(nodes);
    }
    /**
     * Add one or more dependencies to all nodes in the collection
     */
    dependOn(...dependencies) {
        for (const node of this.nodes) {
            node.dependOn(...dependencies.filter(javascript_1.isDefined));
        }
    }
    /**
     * Return the topographically first node in the collection
     */
    first() {
        const nodes = new Set(this.nodes);
        const sorted = this.nodes[0].rootGraph.sortedLeaves();
        for (const tranche of sorted) {
            for (const node of tranche) {
                if (nodes.has(node)) {
                    return node;
                }
            }
        }
        throw new Error(`Could not calculate first node between ${this}`);
    }
    /**
    * Returns the graph node that's shared between these nodes
    */
    commonAncestor() {
        const paths = new Array();
        for (const x of this.nodes) {
            paths.push(x.rootPath());
        }
        if (paths.length === 0) {
            throw new Error('Cannot find common ancestor between an empty set of nodes');
        }
        if (paths.length === 1) {
            const path = paths[0];
            if (path.length < 2) {
                throw new Error(`Cannot find ancestor of node without ancestor: ${path[0]}`);
            }
            return path[path.length - 2];
        }
        const originalPaths = [...paths];
        // Remove the first element of every path as long as the 2nd elements are all
        // the same -- this leaves the shared element in first place.
        //
        //   A, B, C, 1, 2    }---> C
        //   A, B, C, 3       }
        while (paths.every(path => paths[0].length >= 2 && path.length >= 2 && path[1] === paths[0][1])) {
            for (const path of paths) {
                path.shift();
            }
        }
        // If any of the paths are left with 1 element, there's no shared parent.
        if (paths.some(path => path.length < 2)) {
            throw new Error(`Could not determine a shared parent between nodes: ${originalPaths.map(nodes => nodes.map(n => n.id).join('/'))}`);
        }
        return paths[0][0];
    }
    toString() {
        return this.nodes.map(n => `${n}`).join(', ');
    }
}
exports.GraphNodeCollection = GraphNodeCollection;
/**
 * Dependency map of nodes in this graph, taking into account dependencies between nodes in subgraphs
 *
 * Guaranteed to return an entry in the map for every node in the current graph.
 */
function projectDependencies(dependencies, project) {
    // Project keys
    for (const node of dependencies.keys()) {
        const projectedNodes = project(node);
        if (projectedNodes.length === 1 && projectedNodes[0] === node) {
            continue;
        } // Nothing to do, just for efficiency
        const deps = (0, javascript_1.extract)(dependencies, node);
        for (const projectedNode of projectedNodes) {
            (0, javascript_1.addAll)(dependencies.get(projectedNode), deps);
        }
    }
    // Project values. Ignore self-dependencies, they were just between nodes that were collapsed into the same node.
    for (const [node, deps] of dependencies.entries()) {
        const depset = new Set((0, javascript_1.flatMap)(deps, project));
        depset.delete(node);
        dependencies.set(node, depset);
    }
    return dependencies;
}
function isGraph(x) {
    return x instanceof Graph;
}
exports.isGraph = isGraph;
//# sourceMappingURL=data:application/json;base64,