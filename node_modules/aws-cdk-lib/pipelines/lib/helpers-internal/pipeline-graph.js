"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineGraph = void 0;
const graph_1 = require("./graph");
const pipeline_queries_1 = require("./pipeline-queries");
const blueprint_1 = require("../blueprint");
/**
 * Logic to turn the deployment blueprint into a graph
 *
 * This code makes all the decisions on how to lay out the CodePipeline
 */
class PipelineGraph {
    constructor(pipeline, props = {}) {
        this.pipeline = pipeline;
        this.graph = graph_1.Graph.of('', { type: 'group' });
        this.added = new Map();
        this.assetNodes = new Map();
        this.assetNodesByType = new Map();
        this.stackOutputDependencies = new graph_1.DependencyBuilders();
        /** Mapping steps to depbuilders, satisfied by the step itself  */
        this.nodeDependencies = new graph_1.DependencyBuilders();
        this._fileAssetCtr = 0;
        this._dockerAssetCtr = 0;
        this.publishTemplate = props.publishTemplate ?? false;
        this.prepareStep = props.prepareStep ?? true;
        this.singlePublisher = props.singlePublisherPerAssetType ?? false;
        this.queries = new pipeline_queries_1.PipelineQueries(pipeline);
        if (pipeline.synth instanceof blueprint_1.Step) {
            this.synthNode = this.addBuildStep(pipeline.synth);
            if (this.synthNode?.data?.type === 'step') {
                this.synthNode.data.isBuildStep = true;
            }
        }
        this.lastPreparationNode = this.synthNode;
        const cloudAssembly = pipeline.synth.primaryOutput?.primaryOutput;
        if (!cloudAssembly) {
            throw new Error(`The synth step must produce the cloud assembly artifact, but doesn't: ${pipeline.synth}`);
        }
        this.cloudAssemblyFileSet = cloudAssembly;
        if (props.selfMutation) {
            const stage = graph_1.Graph.of('UpdatePipeline', { type: 'group' });
            this.graph.add(stage);
            this.selfMutateNode = aGraphNode('SelfMutate', { type: 'self-update' });
            stage.add(this.selfMutateNode);
            this.selfMutateNode.dependOn(this.synthNode);
            this.lastPreparationNode = this.selfMutateNode;
        }
        const waves = pipeline.waves.map(w => this.addWave(w));
        // Make sure the waves deploy sequentially
        for (let i = 1; i < waves.length; i++) {
            waves[i].dependOn(waves[i - 1]);
        }
        this.addMissingDependencyNodes();
    }
    isSynthNode(node) {
        return this.synthNode === node;
    }
    addBuildStep(step) {
        return this.addStepNode(step, this.topLevelGraph('Build'));
    }
    addWave(wave) {
        // If the wave only has one Stage in it, don't add an additional Graph around it
        const retGraph = wave.stages.length === 1
            ? this.addStage(wave.stages[0])
            : graph_1.Graph.of(wave.id, { type: 'group' }, wave.stages.map(s => this.addStage(s)));
        this.addPrePost(wave.pre, wave.post, retGraph);
        retGraph.dependOn(this.lastPreparationNode);
        this.graph.add(retGraph);
        return retGraph;
    }
    addStage(stage) {
        const retGraph = graph_1.Graph.of(stage.stageName, { type: 'group' });
        const stackGraphs = new Map();
        for (const stack of stage.stacks) {
            const stackGraph = graph_1.Graph.of(this.simpleStackName(stack.stackName, stage.stageName), { type: 'stack-group', stack });
            const prepareNode = this.prepareStep ? aGraphNode('Prepare', { type: 'prepare', stack }) : undefined;
            const deployNode = aGraphNode('Deploy', {
                type: 'execute',
                stack,
                captureOutputs: this.queries.stackOutputsReferenced(stack).length > 0,
                withoutChangeSet: prepareNode === undefined,
            });
            retGraph.add(stackGraph);
            stackGraph.add(deployNode);
            // node or node collection that represents first point of contact in each stack
            let firstDeployNode;
            if (prepareNode) {
                stackGraph.add(prepareNode);
                deployNode.dependOn(prepareNode);
                firstDeployNode = prepareNode;
            }
            else {
                firstDeployNode = deployNode;
            }
            // add changeset steps at the stack level
            if (stack.changeSet.length > 0) {
                if (prepareNode) {
                    this.addChangeSetNode(stack.changeSet, prepareNode, deployNode, stackGraph);
                }
                else {
                    throw new Error(`Cannot use \'changeSet\' steps for stack \'${stack.stackName}\': the pipeline does not support them or they have been disabled`);
                }
            }
            // add pre and post steps at the stack level
            const preNodes = this.addPrePost(stack.pre, stack.post, stackGraph);
            if (preNodes.nodes.length > 0) {
                firstDeployNode = preNodes;
            }
            stackGraphs.set(stack, stackGraph);
            const cloudAssembly = this.cloudAssemblyFileSet;
            firstDeployNode.dependOn(this.addStepNode(cloudAssembly.producer, retGraph));
            // add the template asset
            if (this.publishTemplate) {
                if (!stack.templateAsset) {
                    throw new Error(`"publishTemplate" is enabled, but stack ${stack.stackArtifactId} does not have a template asset`);
                }
                firstDeployNode.dependOn(this.publishAsset(stack.templateAsset));
            }
            // Depend on Assets
            // FIXME: Custom Cloud Assembly currently doesn't actually help separating
            // out templates from assets!!!
            for (const asset of stack.assets) {
                const assetNode = this.publishAsset(asset);
                firstDeployNode.dependOn(assetNode);
            }
            // Add stack output synchronization point
            if (this.queries.stackOutputsReferenced(stack).length > 0) {
                this.stackOutputDependencies.for(stack).dependOn(deployNode);
            }
        }
        for (const stack of stage.stacks) {
            for (const dep of stack.stackDependencies) {
                const stackNode = stackGraphs.get(stack);
                const depNode = stackGraphs.get(dep);
                if (!stackNode) {
                    throw new Error(`cannot find node for ${stack.stackName}`);
                }
                if (!depNode) {
                    throw new Error(`cannot find node for ${dep.stackName}`);
                }
                stackNode.dependOn(depNode);
            }
        }
        this.addPrePost(stage.pre, stage.post, retGraph);
        return retGraph;
    }
    addChangeSetNode(changeSet, prepareNode, deployNode, graph) {
        for (const c of changeSet) {
            const changeSetNode = this.addStepNode(c, graph);
            changeSetNode?.dependOn(prepareNode);
            deployNode.dependOn(changeSetNode);
        }
    }
    addPrePost(pre, post, parent) {
        const currentNodes = new graph_1.GraphNodeCollection(parent.nodes);
        const preNodes = new graph_1.GraphNodeCollection(new Array());
        for (const p of pre) {
            const preNode = this.addStepNode(p, parent);
            currentNodes.dependOn(preNode);
            preNodes.nodes.push(preNode);
        }
        for (const p of post) {
            const postNode = this.addStepNode(p, parent);
            postNode?.dependOn(...currentNodes.nodes);
        }
        return preNodes;
    }
    topLevelGraph(name) {
        let ret = this.graph.tryGetChild(name);
        if (!ret) {
            ret = new graph_1.Graph(name);
            this.graph.add(ret);
        }
        return ret;
    }
    /**
     * Add a Node to a Graph for a given Step
     *
     * Adds all dependencies for that Node to the same Step as well.
     */
    addStepNode(step, parent) {
        if (step === PipelineGraph.NO_STEP) {
            return undefined;
        }
        const previous = this.added.get(step);
        if (previous) {
            return previous;
        }
        const node = aGraphNode(step.id, { type: 'step', step });
        // If the step is a source step, change the parent to a special "Source" stage
        // (CodePipeline wants it that way)
        if (step.isSource) {
            parent = this.topLevelGraph('Source');
        }
        parent.add(node);
        this.added.set(step, node);
        // This used to recurse -- that's not safe, because it might create nodes in the
        // wrong graph (it would create a dependency node, that might need to be created in
        // a different graph, in the current one). Instead, use DependencyBuilders.
        for (const dep of step.dependencies) {
            this.nodeDependencies.for(dep).dependBy(node);
        }
        this.nodeDependencies.for(step).dependOn(node);
        // Add stack dependencies (by use of the dependency builder this also works
        // if we encounter the Step before the Stack has been properly added yet)
        for (const output of step.consumedStackOutputs) {
            const stack = this.queries.producingStack(output);
            this.stackOutputDependencies.for(stack).dependBy(node);
        }
        return node;
    }
    /**
     * Add dependencies that aren't in the pipeline yet
     *
     * Build steps reference as many sources (or other builds) as they want, which will be added
     * automatically. Do that here. We couldn't do it earlier, because if there were dependencies
     * between steps we didn't want to reparent those unnecessarily.
     */
    addMissingDependencyNodes() {
        // May need to do this more than once to recursively add all missing producers
        let attempts = 20;
        while (attempts-- > 0) {
            const unsatisfied = this.nodeDependencies.unsatisfiedBuilders().filter(([s]) => s !== PipelineGraph.NO_STEP);
            if (unsatisfied.length === 0) {
                return;
            }
            for (const [step, builder] of unsatisfied) {
                // Add a new node for this step to the parent of the "leftmost" consumer.
                const leftMostConsumer = new graph_1.GraphNodeCollection(builder.consumers).first();
                const parent = leftMostConsumer.parentGraph;
                if (!parent) {
                    throw new Error(`Consumer doesn't have a parent graph: ${leftMostConsumer}`);
                }
                this.addStepNode(step, parent);
            }
        }
        const unsatisfied = this.nodeDependencies.unsatisfiedBuilders();
        throw new Error([
            'Recursion depth too large while adding dependency nodes:',
            unsatisfied.map(([step, builder]) => `${builder.consumersAsString()} awaiting ${step}.`),
        ].join(' '));
    }
    publishAsset(stackAsset) {
        const assetsGraph = this.topLevelGraph('Assets');
        let assetNode = this.assetNodes.get(stackAsset.assetId);
        if (assetNode) {
            // If there's already a node publishing this asset, add as a new publishing
            // destination to the same node.
        }
        else if (this.singlePublisher && this.assetNodesByType.has(stackAsset.assetType)) {
            // If we're doing a single node per type, lookup by that
            assetNode = this.assetNodesByType.get(stackAsset.assetType);
        }
        else {
            // Otherwise add a new one
            const id = stackAsset.assetType === blueprint_1.AssetType.FILE
                ? (this.singlePublisher ? 'FileAsset' : `FileAsset${++this._fileAssetCtr}`)
                : (this.singlePublisher ? 'DockerAsset' : `DockerAsset${++this._dockerAssetCtr}`);
            assetNode = aGraphNode(id, { type: 'publish-assets', assets: [] });
            assetsGraph.add(assetNode);
            assetNode.dependOn(this.lastPreparationNode);
            this.assetNodesByType.set(stackAsset.assetType, assetNode);
            this.assetNodes.set(stackAsset.assetId, assetNode);
        }
        const data = assetNode.data;
        if (data?.type !== 'publish-assets') {
            throw new Error(`${assetNode} has the wrong data.type: ${data?.type}`);
        }
        if (!data.assets.some(a => a.assetSelector === stackAsset.assetSelector)) {
            data.assets.push(stackAsset);
        }
        return assetNode;
    }
    /**
     * Simplify the stack name by removing the `Stage-` prefix if it exists.
     */
    simpleStackName(stackName, stageName) {
        return stripPrefix(stackName, `${stageName}-`);
    }
}
/**
 * A Step object that may be used as the producer of FileSets that should not be represented in the graph
 */
PipelineGraph.NO_STEP = new class extends blueprint_1.Step {
}('NO_STEP');
exports.PipelineGraph = PipelineGraph;
function aGraphNode(id, x) {
    return graph_1.GraphNode.of(id, x);
}
function stripPrefix(s, prefix) {
    return s.startsWith(prefix) ? s.slice(prefix.length) : s;
}
//# sourceMappingURL=data:application/json;base64,