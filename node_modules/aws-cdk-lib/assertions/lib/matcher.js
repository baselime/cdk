"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchResult = exports.Matcher = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Represents a matcher that can perform special data matching
 * capabilities between a given pattern and a target.
 */
class Matcher {
    /**
     * Check whether the provided object is a subtype of the `IMatcher`.
     */
    static isMatcher(x) {
        return x && x instanceof Matcher;
    }
}
_a = JSII_RTTI_SYMBOL_1;
Matcher[_a] = { fqn: "aws-cdk-lib.assertions.Matcher", version: "2.75.1" };
exports.Matcher = Matcher;
/**
 * The result of `Match.test()`.
 */
class MatchResult {
    constructor(target) {
        this.failuresHere = new Map();
        this.captures = new Map();
        this.finalized = false;
        this.innerMatchFailures = new Map();
        this._hasFailed = false;
        this._failCount = 0;
        this._cost = 0;
        this.target = target;
    }
    /**
     * DEPRECATED
     * @deprecated use recordFailure()
     */
    push(matcher, path, message) {
        try {
            jsiiDeprecationWarnings.print("aws-cdk-lib.assertions.MatchResult#push", "use recordFailure()");
            jsiiDeprecationWarnings.aws_cdk_lib_assertions_Matcher(matcher);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.push);
            }
            throw error;
        }
        return this.recordFailure({ matcher, path, message });
    }
    /**
     * Record a new failure into this result at a specific path.
     */
    recordFailure(failure) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_assertions_MatchFailure(failure);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.recordFailure);
            }
            throw error;
        }
        const failKey = failure.path.join('.');
        let list = this.failuresHere.get(failKey);
        if (!list) {
            list = [];
            this.failuresHere.set(failKey, list);
        }
        this._failCount += 1;
        this._cost += failure.cost ?? 1;
        list.push(failure);
        this._hasFailed = true;
        return this;
    }
    /** Whether the match is a success */
    get isSuccess() {
        return !this._hasFailed;
    }
    /** Does the result contain any failures. If not, the result is a success */
    hasFailed() {
        return this._hasFailed;
    }
    /** The number of failures */
    get failCount() {
        return this._failCount;
    }
    /** The cost of the failures so far */
    get failCost() {
        return this._cost;
    }
    /**
     * Compose the results of a previous match as a subtree.
     * @param id the id of the parent tree.
     */
    compose(id, inner) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_assertions_MatchResult(inner);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.compose);
            }
            throw error;
        }
        // Record inner failure
        if (inner.hasFailed()) {
            this._hasFailed = true;
            this._failCount += inner.failCount;
            this._cost += inner._cost;
            this.innerMatchFailures.set(id, inner);
        }
        // Copy captures so we all finalize them together
        inner.captures.forEach((vals, capture) => {
            vals.forEach(value => this.recordCapture({ capture, value }));
        });
        return this;
    }
    /**
     * Prepare the result to be analyzed.
     * This API *must* be called prior to analyzing these results.
     */
    finished() {
        if (this.finalized) {
            return this;
        }
        if (this.failCount === 0) {
            this.captures.forEach((vals, cap) => cap._captured.push(...vals));
        }
        this.finalized = true;
        return this;
    }
    /**
     * Render the failed match in a presentable way
     *
     * Prefer using `renderMismatch` over this method. It is left for backwards
     * compatibility for test suites that expect it, but `renderMismatch()` will
     * produce better output.
     */
    toHumanStrings() {
        const failures = new Array();
        debugger;
        recurse(this, []);
        return failures.map(r => {
            const loc = r.path.length === 0 ? '' : ` at /${r.path.join('/')}`;
            return '' + r.message + loc + ` (using ${r.matcher.name} matcher)`;
        });
        function recurse(x, prefix) {
            for (const fail of Array.from(x.failuresHere.values()).flat()) {
                failures.push({
                    matcher: fail.matcher,
                    message: fail.message,
                    path: [...prefix, ...fail.path],
                });
            }
            for (const [key, inner] of x.innerMatchFailures.entries()) {
                recurse(inner, [...prefix, key]);
            }
        }
    }
    /**
     * Do a deep render of the match result, showing the structure mismatches in context
     */
    renderMismatch() {
        if (!this.hasFailed()) {
            return '<match>';
        }
        const parts = new Array();
        const indents = new Array();
        emitFailures(this, '');
        recurse(this);
        return moveMarkersToFront(parts.join('').trimEnd());
        // Implementation starts here.
        // Yes this is a lot of code in one place. That's a bit unfortunate, but this is
        // the simplest way to access private state of the MatchResult, that we definitely
        // do NOT want to make part of the public API.
        function emit(x) {
            if (x === undefined) {
                debugger;
            }
            parts.push(x.replace(/\n/g, `\n${indents.join('')}`));
        }
        function emitFailures(r, path, scrapSet) {
            for (const fail of r.failuresHere.get(path) ?? []) {
                emit(`!! ${fail.message}\n`);
            }
            scrapSet?.delete(path);
        }
        function recurse(r) {
            // Failures that have been reported against this MatchResult that we didn't print yet
            const remainingFailures = new Set(Array.from(r.failuresHere.keys()).filter(x => x !== ''));
            //////////////////////////////////////////////////////////////////////
            if (Array.isArray(r.target)) {
                indents.push('  ');
                emit('[\n');
                for (const [first, i] of enumFirst(range(r.target.length))) {
                    if (!first) {
                        emit(',\n');
                    }
                    emitFailures(r, `${i}`, remainingFailures);
                    const innerMatcher = r.innerMatchFailures.get(`${i}`);
                    if (innerMatcher) {
                        // Report the top-level failures on the line before the content
                        emitFailures(innerMatcher, '');
                        recurseComparingValues(innerMatcher, r.target[i]);
                    }
                    else {
                        emit(renderAbridged(r.target[i]));
                    }
                }
                emitRemaining();
                indents.pop();
                emit('\n]');
                return;
            }
            //////////////////////////////////////////////////////////////////////
            if (r.target && typeof r.target === 'object') {
                indents.push('  ');
                emit('{\n');
                const keys = Array.from(new Set([
                    ...Object.keys(r.target),
                    ...Array.from(remainingFailures),
                ])).sort();
                for (const [first, key] of enumFirst(keys)) {
                    if (!first) {
                        emit(',\n');
                    }
                    emitFailures(r, key, remainingFailures);
                    const innerMatcher = r.innerMatchFailures.get(key);
                    if (innerMatcher) {
                        // Report the top-level failures on the line before the content
                        emitFailures(innerMatcher, '');
                        emit(`${jsonify(key)}: `);
                        recurseComparingValues(innerMatcher, r.target[key]);
                    }
                    else {
                        emit(`${jsonify(key)}: `);
                        emit(renderAbridged(r.target[key]));
                    }
                }
                emitRemaining();
                indents.pop();
                emit('\n}');
                return;
            }
            //////////////////////////////////////////////////////////////////////
            emitRemaining();
            emit(jsonify(r.target));
            function emitRemaining() {
                if (remainingFailures.size > 0) {
                    emit('\n');
                }
                for (const key of remainingFailures) {
                    emitFailures(r, key);
                }
            }
        }
        /**
         * Recurse to the inner matcher, but with a twist:
         *
         * If the match result target value is not the same as the given value,
         * then the matcher is matching a transformation of the given value.
         *
         * In that case, render both.
         *
         * FIXME: All of this rendering should have been at the discretion of
         * the matcher, it shouldn't all live here.
         */
        function recurseComparingValues(inner, actualValue) {
            if (inner.target === actualValue) {
                return recurse(inner);
            }
            emit(renderAbridged(actualValue));
            emit(' <*> ');
            recurse(inner);
        }
        /**
         * Render an abridged version of a value
         */
        function renderAbridged(x) {
            if (Array.isArray(x)) {
                switch (x.length) {
                    case 0: return '[]';
                    case 1: return `[ ${renderAbridged(x[0])} ]`;
                    case 2:
                        // Render if all values are scalars
                        if (x.every(e => ['number', 'boolean', 'string'].includes(typeof e))) {
                            return `[ ${x.map(renderAbridged).join(', ')} ]`;
                        }
                        return '[ ... ]';
                    default: return '[ ... ]';
                }
            }
            if (x && typeof x === 'object') {
                const keys = Object.keys(x);
                switch (keys.length) {
                    case 0: return '{}';
                    case 1: return `{ ${JSON.stringify(keys[0])}: ${renderAbridged(x[keys[0]])} }`;
                    default: return '{ ... }';
                }
            }
            return jsonify(x);
        }
        function jsonify(x) {
            return JSON.stringify(x) ?? 'undefined';
        }
        /**
         * Move markers to the front of each line
         */
        function moveMarkersToFront(x) {
            const re = /^(\s+)!!/gm;
            return x.replace(re, (_, spaces) => `!!${spaces.substring(0, spaces.length - 2)}`);
        }
    }
    /**
     * Record a capture against in this match result.
     */
    recordCapture(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_assertions_MatchCapture(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.recordCapture);
            }
            throw error;
        }
        let values = this.captures.get(options.capture);
        if (values === undefined) {
            values = [];
        }
        values.push(options.value);
        this.captures.set(options.capture, values);
    }
}
_b = JSII_RTTI_SYMBOL_1;
MatchResult[_b] = { fqn: "aws-cdk-lib.assertions.MatchResult", version: "2.75.1" };
exports.MatchResult = MatchResult;
function* range(n) {
    for (let i = 0; i < n; i++) {
        yield i;
    }
}
function* enumFirst(xs) {
    let first = true;
    for (const x of xs) {
        yield [first, x];
        first = false;
    }
}
//# sourceMappingURL=data:application/json;base64,