"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTargetGroupFullName = exports.parseLoadBalancerFullName = exports.mapTagMapToCxschema = exports.validateNetworkProtocol = exports.ifUndefined = exports.determineProtocolAndPort = exports.defaultProtocolForPort = exports.defaultPortForProtocol = exports.renderAttributes = void 0;
const core_1 = require("../../../core");
const enums_1 = require("./enums");
/**
 * Render an attribute dict to a list of { key, value } pairs
 */
function renderAttributes(attributes) {
    const ret = [];
    for (const [key, value] of Object.entries(attributes)) {
        if (value !== undefined) {
            ret.push({ key, value });
        }
    }
    return ret;
}
exports.renderAttributes = renderAttributes;
/**
 * Return the appropriate default port for a given protocol
 */
function defaultPortForProtocol(proto) {
    switch (proto) {
        case enums_1.ApplicationProtocol.HTTP: return 80;
        case enums_1.ApplicationProtocol.HTTPS: return 443;
        default:
            throw new Error(`Unrecognized protocol: ${proto}`);
    }
}
exports.defaultPortForProtocol = defaultPortForProtocol;
/**
 * Return the appropriate default protocol for a given port
 */
function defaultProtocolForPort(port) {
    switch (port) {
        case 80:
        case 8000:
        case 8008:
        case 8080:
            return enums_1.ApplicationProtocol.HTTP;
        case 443:
        case 8443:
            return enums_1.ApplicationProtocol.HTTPS;
        default:
            throw new Error(`Don't know default protocol for port: ${port}; please supply a protocol`);
    }
}
exports.defaultProtocolForPort = defaultProtocolForPort;
/**
 * Given a protocol and a port, try to guess the other one if it's undefined
 */
// eslint-disable-next-line max-len
function determineProtocolAndPort(protocol, port) {
    if (protocol === undefined && port === undefined) {
        return [undefined, undefined];
    }
    if (protocol === undefined) {
        protocol = defaultProtocolForPort(port);
    }
    if (port === undefined) {
        port = defaultPortForProtocol(protocol);
    }
    return [protocol, port];
}
exports.determineProtocolAndPort = determineProtocolAndPort;
/**
 * Helper function to default undefined input props
 */
function ifUndefined(x, def) {
    return x ?? def;
}
exports.ifUndefined = ifUndefined;
/**
 * Helper function for ensuring network listeners and target groups only accept valid
 * protocols.
 */
function validateNetworkProtocol(protocol) {
    const NLB_PROTOCOLS = [enums_1.Protocol.TCP, enums_1.Protocol.TLS, enums_1.Protocol.UDP, enums_1.Protocol.TCP_UDP];
    if (NLB_PROTOCOLS.indexOf(protocol) === -1) {
        throw new Error(`The protocol must be one of ${NLB_PROTOCOLS.join(', ')}. Found ${protocol}`);
    }
}
exports.validateNetworkProtocol = validateNetworkProtocol;
/**
 * Helper to map a map of tags to cxschema tag format.
 * @internal
 */
function mapTagMapToCxschema(tagMap) {
    return Object.entries(tagMap)
        .map(([key, value]) => ({ key, value }));
}
exports.mapTagMapToCxschema = mapTagMapToCxschema;
function parseLoadBalancerFullName(arn) {
    if (core_1.Token.isUnresolved(arn)) {
        // Unfortunately it is not possible to use Arn.split() because the ARNs have this shape:
        //
        //   arn:...:loadbalancer/net/my-load-balancer/123456
        //
        // And the way that Arn.split() handles this situation is not enough to obtain the full name
        const arnParts = core_1.Fn.split('/', arn);
        return `${core_1.Fn.select(1, arnParts)}/${core_1.Fn.select(2, arnParts)}/${core_1.Fn.select(3, arnParts)}`;
    }
    else {
        const arnComponents = core_1.Arn.split(arn, core_1.ArnFormat.SLASH_RESOURCE_NAME);
        const resourceName = arnComponents.resourceName;
        if (!resourceName) {
            throw new Error(`Provided ARN does not belong to a load balancer: ${arn}`);
        }
        return resourceName;
    }
}
exports.parseLoadBalancerFullName = parseLoadBalancerFullName;
/**
 * Transforms:
 *
 *   arn:aws:elasticloadbalancing:us-east-1:123456789:targetgroup/my-target-group/da693d633af407a0
 *
 * Into:
 *
 *   targetgroup/my-target-group/da693d633af407a0
 */
function parseTargetGroupFullName(arn) {
    const arnComponents = core_1.Arn.split(arn, core_1.ArnFormat.NO_RESOURCE_NAME);
    const resource = arnComponents.resource;
    if (!resource) {
        throw new Error(`Provided ARN does not belong to a target group: ${arn}`);
    }
    return resource;
}
exports.parseTargetGroupFullName = parseTargetGroupFullName;
//# sourceMappingURL=data:application/json;base64,