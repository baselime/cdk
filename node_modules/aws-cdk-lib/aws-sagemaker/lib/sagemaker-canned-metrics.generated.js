"use strict";
// Copyright 2012-2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SageMakerMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class SageMakerMetrics {
    static invocationsSum(dimensions) {
        return {
            namespace: 'AWS/SageMaker',
            metricName: 'Invocations',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static invocation5XxErrorsSum(dimensions) {
        return {
            namespace: 'AWS/SageMaker',
            metricName: 'Invocation5XXErrors',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static invocation4XxErrorsSum(dimensions) {
        return {
            namespace: 'AWS/SageMaker',
            metricName: 'Invocation4XXErrors',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static invocationsPerInstanceSum(dimensions) {
        return {
            namespace: 'AWS/SageMaker',
            metricName: 'InvocationsPerInstance',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static modelLatencySum(dimensions) {
        return {
            namespace: 'AWS/SageMaker',
            metricName: 'ModelLatency',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static overheadLatencySum(dimensions) {
        return {
            namespace: 'AWS/SageMaker',
            metricName: 'OverheadLatency',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
}
exports.SageMakerMetrics = SageMakerMetrics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FnZW1ha2VyLWNhbm5lZC1tZXRyaWNzLmdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNhZ2VtYWtlci1jYW5uZWQtbWV0cmljcy5nZW5lcmF0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtFQUErRTs7O0FBRS9FLDRCQUE0QixDQUFDLGlFQUFpRTtBQUU5RixNQUFhLGdCQUFnQjtJQUNwQixNQUFNLENBQUMsY0FBYyxDQUFDLFVBQXlEO1FBQ3BGLE9BQU87WUFDTCxTQUFTLEVBQUUsZUFBZTtZQUMxQixVQUFVLEVBQUUsYUFBYTtZQUN6QixhQUFhLEVBQUUsVUFBVTtZQUN6QixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0tBQ0g7SUFDTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsVUFBeUQ7UUFDNUYsT0FBTztZQUNMLFNBQVMsRUFBRSxlQUFlO1lBQzFCLFVBQVUsRUFBRSxxQkFBcUI7WUFDakMsYUFBYSxFQUFFLFVBQVU7WUFDekIsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztLQUNIO0lBQ00sTUFBTSxDQUFDLHNCQUFzQixDQUFDLFVBQXlEO1FBQzVGLE9BQU87WUFDTCxTQUFTLEVBQUUsZUFBZTtZQUMxQixVQUFVLEVBQUUscUJBQXFCO1lBQ2pDLGFBQWEsRUFBRSxVQUFVO1lBQ3pCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCLENBQUM7S0FDSDtJQUNNLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxVQUF5RDtRQUMvRixPQUFPO1lBQ0wsU0FBUyxFQUFFLGVBQWU7WUFDMUIsVUFBVSxFQUFFLHdCQUF3QjtZQUNwQyxhQUFhLEVBQUUsVUFBVTtZQUN6QixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0tBQ0g7SUFDTSxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQXlEO1FBQ3JGLE9BQU87WUFDTCxTQUFTLEVBQUUsZUFBZTtZQUMxQixVQUFVLEVBQUUsY0FBYztZQUMxQixhQUFhLEVBQUUsVUFBVTtZQUN6QixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0tBQ0g7SUFDTSxNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBeUQ7UUFDeEYsT0FBTztZQUNMLFNBQVMsRUFBRSxlQUFlO1lBQzFCLFVBQVUsRUFBRSxpQkFBaUI7WUFDN0IsYUFBYSxFQUFFLFVBQVU7WUFDekIsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztLQUNIO0NBQ0Y7QUFqREQsNENBaURDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTItMjAyMyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovIC8vIFRoaXMgaXMgZ2VuZXJhdGVkIGNvZGUgLSBsaW5lIGxlbmd0aHMgYXJlIGRpZmZpY3VsdCB0byBjb250cm9sXG5cbmV4cG9ydCBjbGFzcyBTYWdlTWFrZXJNZXRyaWNzIHtcbiAgcHVibGljIHN0YXRpYyBpbnZvY2F0aW9uc1N1bShkaW1lbnNpb25zOiB7IEVuZHBvaW50TmFtZTogc3RyaW5nLCBWYXJpYW50TmFtZTogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL1NhZ2VNYWtlcicsXG4gICAgICBtZXRyaWNOYW1lOiAnSW52b2NhdGlvbnMnLFxuICAgICAgZGltZW5zaW9uc01hcDogZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGludm9jYXRpb241WHhFcnJvcnNTdW0oZGltZW5zaW9uczogeyBFbmRwb2ludE5hbWU6IHN0cmluZywgVmFyaWFudE5hbWU6IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TYWdlTWFrZXInLFxuICAgICAgbWV0cmljTmFtZTogJ0ludm9jYXRpb241WFhFcnJvcnMnLFxuICAgICAgZGltZW5zaW9uc01hcDogZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGludm9jYXRpb240WHhFcnJvcnNTdW0oZGltZW5zaW9uczogeyBFbmRwb2ludE5hbWU6IHN0cmluZywgVmFyaWFudE5hbWU6IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TYWdlTWFrZXInLFxuICAgICAgbWV0cmljTmFtZTogJ0ludm9jYXRpb240WFhFcnJvcnMnLFxuICAgICAgZGltZW5zaW9uc01hcDogZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGludm9jYXRpb25zUGVySW5zdGFuY2VTdW0oZGltZW5zaW9uczogeyBFbmRwb2ludE5hbWU6IHN0cmluZywgVmFyaWFudE5hbWU6IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TYWdlTWFrZXInLFxuICAgICAgbWV0cmljTmFtZTogJ0ludm9jYXRpb25zUGVySW5zdGFuY2UnLFxuICAgICAgZGltZW5zaW9uc01hcDogZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIG1vZGVsTGF0ZW5jeVN1bShkaW1lbnNpb25zOiB7IEVuZHBvaW50TmFtZTogc3RyaW5nLCBWYXJpYW50TmFtZTogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL1NhZ2VNYWtlcicsXG4gICAgICBtZXRyaWNOYW1lOiAnTW9kZWxMYXRlbmN5JyxcbiAgICAgIGRpbWVuc2lvbnNNYXA6IGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdTdW0nLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBvdmVyaGVhZExhdGVuY3lTdW0oZGltZW5zaW9uczogeyBFbmRwb2ludE5hbWU6IHN0cmluZywgVmFyaWFudE5hbWU6IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TYWdlTWFrZXInLFxuICAgICAgbWV0cmljTmFtZTogJ092ZXJoZWFkTGF0ZW5jeScsXG4gICAgICBkaW1lbnNpb25zTWFwOiBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICB9O1xuICB9XG59XG4iXX0=