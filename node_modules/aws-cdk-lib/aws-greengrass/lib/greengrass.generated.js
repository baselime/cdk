"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnSubscriptionDefinitionVersion = exports.CfnSubscriptionDefinition = exports.CfnResourceDefinitionVersion = exports.CfnResourceDefinition = exports.CfnLoggerDefinitionVersion = exports.CfnLoggerDefinition = exports.CfnGroupVersion = exports.CfnGroup = exports.CfnFunctionDefinitionVersion = exports.CfnFunctionDefinition = exports.CfnDeviceDefinitionVersion = exports.CfnDeviceDefinition = exports.CfnCoreDefinitionVersion = exports.CfnCoreDefinition = exports.CfnConnectorDefinitionVersion = exports.CfnConnectorDefinition = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("../../core");
const cfn_parse = require("../../core/lib/helpers-internal");
/**
 * Determine whether the given properties match those of a `CfnConnectorDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnConnectorDefinitionProps`
 *
 * @returns the result of the validation.
 */
function CfnConnectorDefinitionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnConnectorDefinition_ConnectorDefinitionVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnConnectorDefinitionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinition` resource
 *
 * @param properties - the TypeScript properties of a `CfnConnectorDefinitionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinition` resource.
 */
// @ts-ignore TS6133
function cfnConnectorDefinitionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnConnectorDefinitionPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnConnectorDefinitionConnectorDefinitionVersionPropertyToCloudFormation(properties.initialVersion),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnConnectorDefinitionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnConnectorDefinitionConnectorDefinitionVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::ConnectorDefinition`
 *
 * The `AWS::Greengrass::ConnectorDefinition` resource represents a connector definition for AWS IoT Greengrass . Connector definitions are used to organize your connector definition versions.
 *
 * Connector definitions can reference multiple connector definition versions. All connector definition versions must be associated with a connector definition. Each connector definition version can contain one or more connectors.
 *
 * > When you create a connector definition, you can optionally include an initial connector definition version. To associate a connector definition version later, create an [`AWS::Greengrass::ConnectorDefinitionVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-connectordefinitionversion.html) resource and specify the ID of this connector definition.
 * >
 * > After you create the connector definition version that contains the connectors you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::ConnectorDefinition
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-connectordefinition.html
 */
class CfnConnectorDefinition extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnConnectorDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnConnectorDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::ConnectorDefinition`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnConnectorDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnConnectorDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnConnectorDefinition);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::ConnectorDefinition", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnConnectorDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnConnectorDefinitionPropsToCloudFormation(props);
    }
}
_a = JSII_RTTI_SYMBOL_1;
CfnConnectorDefinition[_a] = { fqn: "aws-cdk-lib.aws_greengrass.CfnConnectorDefinition", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnConnectorDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::ConnectorDefinition";
exports.CfnConnectorDefinition = CfnConnectorDefinition;
/**
 * Determine whether the given properties match those of a `ConnectorProperty`
 *
 * @param properties - the TypeScript properties of a `ConnectorProperty`
 *
 * @returns the result of the validation.
 */
function CfnConnectorDefinition_ConnectorPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectorArn', cdk.requiredValidator)(properties.connectorArn));
    errors.collect(cdk.propertyValidator('connectorArn', cdk.validateString)(properties.connectorArn));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));
    return errors.wrap('supplied properties not correct for "ConnectorProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinition.Connector` resource
 *
 * @param properties - the TypeScript properties of a `ConnectorProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinition.Connector` resource.
 */
// @ts-ignore TS6133
function cfnConnectorDefinitionConnectorPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnConnectorDefinition_ConnectorPropertyValidator(properties).assertSuccess();
    return {
        ConnectorArn: cdk.stringToCloudFormation(properties.connectorArn),
        Id: cdk.stringToCloudFormation(properties.id),
        Parameters: cdk.objectToCloudFormation(properties.parameters),
    };
}
// @ts-ignore TS6133
function CfnConnectorDefinitionConnectorPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectorArn', 'ConnectorArn', cfn_parse.FromCloudFormation.getString(properties.ConnectorArn));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ConnectorDefinitionVersionProperty`
 *
 * @param properties - the TypeScript properties of a `ConnectorDefinitionVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnConnectorDefinition_ConnectorDefinitionVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectors', cdk.requiredValidator)(properties.connectors));
    errors.collect(cdk.propertyValidator('connectors', cdk.listValidator(CfnConnectorDefinition_ConnectorPropertyValidator))(properties.connectors));
    return errors.wrap('supplied properties not correct for "ConnectorDefinitionVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinition.ConnectorDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `ConnectorDefinitionVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinition.ConnectorDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnConnectorDefinitionConnectorDefinitionVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnConnectorDefinition_ConnectorDefinitionVersionPropertyValidator(properties).assertSuccess();
    return {
        Connectors: cdk.listMapper(cfnConnectorDefinitionConnectorPropertyToCloudFormation)(properties.connectors),
    };
}
// @ts-ignore TS6133
function CfnConnectorDefinitionConnectorDefinitionVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectors', 'Connectors', cfn_parse.FromCloudFormation.getArray(CfnConnectorDefinitionConnectorPropertyFromCloudFormation)(properties.Connectors));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnConnectorDefinitionVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnConnectorDefinitionVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnConnectorDefinitionVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectorDefinitionId', cdk.requiredValidator)(properties.connectorDefinitionId));
    errors.collect(cdk.propertyValidator('connectorDefinitionId', cdk.validateString)(properties.connectorDefinitionId));
    errors.collect(cdk.propertyValidator('connectors', cdk.requiredValidator)(properties.connectors));
    errors.collect(cdk.propertyValidator('connectors', cdk.listValidator(CfnConnectorDefinitionVersion_ConnectorPropertyValidator))(properties.connectors));
    return errors.wrap('supplied properties not correct for "CfnConnectorDefinitionVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnConnectorDefinitionVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnConnectorDefinitionVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnConnectorDefinitionVersionPropsValidator(properties).assertSuccess();
    return {
        ConnectorDefinitionId: cdk.stringToCloudFormation(properties.connectorDefinitionId),
        Connectors: cdk.listMapper(cfnConnectorDefinitionVersionConnectorPropertyToCloudFormation)(properties.connectors),
    };
}
// @ts-ignore TS6133
function CfnConnectorDefinitionVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectorDefinitionId', 'ConnectorDefinitionId', cfn_parse.FromCloudFormation.getString(properties.ConnectorDefinitionId));
    ret.addPropertyResult('connectors', 'Connectors', cfn_parse.FromCloudFormation.getArray(CfnConnectorDefinitionVersionConnectorPropertyFromCloudFormation)(properties.Connectors));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::ConnectorDefinitionVersion`
 *
 * The `AWS::Greengrass::ConnectorDefinitionVersion` resource represents a connector definition version for AWS IoT Greengrass . A connector definition version contains a list of connectors.
 *
 * > To create a connector definition version, you must specify the ID of the connector definition that you want to associate with the version. For information about creating a connector definition, see [`AWS::Greengrass::ConnectorDefinition`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-connectordefinition.html) .
 * >
 * > After you create a connector definition version that contains the connectors you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::ConnectorDefinitionVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-connectordefinitionversion.html
 */
class CfnConnectorDefinitionVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnConnectorDefinitionVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnConnectorDefinitionVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::ConnectorDefinitionVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnConnectorDefinitionVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnConnectorDefinitionVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnConnectorDefinitionVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'connectorDefinitionId', this);
        cdk.requireProperty(props, 'connectors', this);
        this.connectorDefinitionId = props.connectorDefinitionId;
        this.connectors = props.connectors;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnConnectorDefinitionVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            connectorDefinitionId: this.connectorDefinitionId,
            connectors: this.connectors,
        };
    }
    renderProperties(props) {
        return cfnConnectorDefinitionVersionPropsToCloudFormation(props);
    }
}
_b = JSII_RTTI_SYMBOL_1;
CfnConnectorDefinitionVersion[_b] = { fqn: "aws-cdk-lib.aws_greengrass.CfnConnectorDefinitionVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnConnectorDefinitionVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::ConnectorDefinitionVersion";
exports.CfnConnectorDefinitionVersion = CfnConnectorDefinitionVersion;
/**
 * Determine whether the given properties match those of a `ConnectorProperty`
 *
 * @param properties - the TypeScript properties of a `ConnectorProperty`
 *
 * @returns the result of the validation.
 */
function CfnConnectorDefinitionVersion_ConnectorPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectorArn', cdk.requiredValidator)(properties.connectorArn));
    errors.collect(cdk.propertyValidator('connectorArn', cdk.validateString)(properties.connectorArn));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));
    return errors.wrap('supplied properties not correct for "ConnectorProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinitionVersion.Connector` resource
 *
 * @param properties - the TypeScript properties of a `ConnectorProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ConnectorDefinitionVersion.Connector` resource.
 */
// @ts-ignore TS6133
function cfnConnectorDefinitionVersionConnectorPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnConnectorDefinitionVersion_ConnectorPropertyValidator(properties).assertSuccess();
    return {
        ConnectorArn: cdk.stringToCloudFormation(properties.connectorArn),
        Id: cdk.stringToCloudFormation(properties.id),
        Parameters: cdk.objectToCloudFormation(properties.parameters),
    };
}
// @ts-ignore TS6133
function CfnConnectorDefinitionVersionConnectorPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectorArn', 'ConnectorArn', cfn_parse.FromCloudFormation.getString(properties.ConnectorArn));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnCoreDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnCoreDefinitionProps`
 *
 * @returns the result of the validation.
 */
function CfnCoreDefinitionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnCoreDefinition_CoreDefinitionVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnCoreDefinitionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinition` resource
 *
 * @param properties - the TypeScript properties of a `CfnCoreDefinitionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinition` resource.
 */
// @ts-ignore TS6133
function cfnCoreDefinitionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnCoreDefinitionPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnCoreDefinitionCoreDefinitionVersionPropertyToCloudFormation(properties.initialVersion),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnCoreDefinitionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnCoreDefinitionCoreDefinitionVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::CoreDefinition`
 *
 * The `AWS::Greengrass::CoreDefinition` resource represents a core definition for AWS IoT Greengrass . Core definitions are used to organize your core definition versions.
 *
 * Core definitions can reference multiple core definition versions. All core definition versions must be associated with a core definition. Each core definition version can contain one Greengrass core.
 *
 * > When you create a core definition, you can optionally include an initial core definition version. To associate a core definition version later, create an [`AWS::Greengrass::CoreDefinitionVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-coredefinitionversion.html) resource and specify the ID of this core definition.
 * >
 * > After you create the core definition version that contains the core you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::CoreDefinition
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-coredefinition.html
 */
class CfnCoreDefinition extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCoreDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCoreDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::CoreDefinition`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnCoreDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnCoreDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnCoreDefinition);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::CoreDefinition", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCoreDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnCoreDefinitionPropsToCloudFormation(props);
    }
}
_c = JSII_RTTI_SYMBOL_1;
CfnCoreDefinition[_c] = { fqn: "aws-cdk-lib.aws_greengrass.CfnCoreDefinition", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnCoreDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::CoreDefinition";
exports.CfnCoreDefinition = CfnCoreDefinition;
/**
 * Determine whether the given properties match those of a `CoreProperty`
 *
 * @param properties - the TypeScript properties of a `CoreProperty`
 *
 * @returns the result of the validation.
 */
function CfnCoreDefinition_CorePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('certificateArn', cdk.requiredValidator)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('syncShadow', cdk.validateBoolean)(properties.syncShadow));
    errors.collect(cdk.propertyValidator('thingArn', cdk.requiredValidator)(properties.thingArn));
    errors.collect(cdk.propertyValidator('thingArn', cdk.validateString)(properties.thingArn));
    return errors.wrap('supplied properties not correct for "CoreProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinition.Core` resource
 *
 * @param properties - the TypeScript properties of a `CoreProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinition.Core` resource.
 */
// @ts-ignore TS6133
function cfnCoreDefinitionCorePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnCoreDefinition_CorePropertyValidator(properties).assertSuccess();
    return {
        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),
        Id: cdk.stringToCloudFormation(properties.id),
        SyncShadow: cdk.booleanToCloudFormation(properties.syncShadow),
        ThingArn: cdk.stringToCloudFormation(properties.thingArn),
    };
}
// @ts-ignore TS6133
function CfnCoreDefinitionCorePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('certificateArn', 'CertificateArn', cfn_parse.FromCloudFormation.getString(properties.CertificateArn));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('syncShadow', 'SyncShadow', properties.SyncShadow != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SyncShadow) : undefined);
    ret.addPropertyResult('thingArn', 'ThingArn', cfn_parse.FromCloudFormation.getString(properties.ThingArn));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CoreDefinitionVersionProperty`
 *
 * @param properties - the TypeScript properties of a `CoreDefinitionVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnCoreDefinition_CoreDefinitionVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('cores', cdk.requiredValidator)(properties.cores));
    errors.collect(cdk.propertyValidator('cores', cdk.listValidator(CfnCoreDefinition_CorePropertyValidator))(properties.cores));
    return errors.wrap('supplied properties not correct for "CoreDefinitionVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinition.CoreDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CoreDefinitionVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinition.CoreDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnCoreDefinitionCoreDefinitionVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnCoreDefinition_CoreDefinitionVersionPropertyValidator(properties).assertSuccess();
    return {
        Cores: cdk.listMapper(cfnCoreDefinitionCorePropertyToCloudFormation)(properties.cores),
    };
}
// @ts-ignore TS6133
function CfnCoreDefinitionCoreDefinitionVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('cores', 'Cores', cfn_parse.FromCloudFormation.getArray(CfnCoreDefinitionCorePropertyFromCloudFormation)(properties.Cores));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnCoreDefinitionVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnCoreDefinitionVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnCoreDefinitionVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('coreDefinitionId', cdk.requiredValidator)(properties.coreDefinitionId));
    errors.collect(cdk.propertyValidator('coreDefinitionId', cdk.validateString)(properties.coreDefinitionId));
    errors.collect(cdk.propertyValidator('cores', cdk.requiredValidator)(properties.cores));
    errors.collect(cdk.propertyValidator('cores', cdk.listValidator(CfnCoreDefinitionVersion_CorePropertyValidator))(properties.cores));
    return errors.wrap('supplied properties not correct for "CfnCoreDefinitionVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnCoreDefinitionVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnCoreDefinitionVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnCoreDefinitionVersionPropsValidator(properties).assertSuccess();
    return {
        CoreDefinitionId: cdk.stringToCloudFormation(properties.coreDefinitionId),
        Cores: cdk.listMapper(cfnCoreDefinitionVersionCorePropertyToCloudFormation)(properties.cores),
    };
}
// @ts-ignore TS6133
function CfnCoreDefinitionVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('coreDefinitionId', 'CoreDefinitionId', cfn_parse.FromCloudFormation.getString(properties.CoreDefinitionId));
    ret.addPropertyResult('cores', 'Cores', cfn_parse.FromCloudFormation.getArray(CfnCoreDefinitionVersionCorePropertyFromCloudFormation)(properties.Cores));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::CoreDefinitionVersion`
 *
 * The `AWS::Greengrass::CoreDefinitionVersion` resource represents a core definition version for AWS IoT Greengrass . A core definition version contains a Greengrass core.
 *
 * > To create a core definition version, you must specify the ID of the core definition that you want to associate with the version. For information about creating a core definition, see [`AWS::Greengrass::CoreDefinition`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-coredefinition.html) .
 * >
 * > After you create a core definition version that contains the core you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::CoreDefinitionVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-coredefinitionversion.html
 */
class CfnCoreDefinitionVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCoreDefinitionVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCoreDefinitionVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::CoreDefinitionVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnCoreDefinitionVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnCoreDefinitionVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnCoreDefinitionVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'coreDefinitionId', this);
        cdk.requireProperty(props, 'cores', this);
        this.coreDefinitionId = props.coreDefinitionId;
        this.cores = props.cores;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCoreDefinitionVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            coreDefinitionId: this.coreDefinitionId,
            cores: this.cores,
        };
    }
    renderProperties(props) {
        return cfnCoreDefinitionVersionPropsToCloudFormation(props);
    }
}
_d = JSII_RTTI_SYMBOL_1;
CfnCoreDefinitionVersion[_d] = { fqn: "aws-cdk-lib.aws_greengrass.CfnCoreDefinitionVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnCoreDefinitionVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::CoreDefinitionVersion";
exports.CfnCoreDefinitionVersion = CfnCoreDefinitionVersion;
/**
 * Determine whether the given properties match those of a `CoreProperty`
 *
 * @param properties - the TypeScript properties of a `CoreProperty`
 *
 * @returns the result of the validation.
 */
function CfnCoreDefinitionVersion_CorePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('certificateArn', cdk.requiredValidator)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('syncShadow', cdk.validateBoolean)(properties.syncShadow));
    errors.collect(cdk.propertyValidator('thingArn', cdk.requiredValidator)(properties.thingArn));
    errors.collect(cdk.propertyValidator('thingArn', cdk.validateString)(properties.thingArn));
    return errors.wrap('supplied properties not correct for "CoreProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinitionVersion.Core` resource
 *
 * @param properties - the TypeScript properties of a `CoreProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::CoreDefinitionVersion.Core` resource.
 */
// @ts-ignore TS6133
function cfnCoreDefinitionVersionCorePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnCoreDefinitionVersion_CorePropertyValidator(properties).assertSuccess();
    return {
        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),
        Id: cdk.stringToCloudFormation(properties.id),
        SyncShadow: cdk.booleanToCloudFormation(properties.syncShadow),
        ThingArn: cdk.stringToCloudFormation(properties.thingArn),
    };
}
// @ts-ignore TS6133
function CfnCoreDefinitionVersionCorePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('certificateArn', 'CertificateArn', cfn_parse.FromCloudFormation.getString(properties.CertificateArn));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('syncShadow', 'SyncShadow', properties.SyncShadow != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SyncShadow) : undefined);
    ret.addPropertyResult('thingArn', 'ThingArn', cfn_parse.FromCloudFormation.getString(properties.ThingArn));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnDeviceDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnDeviceDefinitionProps`
 *
 * @returns the result of the validation.
 */
function CfnDeviceDefinitionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnDeviceDefinition_DeviceDefinitionVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnDeviceDefinitionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinition` resource
 *
 * @param properties - the TypeScript properties of a `CfnDeviceDefinitionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinition` resource.
 */
// @ts-ignore TS6133
function cfnDeviceDefinitionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnDeviceDefinitionPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnDeviceDefinitionDeviceDefinitionVersionPropertyToCloudFormation(properties.initialVersion),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnDeviceDefinitionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnDeviceDefinitionDeviceDefinitionVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::DeviceDefinition`
 *
 * The `AWS::Greengrass::DeviceDefinition` resource represents a device definition for AWS IoT Greengrass . Device definitions are used to organize your device definition versions.
 *
 * Device definitions can reference multiple device definition versions. All device definition versions must be associated with a device definition. Each device definition version can contain one or more devices.
 *
 * > When you create a device definition, you can optionally include an initial device definition version. To associate a device definition version later, create an [`AWS::Greengrass::DeviceDefinitionVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinitionversion.html) resource and specify the ID of this device definition.
 * >
 * > After you create the device definition version that contains the devices you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::DeviceDefinition
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html
 */
class CfnDeviceDefinition extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDeviceDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDeviceDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::DeviceDefinition`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnDeviceDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnDeviceDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnDeviceDefinition);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::DeviceDefinition", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDeviceDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnDeviceDefinitionPropsToCloudFormation(props);
    }
}
_e = JSII_RTTI_SYMBOL_1;
CfnDeviceDefinition[_e] = { fqn: "aws-cdk-lib.aws_greengrass.CfnDeviceDefinition", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnDeviceDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::DeviceDefinition";
exports.CfnDeviceDefinition = CfnDeviceDefinition;
/**
 * Determine whether the given properties match those of a `DeviceProperty`
 *
 * @param properties - the TypeScript properties of a `DeviceProperty`
 *
 * @returns the result of the validation.
 */
function CfnDeviceDefinition_DevicePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('certificateArn', cdk.requiredValidator)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('syncShadow', cdk.validateBoolean)(properties.syncShadow));
    errors.collect(cdk.propertyValidator('thingArn', cdk.requiredValidator)(properties.thingArn));
    errors.collect(cdk.propertyValidator('thingArn', cdk.validateString)(properties.thingArn));
    return errors.wrap('supplied properties not correct for "DeviceProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinition.Device` resource
 *
 * @param properties - the TypeScript properties of a `DeviceProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinition.Device` resource.
 */
// @ts-ignore TS6133
function cfnDeviceDefinitionDevicePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnDeviceDefinition_DevicePropertyValidator(properties).assertSuccess();
    return {
        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),
        Id: cdk.stringToCloudFormation(properties.id),
        SyncShadow: cdk.booleanToCloudFormation(properties.syncShadow),
        ThingArn: cdk.stringToCloudFormation(properties.thingArn),
    };
}
// @ts-ignore TS6133
function CfnDeviceDefinitionDevicePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('certificateArn', 'CertificateArn', cfn_parse.FromCloudFormation.getString(properties.CertificateArn));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('syncShadow', 'SyncShadow', properties.SyncShadow != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SyncShadow) : undefined);
    ret.addPropertyResult('thingArn', 'ThingArn', cfn_parse.FromCloudFormation.getString(properties.ThingArn));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `DeviceDefinitionVersionProperty`
 *
 * @param properties - the TypeScript properties of a `DeviceDefinitionVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnDeviceDefinition_DeviceDefinitionVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('devices', cdk.requiredValidator)(properties.devices));
    errors.collect(cdk.propertyValidator('devices', cdk.listValidator(CfnDeviceDefinition_DevicePropertyValidator))(properties.devices));
    return errors.wrap('supplied properties not correct for "DeviceDefinitionVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinition.DeviceDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `DeviceDefinitionVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinition.DeviceDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnDeviceDefinitionDeviceDefinitionVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnDeviceDefinition_DeviceDefinitionVersionPropertyValidator(properties).assertSuccess();
    return {
        Devices: cdk.listMapper(cfnDeviceDefinitionDevicePropertyToCloudFormation)(properties.devices),
    };
}
// @ts-ignore TS6133
function CfnDeviceDefinitionDeviceDefinitionVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('devices', 'Devices', cfn_parse.FromCloudFormation.getArray(CfnDeviceDefinitionDevicePropertyFromCloudFormation)(properties.Devices));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnDeviceDefinitionVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnDeviceDefinitionVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnDeviceDefinitionVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('deviceDefinitionId', cdk.requiredValidator)(properties.deviceDefinitionId));
    errors.collect(cdk.propertyValidator('deviceDefinitionId', cdk.validateString)(properties.deviceDefinitionId));
    errors.collect(cdk.propertyValidator('devices', cdk.requiredValidator)(properties.devices));
    errors.collect(cdk.propertyValidator('devices', cdk.listValidator(CfnDeviceDefinitionVersion_DevicePropertyValidator))(properties.devices));
    return errors.wrap('supplied properties not correct for "CfnDeviceDefinitionVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnDeviceDefinitionVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnDeviceDefinitionVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnDeviceDefinitionVersionPropsValidator(properties).assertSuccess();
    return {
        DeviceDefinitionId: cdk.stringToCloudFormation(properties.deviceDefinitionId),
        Devices: cdk.listMapper(cfnDeviceDefinitionVersionDevicePropertyToCloudFormation)(properties.devices),
    };
}
// @ts-ignore TS6133
function CfnDeviceDefinitionVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('deviceDefinitionId', 'DeviceDefinitionId', cfn_parse.FromCloudFormation.getString(properties.DeviceDefinitionId));
    ret.addPropertyResult('devices', 'Devices', cfn_parse.FromCloudFormation.getArray(CfnDeviceDefinitionVersionDevicePropertyFromCloudFormation)(properties.Devices));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::DeviceDefinitionVersion`
 *
 * The `AWS::Greengrass::DeviceDefinitionVersion` resource represents a device definition version for AWS IoT Greengrass . A device definition version contains a list of devices.
 *
 * > To create a device definition version, you must specify the ID of the device definition that you want to associate with the version. For information about creating a device definition, see [`AWS::Greengrass::DeviceDefinition`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html) .
 * >
 * > After you create a device definition version that contains the devices you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::DeviceDefinitionVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinitionversion.html
 */
class CfnDeviceDefinitionVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDeviceDefinitionVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDeviceDefinitionVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::DeviceDefinitionVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnDeviceDefinitionVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnDeviceDefinitionVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnDeviceDefinitionVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'deviceDefinitionId', this);
        cdk.requireProperty(props, 'devices', this);
        this.deviceDefinitionId = props.deviceDefinitionId;
        this.devices = props.devices;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDeviceDefinitionVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            deviceDefinitionId: this.deviceDefinitionId,
            devices: this.devices,
        };
    }
    renderProperties(props) {
        return cfnDeviceDefinitionVersionPropsToCloudFormation(props);
    }
}
_f = JSII_RTTI_SYMBOL_1;
CfnDeviceDefinitionVersion[_f] = { fqn: "aws-cdk-lib.aws_greengrass.CfnDeviceDefinitionVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnDeviceDefinitionVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::DeviceDefinitionVersion";
exports.CfnDeviceDefinitionVersion = CfnDeviceDefinitionVersion;
/**
 * Determine whether the given properties match those of a `DeviceProperty`
 *
 * @param properties - the TypeScript properties of a `DeviceProperty`
 *
 * @returns the result of the validation.
 */
function CfnDeviceDefinitionVersion_DevicePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('certificateArn', cdk.requiredValidator)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('syncShadow', cdk.validateBoolean)(properties.syncShadow));
    errors.collect(cdk.propertyValidator('thingArn', cdk.requiredValidator)(properties.thingArn));
    errors.collect(cdk.propertyValidator('thingArn', cdk.validateString)(properties.thingArn));
    return errors.wrap('supplied properties not correct for "DeviceProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinitionVersion.Device` resource
 *
 * @param properties - the TypeScript properties of a `DeviceProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::DeviceDefinitionVersion.Device` resource.
 */
// @ts-ignore TS6133
function cfnDeviceDefinitionVersionDevicePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnDeviceDefinitionVersion_DevicePropertyValidator(properties).assertSuccess();
    return {
        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),
        Id: cdk.stringToCloudFormation(properties.id),
        SyncShadow: cdk.booleanToCloudFormation(properties.syncShadow),
        ThingArn: cdk.stringToCloudFormation(properties.thingArn),
    };
}
// @ts-ignore TS6133
function CfnDeviceDefinitionVersionDevicePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('certificateArn', 'CertificateArn', cfn_parse.FromCloudFormation.getString(properties.CertificateArn));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('syncShadow', 'SyncShadow', properties.SyncShadow != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SyncShadow) : undefined);
    ret.addPropertyResult('thingArn', 'ThingArn', cfn_parse.FromCloudFormation.getString(properties.ThingArn));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnFunctionDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnFunctionDefinitionProps`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnFunctionDefinition_FunctionDefinitionVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnFunctionDefinitionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition` resource
 *
 * @param properties - the TypeScript properties of a `CfnFunctionDefinitionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnFunctionDefinitionFunctionDefinitionVersionPropertyToCloudFormation(properties.initialVersion),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnFunctionDefinitionFunctionDefinitionVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::FunctionDefinition`
 *
 * The `AWS::Greengrass::FunctionDefinition` resource represents a function definition for AWS IoT Greengrass . Function definitions are used to organize your function definition versions.
 *
 * Function definitions can reference multiple function definition versions. All function definition versions must be associated with a function definition. Each function definition version can contain one or more functions.
 *
 * > When you create a function definition, you can optionally include an initial function definition version. To associate a function definition version later, create an [`AWS::Greengrass::FunctionDefinitionVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-functiondefinitionversion.html) resource and specify the ID of this function definition.
 * >
 * > After you create the function definition version that contains the functions you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::FunctionDefinition
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-functiondefinition.html
 */
class CfnFunctionDefinition extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnFunctionDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnFunctionDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::FunctionDefinition`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnFunctionDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnFunctionDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnFunctionDefinition);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::FunctionDefinition", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnFunctionDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnFunctionDefinitionPropsToCloudFormation(props);
    }
}
_g = JSII_RTTI_SYMBOL_1;
CfnFunctionDefinition[_g] = { fqn: "aws-cdk-lib.aws_greengrass.CfnFunctionDefinition", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnFunctionDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::FunctionDefinition";
exports.CfnFunctionDefinition = CfnFunctionDefinition;
/**
 * Determine whether the given properties match those of a `DefaultConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_DefaultConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('execution', cdk.requiredValidator)(properties.execution));
    errors.collect(cdk.propertyValidator('execution', CfnFunctionDefinition_ExecutionPropertyValidator)(properties.execution));
    return errors.wrap('supplied properties not correct for "DefaultConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.DefaultConfig` resource
 *
 * @param properties - the TypeScript properties of a `DefaultConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.DefaultConfig` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionDefaultConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_DefaultConfigPropertyValidator(properties).assertSuccess();
    return {
        Execution: cfnFunctionDefinitionExecutionPropertyToCloudFormation(properties.execution),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionDefaultConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('execution', 'Execution', CfnFunctionDefinitionExecutionPropertyFromCloudFormation(properties.Execution));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EnvironmentProperty`
 *
 * @param properties - the TypeScript properties of a `EnvironmentProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_EnvironmentPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('accessSysfs', cdk.validateBoolean)(properties.accessSysfs));
    errors.collect(cdk.propertyValidator('execution', CfnFunctionDefinition_ExecutionPropertyValidator)(properties.execution));
    errors.collect(cdk.propertyValidator('resourceAccessPolicies', cdk.listValidator(CfnFunctionDefinition_ResourceAccessPolicyPropertyValidator))(properties.resourceAccessPolicies));
    errors.collect(cdk.propertyValidator('variables', cdk.validateObject)(properties.variables));
    return errors.wrap('supplied properties not correct for "EnvironmentProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.Environment` resource
 *
 * @param properties - the TypeScript properties of a `EnvironmentProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.Environment` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionEnvironmentPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_EnvironmentPropertyValidator(properties).assertSuccess();
    return {
        AccessSysfs: cdk.booleanToCloudFormation(properties.accessSysfs),
        Execution: cfnFunctionDefinitionExecutionPropertyToCloudFormation(properties.execution),
        ResourceAccessPolicies: cdk.listMapper(cfnFunctionDefinitionResourceAccessPolicyPropertyToCloudFormation)(properties.resourceAccessPolicies),
        Variables: cdk.objectToCloudFormation(properties.variables),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionEnvironmentPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('accessSysfs', 'AccessSysfs', properties.AccessSysfs != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AccessSysfs) : undefined);
    ret.addPropertyResult('execution', 'Execution', properties.Execution != null ? CfnFunctionDefinitionExecutionPropertyFromCloudFormation(properties.Execution) : undefined);
    ret.addPropertyResult('resourceAccessPolicies', 'ResourceAccessPolicies', properties.ResourceAccessPolicies != null ? cfn_parse.FromCloudFormation.getArray(CfnFunctionDefinitionResourceAccessPolicyPropertyFromCloudFormation)(properties.ResourceAccessPolicies) : undefined);
    ret.addPropertyResult('variables', 'Variables', properties.Variables != null ? cfn_parse.FromCloudFormation.getAny(properties.Variables) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ExecutionProperty`
 *
 * @param properties - the TypeScript properties of a `ExecutionProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_ExecutionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('isolationMode', cdk.validateString)(properties.isolationMode));
    errors.collect(cdk.propertyValidator('runAs', CfnFunctionDefinition_RunAsPropertyValidator)(properties.runAs));
    return errors.wrap('supplied properties not correct for "ExecutionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.Execution` resource
 *
 * @param properties - the TypeScript properties of a `ExecutionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.Execution` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionExecutionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_ExecutionPropertyValidator(properties).assertSuccess();
    return {
        IsolationMode: cdk.stringToCloudFormation(properties.isolationMode),
        RunAs: cfnFunctionDefinitionRunAsPropertyToCloudFormation(properties.runAs),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionExecutionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('isolationMode', 'IsolationMode', properties.IsolationMode != null ? cfn_parse.FromCloudFormation.getString(properties.IsolationMode) : undefined);
    ret.addPropertyResult('runAs', 'RunAs', properties.RunAs != null ? CfnFunctionDefinitionRunAsPropertyFromCloudFormation(properties.RunAs) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FunctionProperty`
 *
 * @param properties - the TypeScript properties of a `FunctionProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_FunctionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('functionArn', cdk.requiredValidator)(properties.functionArn));
    errors.collect(cdk.propertyValidator('functionArn', cdk.validateString)(properties.functionArn));
    errors.collect(cdk.propertyValidator('functionConfiguration', cdk.requiredValidator)(properties.functionConfiguration));
    errors.collect(cdk.propertyValidator('functionConfiguration', CfnFunctionDefinition_FunctionConfigurationPropertyValidator)(properties.functionConfiguration));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    return errors.wrap('supplied properties not correct for "FunctionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.Function` resource
 *
 * @param properties - the TypeScript properties of a `FunctionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.Function` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionFunctionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_FunctionPropertyValidator(properties).assertSuccess();
    return {
        FunctionArn: cdk.stringToCloudFormation(properties.functionArn),
        FunctionConfiguration: cfnFunctionDefinitionFunctionConfigurationPropertyToCloudFormation(properties.functionConfiguration),
        Id: cdk.stringToCloudFormation(properties.id),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionFunctionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('functionArn', 'FunctionArn', cfn_parse.FromCloudFormation.getString(properties.FunctionArn));
    ret.addPropertyResult('functionConfiguration', 'FunctionConfiguration', CfnFunctionDefinitionFunctionConfigurationPropertyFromCloudFormation(properties.FunctionConfiguration));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FunctionConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `FunctionConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_FunctionConfigurationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('encodingType', cdk.validateString)(properties.encodingType));
    errors.collect(cdk.propertyValidator('environment', CfnFunctionDefinition_EnvironmentPropertyValidator)(properties.environment));
    errors.collect(cdk.propertyValidator('execArgs', cdk.validateString)(properties.execArgs));
    errors.collect(cdk.propertyValidator('executable', cdk.validateString)(properties.executable));
    errors.collect(cdk.propertyValidator('memorySize', cdk.validateNumber)(properties.memorySize));
    errors.collect(cdk.propertyValidator('pinned', cdk.validateBoolean)(properties.pinned));
    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));
    return errors.wrap('supplied properties not correct for "FunctionConfigurationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.FunctionConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `FunctionConfigurationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.FunctionConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionFunctionConfigurationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_FunctionConfigurationPropertyValidator(properties).assertSuccess();
    return {
        EncodingType: cdk.stringToCloudFormation(properties.encodingType),
        Environment: cfnFunctionDefinitionEnvironmentPropertyToCloudFormation(properties.environment),
        ExecArgs: cdk.stringToCloudFormation(properties.execArgs),
        Executable: cdk.stringToCloudFormation(properties.executable),
        MemorySize: cdk.numberToCloudFormation(properties.memorySize),
        Pinned: cdk.booleanToCloudFormation(properties.pinned),
        Timeout: cdk.numberToCloudFormation(properties.timeout),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionFunctionConfigurationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('encodingType', 'EncodingType', properties.EncodingType != null ? cfn_parse.FromCloudFormation.getString(properties.EncodingType) : undefined);
    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? CfnFunctionDefinitionEnvironmentPropertyFromCloudFormation(properties.Environment) : undefined);
    ret.addPropertyResult('execArgs', 'ExecArgs', properties.ExecArgs != null ? cfn_parse.FromCloudFormation.getString(properties.ExecArgs) : undefined);
    ret.addPropertyResult('executable', 'Executable', properties.Executable != null ? cfn_parse.FromCloudFormation.getString(properties.Executable) : undefined);
    ret.addPropertyResult('memorySize', 'MemorySize', properties.MemorySize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MemorySize) : undefined);
    ret.addPropertyResult('pinned', 'Pinned', properties.Pinned != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Pinned) : undefined);
    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FunctionDefinitionVersionProperty`
 *
 * @param properties - the TypeScript properties of a `FunctionDefinitionVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_FunctionDefinitionVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('defaultConfig', CfnFunctionDefinition_DefaultConfigPropertyValidator)(properties.defaultConfig));
    errors.collect(cdk.propertyValidator('functions', cdk.requiredValidator)(properties.functions));
    errors.collect(cdk.propertyValidator('functions', cdk.listValidator(CfnFunctionDefinition_FunctionPropertyValidator))(properties.functions));
    return errors.wrap('supplied properties not correct for "FunctionDefinitionVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.FunctionDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `FunctionDefinitionVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.FunctionDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionFunctionDefinitionVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_FunctionDefinitionVersionPropertyValidator(properties).assertSuccess();
    return {
        DefaultConfig: cfnFunctionDefinitionDefaultConfigPropertyToCloudFormation(properties.defaultConfig),
        Functions: cdk.listMapper(cfnFunctionDefinitionFunctionPropertyToCloudFormation)(properties.functions),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionFunctionDefinitionVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('defaultConfig', 'DefaultConfig', properties.DefaultConfig != null ? CfnFunctionDefinitionDefaultConfigPropertyFromCloudFormation(properties.DefaultConfig) : undefined);
    ret.addPropertyResult('functions', 'Functions', cfn_parse.FromCloudFormation.getArray(CfnFunctionDefinitionFunctionPropertyFromCloudFormation)(properties.Functions));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceAccessPolicyProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceAccessPolicyProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_ResourceAccessPolicyPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('permission', cdk.validateString)(properties.permission));
    errors.collect(cdk.propertyValidator('resourceId', cdk.requiredValidator)(properties.resourceId));
    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));
    return errors.wrap('supplied properties not correct for "ResourceAccessPolicyProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.ResourceAccessPolicy` resource
 *
 * @param properties - the TypeScript properties of a `ResourceAccessPolicyProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.ResourceAccessPolicy` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionResourceAccessPolicyPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_ResourceAccessPolicyPropertyValidator(properties).assertSuccess();
    return {
        Permission: cdk.stringToCloudFormation(properties.permission),
        ResourceId: cdk.stringToCloudFormation(properties.resourceId),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionResourceAccessPolicyPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('permission', 'Permission', properties.Permission != null ? cfn_parse.FromCloudFormation.getString(properties.Permission) : undefined);
    ret.addPropertyResult('resourceId', 'ResourceId', cfn_parse.FromCloudFormation.getString(properties.ResourceId));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `RunAsProperty`
 *
 * @param properties - the TypeScript properties of a `RunAsProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinition_RunAsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('gid', cdk.validateNumber)(properties.gid));
    errors.collect(cdk.propertyValidator('uid', cdk.validateNumber)(properties.uid));
    return errors.wrap('supplied properties not correct for "RunAsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.RunAs` resource
 *
 * @param properties - the TypeScript properties of a `RunAsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinition.RunAs` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionRunAsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinition_RunAsPropertyValidator(properties).assertSuccess();
    return {
        Gid: cdk.numberToCloudFormation(properties.gid),
        Uid: cdk.numberToCloudFormation(properties.uid),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionRunAsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('gid', 'Gid', properties.Gid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Gid) : undefined);
    ret.addPropertyResult('uid', 'Uid', properties.Uid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Uid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnFunctionDefinitionVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnFunctionDefinitionVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('defaultConfig', CfnFunctionDefinitionVersion_DefaultConfigPropertyValidator)(properties.defaultConfig));
    errors.collect(cdk.propertyValidator('functionDefinitionId', cdk.requiredValidator)(properties.functionDefinitionId));
    errors.collect(cdk.propertyValidator('functionDefinitionId', cdk.validateString)(properties.functionDefinitionId));
    errors.collect(cdk.propertyValidator('functions', cdk.requiredValidator)(properties.functions));
    errors.collect(cdk.propertyValidator('functions', cdk.listValidator(CfnFunctionDefinitionVersion_FunctionPropertyValidator))(properties.functions));
    return errors.wrap('supplied properties not correct for "CfnFunctionDefinitionVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnFunctionDefinitionVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersionPropsValidator(properties).assertSuccess();
    return {
        FunctionDefinitionId: cdk.stringToCloudFormation(properties.functionDefinitionId),
        Functions: cdk.listMapper(cfnFunctionDefinitionVersionFunctionPropertyToCloudFormation)(properties.functions),
        DefaultConfig: cfnFunctionDefinitionVersionDefaultConfigPropertyToCloudFormation(properties.defaultConfig),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('functionDefinitionId', 'FunctionDefinitionId', cfn_parse.FromCloudFormation.getString(properties.FunctionDefinitionId));
    ret.addPropertyResult('functions', 'Functions', cfn_parse.FromCloudFormation.getArray(CfnFunctionDefinitionVersionFunctionPropertyFromCloudFormation)(properties.Functions));
    ret.addPropertyResult('defaultConfig', 'DefaultConfig', properties.DefaultConfig != null ? CfnFunctionDefinitionVersionDefaultConfigPropertyFromCloudFormation(properties.DefaultConfig) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::FunctionDefinitionVersion`
 *
 * The `AWS::Greengrass::FunctionDefinitionVersion` resource represents a function definition version for AWS IoT Greengrass . A function definition version contains contain a list of functions.
 *
 * > To create a function definition version, you must specify the ID of the function definition that you want to associate with the version. For information about creating a function definition, see [`AWS::Greengrass::FunctionDefinition`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-functiondefinition.html) .
 * >
 * > After you create a function definition version that contains the functions you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::FunctionDefinitionVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-functiondefinitionversion.html
 */
class CfnFunctionDefinitionVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnFunctionDefinitionVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnFunctionDefinitionVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::FunctionDefinitionVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnFunctionDefinitionVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnFunctionDefinitionVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnFunctionDefinitionVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'functionDefinitionId', this);
        cdk.requireProperty(props, 'functions', this);
        this.functionDefinitionId = props.functionDefinitionId;
        this.functions = props.functions;
        this.defaultConfig = props.defaultConfig;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnFunctionDefinitionVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            functionDefinitionId: this.functionDefinitionId,
            functions: this.functions,
            defaultConfig: this.defaultConfig,
        };
    }
    renderProperties(props) {
        return cfnFunctionDefinitionVersionPropsToCloudFormation(props);
    }
}
_h = JSII_RTTI_SYMBOL_1;
CfnFunctionDefinitionVersion[_h] = { fqn: "aws-cdk-lib.aws_greengrass.CfnFunctionDefinitionVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnFunctionDefinitionVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::FunctionDefinitionVersion";
exports.CfnFunctionDefinitionVersion = CfnFunctionDefinitionVersion;
/**
 * Determine whether the given properties match those of a `DefaultConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersion_DefaultConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('execution', cdk.requiredValidator)(properties.execution));
    errors.collect(cdk.propertyValidator('execution', CfnFunctionDefinitionVersion_ExecutionPropertyValidator)(properties.execution));
    return errors.wrap('supplied properties not correct for "DefaultConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.DefaultConfig` resource
 *
 * @param properties - the TypeScript properties of a `DefaultConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.DefaultConfig` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionDefaultConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersion_DefaultConfigPropertyValidator(properties).assertSuccess();
    return {
        Execution: cfnFunctionDefinitionVersionExecutionPropertyToCloudFormation(properties.execution),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionDefaultConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('execution', 'Execution', CfnFunctionDefinitionVersionExecutionPropertyFromCloudFormation(properties.Execution));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EnvironmentProperty`
 *
 * @param properties - the TypeScript properties of a `EnvironmentProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersion_EnvironmentPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('accessSysfs', cdk.validateBoolean)(properties.accessSysfs));
    errors.collect(cdk.propertyValidator('execution', CfnFunctionDefinitionVersion_ExecutionPropertyValidator)(properties.execution));
    errors.collect(cdk.propertyValidator('resourceAccessPolicies', cdk.listValidator(CfnFunctionDefinitionVersion_ResourceAccessPolicyPropertyValidator))(properties.resourceAccessPolicies));
    errors.collect(cdk.propertyValidator('variables', cdk.validateObject)(properties.variables));
    return errors.wrap('supplied properties not correct for "EnvironmentProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.Environment` resource
 *
 * @param properties - the TypeScript properties of a `EnvironmentProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.Environment` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionEnvironmentPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersion_EnvironmentPropertyValidator(properties).assertSuccess();
    return {
        AccessSysfs: cdk.booleanToCloudFormation(properties.accessSysfs),
        Execution: cfnFunctionDefinitionVersionExecutionPropertyToCloudFormation(properties.execution),
        ResourceAccessPolicies: cdk.listMapper(cfnFunctionDefinitionVersionResourceAccessPolicyPropertyToCloudFormation)(properties.resourceAccessPolicies),
        Variables: cdk.objectToCloudFormation(properties.variables),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionEnvironmentPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('accessSysfs', 'AccessSysfs', properties.AccessSysfs != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AccessSysfs) : undefined);
    ret.addPropertyResult('execution', 'Execution', properties.Execution != null ? CfnFunctionDefinitionVersionExecutionPropertyFromCloudFormation(properties.Execution) : undefined);
    ret.addPropertyResult('resourceAccessPolicies', 'ResourceAccessPolicies', properties.ResourceAccessPolicies != null ? cfn_parse.FromCloudFormation.getArray(CfnFunctionDefinitionVersionResourceAccessPolicyPropertyFromCloudFormation)(properties.ResourceAccessPolicies) : undefined);
    ret.addPropertyResult('variables', 'Variables', properties.Variables != null ? cfn_parse.FromCloudFormation.getAny(properties.Variables) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ExecutionProperty`
 *
 * @param properties - the TypeScript properties of a `ExecutionProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersion_ExecutionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('isolationMode', cdk.validateString)(properties.isolationMode));
    errors.collect(cdk.propertyValidator('runAs', CfnFunctionDefinitionVersion_RunAsPropertyValidator)(properties.runAs));
    return errors.wrap('supplied properties not correct for "ExecutionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.Execution` resource
 *
 * @param properties - the TypeScript properties of a `ExecutionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.Execution` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionExecutionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersion_ExecutionPropertyValidator(properties).assertSuccess();
    return {
        IsolationMode: cdk.stringToCloudFormation(properties.isolationMode),
        RunAs: cfnFunctionDefinitionVersionRunAsPropertyToCloudFormation(properties.runAs),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionExecutionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('isolationMode', 'IsolationMode', properties.IsolationMode != null ? cfn_parse.FromCloudFormation.getString(properties.IsolationMode) : undefined);
    ret.addPropertyResult('runAs', 'RunAs', properties.RunAs != null ? CfnFunctionDefinitionVersionRunAsPropertyFromCloudFormation(properties.RunAs) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FunctionProperty`
 *
 * @param properties - the TypeScript properties of a `FunctionProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersion_FunctionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('functionArn', cdk.requiredValidator)(properties.functionArn));
    errors.collect(cdk.propertyValidator('functionArn', cdk.validateString)(properties.functionArn));
    errors.collect(cdk.propertyValidator('functionConfiguration', cdk.requiredValidator)(properties.functionConfiguration));
    errors.collect(cdk.propertyValidator('functionConfiguration', CfnFunctionDefinitionVersion_FunctionConfigurationPropertyValidator)(properties.functionConfiguration));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    return errors.wrap('supplied properties not correct for "FunctionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.Function` resource
 *
 * @param properties - the TypeScript properties of a `FunctionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.Function` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionFunctionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersion_FunctionPropertyValidator(properties).assertSuccess();
    return {
        FunctionArn: cdk.stringToCloudFormation(properties.functionArn),
        FunctionConfiguration: cfnFunctionDefinitionVersionFunctionConfigurationPropertyToCloudFormation(properties.functionConfiguration),
        Id: cdk.stringToCloudFormation(properties.id),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionFunctionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('functionArn', 'FunctionArn', cfn_parse.FromCloudFormation.getString(properties.FunctionArn));
    ret.addPropertyResult('functionConfiguration', 'FunctionConfiguration', CfnFunctionDefinitionVersionFunctionConfigurationPropertyFromCloudFormation(properties.FunctionConfiguration));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FunctionConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `FunctionConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersion_FunctionConfigurationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('encodingType', cdk.validateString)(properties.encodingType));
    errors.collect(cdk.propertyValidator('environment', CfnFunctionDefinitionVersion_EnvironmentPropertyValidator)(properties.environment));
    errors.collect(cdk.propertyValidator('execArgs', cdk.validateString)(properties.execArgs));
    errors.collect(cdk.propertyValidator('executable', cdk.validateString)(properties.executable));
    errors.collect(cdk.propertyValidator('memorySize', cdk.validateNumber)(properties.memorySize));
    errors.collect(cdk.propertyValidator('pinned', cdk.validateBoolean)(properties.pinned));
    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));
    return errors.wrap('supplied properties not correct for "FunctionConfigurationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.FunctionConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `FunctionConfigurationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.FunctionConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionFunctionConfigurationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersion_FunctionConfigurationPropertyValidator(properties).assertSuccess();
    return {
        EncodingType: cdk.stringToCloudFormation(properties.encodingType),
        Environment: cfnFunctionDefinitionVersionEnvironmentPropertyToCloudFormation(properties.environment),
        ExecArgs: cdk.stringToCloudFormation(properties.execArgs),
        Executable: cdk.stringToCloudFormation(properties.executable),
        MemorySize: cdk.numberToCloudFormation(properties.memorySize),
        Pinned: cdk.booleanToCloudFormation(properties.pinned),
        Timeout: cdk.numberToCloudFormation(properties.timeout),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionFunctionConfigurationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('encodingType', 'EncodingType', properties.EncodingType != null ? cfn_parse.FromCloudFormation.getString(properties.EncodingType) : undefined);
    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? CfnFunctionDefinitionVersionEnvironmentPropertyFromCloudFormation(properties.Environment) : undefined);
    ret.addPropertyResult('execArgs', 'ExecArgs', properties.ExecArgs != null ? cfn_parse.FromCloudFormation.getString(properties.ExecArgs) : undefined);
    ret.addPropertyResult('executable', 'Executable', properties.Executable != null ? cfn_parse.FromCloudFormation.getString(properties.Executable) : undefined);
    ret.addPropertyResult('memorySize', 'MemorySize', properties.MemorySize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MemorySize) : undefined);
    ret.addPropertyResult('pinned', 'Pinned', properties.Pinned != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Pinned) : undefined);
    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceAccessPolicyProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceAccessPolicyProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersion_ResourceAccessPolicyPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('permission', cdk.validateString)(properties.permission));
    errors.collect(cdk.propertyValidator('resourceId', cdk.requiredValidator)(properties.resourceId));
    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));
    return errors.wrap('supplied properties not correct for "ResourceAccessPolicyProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.ResourceAccessPolicy` resource
 *
 * @param properties - the TypeScript properties of a `ResourceAccessPolicyProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.ResourceAccessPolicy` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionResourceAccessPolicyPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersion_ResourceAccessPolicyPropertyValidator(properties).assertSuccess();
    return {
        Permission: cdk.stringToCloudFormation(properties.permission),
        ResourceId: cdk.stringToCloudFormation(properties.resourceId),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionResourceAccessPolicyPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('permission', 'Permission', properties.Permission != null ? cfn_parse.FromCloudFormation.getString(properties.Permission) : undefined);
    ret.addPropertyResult('resourceId', 'ResourceId', cfn_parse.FromCloudFormation.getString(properties.ResourceId));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `RunAsProperty`
 *
 * @param properties - the TypeScript properties of a `RunAsProperty`
 *
 * @returns the result of the validation.
 */
function CfnFunctionDefinitionVersion_RunAsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('gid', cdk.validateNumber)(properties.gid));
    errors.collect(cdk.propertyValidator('uid', cdk.validateNumber)(properties.uid));
    return errors.wrap('supplied properties not correct for "RunAsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.RunAs` resource
 *
 * @param properties - the TypeScript properties of a `RunAsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::FunctionDefinitionVersion.RunAs` resource.
 */
// @ts-ignore TS6133
function cfnFunctionDefinitionVersionRunAsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFunctionDefinitionVersion_RunAsPropertyValidator(properties).assertSuccess();
    return {
        Gid: cdk.numberToCloudFormation(properties.gid),
        Uid: cdk.numberToCloudFormation(properties.uid),
    };
}
// @ts-ignore TS6133
function CfnFunctionDefinitionVersionRunAsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('gid', 'Gid', properties.Gid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Gid) : undefined);
    ret.addPropertyResult('uid', 'Uid', properties.Uid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Uid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnGroupProps`
 *
 * @param properties - the TypeScript properties of a `CfnGroupProps`
 *
 * @returns the result of the validation.
 */
function CfnGroupPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnGroup_GroupVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnGroupProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::Group` resource
 *
 * @param properties - the TypeScript properties of a `CfnGroupProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::Group` resource.
 */
// @ts-ignore TS6133
function cfnGroupPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnGroupPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnGroupGroupVersionPropertyToCloudFormation(properties.initialVersion),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnGroupPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnGroupGroupVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::Group`
 *
 * AWS IoT Greengrass seamlessly extends AWS to edge devices so they can act locally on the data they generate, while still using the cloud for management, analytics, and durable storage. With AWS IoT Greengrass , connected devices can run AWS Lambda functions, execute predictions based on machine learning models, keep device data in sync, and communicate with other devices securely – even when not connected to the internet. For more information, see the [Developer Guide](https://docs.aws.amazon.com/greengrass/latest/developerguide/what-is-gg.html) .
 *
 * > For AWS Region support, see [AWS CloudFormation Support for AWS IoT Greengrass](https://docs.aws.amazon.com/greengrass/latest/developerguide/cloudformation-support.html) in the *Developer Guide* .
 *
 * The `AWS::Greengrass::Group` resource represents a group in AWS IoT Greengrass . In the AWS IoT Greengrass API, groups are used to organize your group versions.
 *
 * Groups can reference multiple group versions. All group versions must be associated with a group. A group version references a device definition version, subscription definition version, and other version types that contain the components you want to deploy to a Greengrass core device.
 *
 * To deploy a group version, the group version must reference a core definition version that contains one core. Other version types are optionally included, depending on your business need.
 *
 * > When you create a group, you can optionally include an initial group version. To associate a group version later, create a [`AWS::Greengrass::GroupVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-groupversion.html) resource and specify the ID of this group.
 * >
 * > To change group components (such as devices, subscriptions, or functions), you must create new versions. This is because versions are immutable. For example, to add a function, you create a function definition version that contains the new function (and all other functions that you want to deploy). Then you create a group version that references the new function definition version (and all other version types that you want to deploy).
 *
 * *Deploying a Group Version*
 *
 * After you create the group version in your AWS CloudFormation template, you can deploy it using the [`aws greengrass create-deployment`](https://docs.aws.amazon.com/greengrass/latest/apireference/createdeployment-post.html) command in the AWS CLI or from the *Greengrass* node in the AWS IoT console. To deploy a group version, you must have a Greengrass service role associated with your AWS account . For more information, see [AWS CloudFormation Support for AWS IoT Greengrass](https://docs.aws.amazon.com/greengrass/latest/developerguide/cloudformation-support.html) in the *Developer Guide* .
 *
 * @cloudformationResource AWS::Greengrass::Group
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html
 */
class CfnGroup extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnGroupPropsFromCloudFormation(resourceProperties);
        const ret = new CfnGroup(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::Group`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnGroup.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnGroupProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnGroup);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.attrRoleArn = cdk.Token.asString(this.getAtt('RoleArn', cdk.ResolutionTypeHint.STRING));
        this.attrRoleAttachedAt = cdk.Token.asString(this.getAtt('RoleAttachedAt', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.roleArn = props.roleArn;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::Group", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnGroup.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            roleArn: this.roleArn,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnGroupPropsToCloudFormation(props);
    }
}
_j = JSII_RTTI_SYMBOL_1;
CfnGroup[_j] = { fqn: "aws-cdk-lib.aws_greengrass.CfnGroup", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnGroup.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::Group";
exports.CfnGroup = CfnGroup;
/**
 * Determine whether the given properties match those of a `GroupVersionProperty`
 *
 * @param properties - the TypeScript properties of a `GroupVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnGroup_GroupVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectorDefinitionVersionArn', cdk.validateString)(properties.connectorDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('coreDefinitionVersionArn', cdk.validateString)(properties.coreDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('deviceDefinitionVersionArn', cdk.validateString)(properties.deviceDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('functionDefinitionVersionArn', cdk.validateString)(properties.functionDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('loggerDefinitionVersionArn', cdk.validateString)(properties.loggerDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('resourceDefinitionVersionArn', cdk.validateString)(properties.resourceDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('subscriptionDefinitionVersionArn', cdk.validateString)(properties.subscriptionDefinitionVersionArn));
    return errors.wrap('supplied properties not correct for "GroupVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::Group.GroupVersion` resource
 *
 * @param properties - the TypeScript properties of a `GroupVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::Group.GroupVersion` resource.
 */
// @ts-ignore TS6133
function cfnGroupGroupVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnGroup_GroupVersionPropertyValidator(properties).assertSuccess();
    return {
        ConnectorDefinitionVersionArn: cdk.stringToCloudFormation(properties.connectorDefinitionVersionArn),
        CoreDefinitionVersionArn: cdk.stringToCloudFormation(properties.coreDefinitionVersionArn),
        DeviceDefinitionVersionArn: cdk.stringToCloudFormation(properties.deviceDefinitionVersionArn),
        FunctionDefinitionVersionArn: cdk.stringToCloudFormation(properties.functionDefinitionVersionArn),
        LoggerDefinitionVersionArn: cdk.stringToCloudFormation(properties.loggerDefinitionVersionArn),
        ResourceDefinitionVersionArn: cdk.stringToCloudFormation(properties.resourceDefinitionVersionArn),
        SubscriptionDefinitionVersionArn: cdk.stringToCloudFormation(properties.subscriptionDefinitionVersionArn),
    };
}
// @ts-ignore TS6133
function CfnGroupGroupVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectorDefinitionVersionArn', 'ConnectorDefinitionVersionArn', properties.ConnectorDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectorDefinitionVersionArn) : undefined);
    ret.addPropertyResult('coreDefinitionVersionArn', 'CoreDefinitionVersionArn', properties.CoreDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.CoreDefinitionVersionArn) : undefined);
    ret.addPropertyResult('deviceDefinitionVersionArn', 'DeviceDefinitionVersionArn', properties.DeviceDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceDefinitionVersionArn) : undefined);
    ret.addPropertyResult('functionDefinitionVersionArn', 'FunctionDefinitionVersionArn', properties.FunctionDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.FunctionDefinitionVersionArn) : undefined);
    ret.addPropertyResult('loggerDefinitionVersionArn', 'LoggerDefinitionVersionArn', properties.LoggerDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.LoggerDefinitionVersionArn) : undefined);
    ret.addPropertyResult('resourceDefinitionVersionArn', 'ResourceDefinitionVersionArn', properties.ResourceDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceDefinitionVersionArn) : undefined);
    ret.addPropertyResult('subscriptionDefinitionVersionArn', 'SubscriptionDefinitionVersionArn', properties.SubscriptionDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SubscriptionDefinitionVersionArn) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnGroupVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnGroupVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnGroupVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectorDefinitionVersionArn', cdk.validateString)(properties.connectorDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('coreDefinitionVersionArn', cdk.validateString)(properties.coreDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('deviceDefinitionVersionArn', cdk.validateString)(properties.deviceDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('functionDefinitionVersionArn', cdk.validateString)(properties.functionDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('groupId', cdk.requiredValidator)(properties.groupId));
    errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));
    errors.collect(cdk.propertyValidator('loggerDefinitionVersionArn', cdk.validateString)(properties.loggerDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('resourceDefinitionVersionArn', cdk.validateString)(properties.resourceDefinitionVersionArn));
    errors.collect(cdk.propertyValidator('subscriptionDefinitionVersionArn', cdk.validateString)(properties.subscriptionDefinitionVersionArn));
    return errors.wrap('supplied properties not correct for "CfnGroupVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::GroupVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnGroupVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::GroupVersion` resource.
 */
// @ts-ignore TS6133
function cfnGroupVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnGroupVersionPropsValidator(properties).assertSuccess();
    return {
        GroupId: cdk.stringToCloudFormation(properties.groupId),
        ConnectorDefinitionVersionArn: cdk.stringToCloudFormation(properties.connectorDefinitionVersionArn),
        CoreDefinitionVersionArn: cdk.stringToCloudFormation(properties.coreDefinitionVersionArn),
        DeviceDefinitionVersionArn: cdk.stringToCloudFormation(properties.deviceDefinitionVersionArn),
        FunctionDefinitionVersionArn: cdk.stringToCloudFormation(properties.functionDefinitionVersionArn),
        LoggerDefinitionVersionArn: cdk.stringToCloudFormation(properties.loggerDefinitionVersionArn),
        ResourceDefinitionVersionArn: cdk.stringToCloudFormation(properties.resourceDefinitionVersionArn),
        SubscriptionDefinitionVersionArn: cdk.stringToCloudFormation(properties.subscriptionDefinitionVersionArn),
    };
}
// @ts-ignore TS6133
function CfnGroupVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('groupId', 'GroupId', cfn_parse.FromCloudFormation.getString(properties.GroupId));
    ret.addPropertyResult('connectorDefinitionVersionArn', 'ConnectorDefinitionVersionArn', properties.ConnectorDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectorDefinitionVersionArn) : undefined);
    ret.addPropertyResult('coreDefinitionVersionArn', 'CoreDefinitionVersionArn', properties.CoreDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.CoreDefinitionVersionArn) : undefined);
    ret.addPropertyResult('deviceDefinitionVersionArn', 'DeviceDefinitionVersionArn', properties.DeviceDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceDefinitionVersionArn) : undefined);
    ret.addPropertyResult('functionDefinitionVersionArn', 'FunctionDefinitionVersionArn', properties.FunctionDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.FunctionDefinitionVersionArn) : undefined);
    ret.addPropertyResult('loggerDefinitionVersionArn', 'LoggerDefinitionVersionArn', properties.LoggerDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.LoggerDefinitionVersionArn) : undefined);
    ret.addPropertyResult('resourceDefinitionVersionArn', 'ResourceDefinitionVersionArn', properties.ResourceDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceDefinitionVersionArn) : undefined);
    ret.addPropertyResult('subscriptionDefinitionVersionArn', 'SubscriptionDefinitionVersionArn', properties.SubscriptionDefinitionVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SubscriptionDefinitionVersionArn) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::GroupVersion`
 *
 * The `AWS::Greengrass::GroupVersion` resource represents a group version in AWS IoT Greengrass . A group version references a core definition version, device definition version, subscription definition version, and other version types that contain the components you want to deploy to a Greengrass core device. The group version must reference a core definition version that contains one core. Other version types are optionally included, depending on your business need.
 *
 * > To create a group version, you must specify the ID of the group that you want to associate with the version. For information about creating a group, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::GroupVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-groupversion.html
 */
class CfnGroupVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnGroupVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnGroupVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::GroupVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnGroupVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnGroupVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnGroupVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'groupId', this);
        this.groupId = props.groupId;
        this.connectorDefinitionVersionArn = props.connectorDefinitionVersionArn;
        this.coreDefinitionVersionArn = props.coreDefinitionVersionArn;
        this.deviceDefinitionVersionArn = props.deviceDefinitionVersionArn;
        this.functionDefinitionVersionArn = props.functionDefinitionVersionArn;
        this.loggerDefinitionVersionArn = props.loggerDefinitionVersionArn;
        this.resourceDefinitionVersionArn = props.resourceDefinitionVersionArn;
        this.subscriptionDefinitionVersionArn = props.subscriptionDefinitionVersionArn;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnGroupVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            groupId: this.groupId,
            connectorDefinitionVersionArn: this.connectorDefinitionVersionArn,
            coreDefinitionVersionArn: this.coreDefinitionVersionArn,
            deviceDefinitionVersionArn: this.deviceDefinitionVersionArn,
            functionDefinitionVersionArn: this.functionDefinitionVersionArn,
            loggerDefinitionVersionArn: this.loggerDefinitionVersionArn,
            resourceDefinitionVersionArn: this.resourceDefinitionVersionArn,
            subscriptionDefinitionVersionArn: this.subscriptionDefinitionVersionArn,
        };
    }
    renderProperties(props) {
        return cfnGroupVersionPropsToCloudFormation(props);
    }
}
_k = JSII_RTTI_SYMBOL_1;
CfnGroupVersion[_k] = { fqn: "aws-cdk-lib.aws_greengrass.CfnGroupVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnGroupVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::GroupVersion";
exports.CfnGroupVersion = CfnGroupVersion;
/**
 * Determine whether the given properties match those of a `CfnLoggerDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnLoggerDefinitionProps`
 *
 * @returns the result of the validation.
 */
function CfnLoggerDefinitionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnLoggerDefinition_LoggerDefinitionVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnLoggerDefinitionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinition` resource
 *
 * @param properties - the TypeScript properties of a `CfnLoggerDefinitionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinition` resource.
 */
// @ts-ignore TS6133
function cfnLoggerDefinitionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnLoggerDefinitionPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnLoggerDefinitionLoggerDefinitionVersionPropertyToCloudFormation(properties.initialVersion),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnLoggerDefinitionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnLoggerDefinitionLoggerDefinitionVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::LoggerDefinition`
 *
 * The `AWS::Greengrass::LoggerDefinition` resource represents a logger definition for AWS IoT Greengrass . Logger definitions are used to organize your logger definition versions.
 *
 * Logger definitions can reference multiple logger definition versions. All logger definition versions must be associated with a logger definition. Each logger definition version can contain one or more loggers.
 *
 * > When you create a logger definition, you can optionally include an initial logger definition version. To associate a logger definition version later, create an [`AWS::Greengrass::LoggerDefinitionVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinitionversion.html) resource and specify the ID of this logger definition.
 * >
 * > After you create the logger definition version that contains the loggers you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::LoggerDefinition
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html
 */
class CfnLoggerDefinition extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLoggerDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnLoggerDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::LoggerDefinition`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnLoggerDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnLoggerDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnLoggerDefinition);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::LoggerDefinition", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLoggerDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnLoggerDefinitionPropsToCloudFormation(props);
    }
}
_l = JSII_RTTI_SYMBOL_1;
CfnLoggerDefinition[_l] = { fqn: "aws-cdk-lib.aws_greengrass.CfnLoggerDefinition", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnLoggerDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::LoggerDefinition";
exports.CfnLoggerDefinition = CfnLoggerDefinition;
/**
 * Determine whether the given properties match those of a `LoggerProperty`
 *
 * @param properties - the TypeScript properties of a `LoggerProperty`
 *
 * @returns the result of the validation.
 */
function CfnLoggerDefinition_LoggerPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('component', cdk.requiredValidator)(properties.component));
    errors.collect(cdk.propertyValidator('component', cdk.validateString)(properties.component));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('level', cdk.requiredValidator)(properties.level));
    errors.collect(cdk.propertyValidator('level', cdk.validateString)(properties.level));
    errors.collect(cdk.propertyValidator('space', cdk.validateNumber)(properties.space));
    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
    return errors.wrap('supplied properties not correct for "LoggerProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinition.Logger` resource
 *
 * @param properties - the TypeScript properties of a `LoggerProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinition.Logger` resource.
 */
// @ts-ignore TS6133
function cfnLoggerDefinitionLoggerPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnLoggerDefinition_LoggerPropertyValidator(properties).assertSuccess();
    return {
        Component: cdk.stringToCloudFormation(properties.component),
        Id: cdk.stringToCloudFormation(properties.id),
        Level: cdk.stringToCloudFormation(properties.level),
        Space: cdk.numberToCloudFormation(properties.space),
        Type: cdk.stringToCloudFormation(properties.type),
    };
}
// @ts-ignore TS6133
function CfnLoggerDefinitionLoggerPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('component', 'Component', cfn_parse.FromCloudFormation.getString(properties.Component));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('level', 'Level', cfn_parse.FromCloudFormation.getString(properties.Level));
    ret.addPropertyResult('space', 'Space', properties.Space != null ? cfn_parse.FromCloudFormation.getNumber(properties.Space) : undefined);
    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `LoggerDefinitionVersionProperty`
 *
 * @param properties - the TypeScript properties of a `LoggerDefinitionVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnLoggerDefinition_LoggerDefinitionVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('loggers', cdk.requiredValidator)(properties.loggers));
    errors.collect(cdk.propertyValidator('loggers', cdk.listValidator(CfnLoggerDefinition_LoggerPropertyValidator))(properties.loggers));
    return errors.wrap('supplied properties not correct for "LoggerDefinitionVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinition.LoggerDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `LoggerDefinitionVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinition.LoggerDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnLoggerDefinitionLoggerDefinitionVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnLoggerDefinition_LoggerDefinitionVersionPropertyValidator(properties).assertSuccess();
    return {
        Loggers: cdk.listMapper(cfnLoggerDefinitionLoggerPropertyToCloudFormation)(properties.loggers),
    };
}
// @ts-ignore TS6133
function CfnLoggerDefinitionLoggerDefinitionVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('loggers', 'Loggers', cfn_parse.FromCloudFormation.getArray(CfnLoggerDefinitionLoggerPropertyFromCloudFormation)(properties.Loggers));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnLoggerDefinitionVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnLoggerDefinitionVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnLoggerDefinitionVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('loggerDefinitionId', cdk.requiredValidator)(properties.loggerDefinitionId));
    errors.collect(cdk.propertyValidator('loggerDefinitionId', cdk.validateString)(properties.loggerDefinitionId));
    errors.collect(cdk.propertyValidator('loggers', cdk.requiredValidator)(properties.loggers));
    errors.collect(cdk.propertyValidator('loggers', cdk.listValidator(CfnLoggerDefinitionVersion_LoggerPropertyValidator))(properties.loggers));
    return errors.wrap('supplied properties not correct for "CfnLoggerDefinitionVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnLoggerDefinitionVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnLoggerDefinitionVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnLoggerDefinitionVersionPropsValidator(properties).assertSuccess();
    return {
        LoggerDefinitionId: cdk.stringToCloudFormation(properties.loggerDefinitionId),
        Loggers: cdk.listMapper(cfnLoggerDefinitionVersionLoggerPropertyToCloudFormation)(properties.loggers),
    };
}
// @ts-ignore TS6133
function CfnLoggerDefinitionVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('loggerDefinitionId', 'LoggerDefinitionId', cfn_parse.FromCloudFormation.getString(properties.LoggerDefinitionId));
    ret.addPropertyResult('loggers', 'Loggers', cfn_parse.FromCloudFormation.getArray(CfnLoggerDefinitionVersionLoggerPropertyFromCloudFormation)(properties.Loggers));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::LoggerDefinitionVersion`
 *
 * The `AWS::Greengrass::LoggerDefinitionVersion` resource represents a logger definition version for AWS IoT Greengrass . A logger definition version contains a list of loggers.
 *
 * > To create a logger definition version, you must specify the ID of the logger definition that you want to associate with the version. For information about creating a logger definition, see [`AWS::Greengrass::LoggerDefinition`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html) .
 * >
 * > After you create a logger definition version that contains the loggers you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::LoggerDefinitionVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinitionversion.html
 */
class CfnLoggerDefinitionVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLoggerDefinitionVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnLoggerDefinitionVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::LoggerDefinitionVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnLoggerDefinitionVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnLoggerDefinitionVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnLoggerDefinitionVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'loggerDefinitionId', this);
        cdk.requireProperty(props, 'loggers', this);
        this.loggerDefinitionId = props.loggerDefinitionId;
        this.loggers = props.loggers;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLoggerDefinitionVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            loggerDefinitionId: this.loggerDefinitionId,
            loggers: this.loggers,
        };
    }
    renderProperties(props) {
        return cfnLoggerDefinitionVersionPropsToCloudFormation(props);
    }
}
_m = JSII_RTTI_SYMBOL_1;
CfnLoggerDefinitionVersion[_m] = { fqn: "aws-cdk-lib.aws_greengrass.CfnLoggerDefinitionVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnLoggerDefinitionVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::LoggerDefinitionVersion";
exports.CfnLoggerDefinitionVersion = CfnLoggerDefinitionVersion;
/**
 * Determine whether the given properties match those of a `LoggerProperty`
 *
 * @param properties - the TypeScript properties of a `LoggerProperty`
 *
 * @returns the result of the validation.
 */
function CfnLoggerDefinitionVersion_LoggerPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('component', cdk.requiredValidator)(properties.component));
    errors.collect(cdk.propertyValidator('component', cdk.validateString)(properties.component));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('level', cdk.requiredValidator)(properties.level));
    errors.collect(cdk.propertyValidator('level', cdk.validateString)(properties.level));
    errors.collect(cdk.propertyValidator('space', cdk.validateNumber)(properties.space));
    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
    return errors.wrap('supplied properties not correct for "LoggerProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinitionVersion.Logger` resource
 *
 * @param properties - the TypeScript properties of a `LoggerProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::LoggerDefinitionVersion.Logger` resource.
 */
// @ts-ignore TS6133
function cfnLoggerDefinitionVersionLoggerPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnLoggerDefinitionVersion_LoggerPropertyValidator(properties).assertSuccess();
    return {
        Component: cdk.stringToCloudFormation(properties.component),
        Id: cdk.stringToCloudFormation(properties.id),
        Level: cdk.stringToCloudFormation(properties.level),
        Space: cdk.numberToCloudFormation(properties.space),
        Type: cdk.stringToCloudFormation(properties.type),
    };
}
// @ts-ignore TS6133
function CfnLoggerDefinitionVersionLoggerPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('component', 'Component', cfn_parse.FromCloudFormation.getString(properties.Component));
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('level', 'Level', cfn_parse.FromCloudFormation.getString(properties.Level));
    ret.addPropertyResult('space', 'Space', properties.Space != null ? cfn_parse.FromCloudFormation.getNumber(properties.Space) : undefined);
    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnResourceDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnResourceDefinitionProps`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnResourceDefinition_ResourceDefinitionVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnResourceDefinitionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition` resource
 *
 * @param properties - the TypeScript properties of a `CfnResourceDefinitionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnResourceDefinitionResourceDefinitionVersionPropertyToCloudFormation(properties.initialVersion),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnResourceDefinitionResourceDefinitionVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::ResourceDefinition`
 *
 * The `AWS::Greengrass::ResourceDefinition` resource represents a resource definition for AWS IoT Greengrass . Resource definitions are used to organize your resource definition versions.
 *
 * Resource definitions can reference multiple resource definition versions. All resource definition versions must be associated with a resource definition. Each resource definition version can contain one or more resources. (In AWS CloudFormation , resources are named *resource instances* .)
 *
 * > When you create a resource definition, you can optionally include an initial resource definition version. To associate a resource definition version later, create an [`AWS::Greengrass::ResourceDefinitionVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-resourcedefinitionversion.html) resource and specify the ID of this resource definition.
 * >
 * > After you create the resource definition version that contains the resources you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::ResourceDefinition
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-resourcedefinition.html
 */
class CfnResourceDefinition extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnResourceDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnResourceDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::ResourceDefinition`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnResourceDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnResourceDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnResourceDefinition);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::ResourceDefinition", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnResourceDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnResourceDefinitionPropsToCloudFormation(props);
    }
}
_o = JSII_RTTI_SYMBOL_1;
CfnResourceDefinition[_o] = { fqn: "aws-cdk-lib.aws_greengrass.CfnResourceDefinition", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnResourceDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::ResourceDefinition";
exports.CfnResourceDefinition = CfnResourceDefinition;
/**
 * Determine whether the given properties match those of a `GroupOwnerSettingProperty`
 *
 * @param properties - the TypeScript properties of a `GroupOwnerSettingProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_GroupOwnerSettingPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('autoAddGroupOwner', cdk.requiredValidator)(properties.autoAddGroupOwner));
    errors.collect(cdk.propertyValidator('autoAddGroupOwner', cdk.validateBoolean)(properties.autoAddGroupOwner));
    errors.collect(cdk.propertyValidator('groupOwner', cdk.validateString)(properties.groupOwner));
    return errors.wrap('supplied properties not correct for "GroupOwnerSettingProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.GroupOwnerSetting` resource
 *
 * @param properties - the TypeScript properties of a `GroupOwnerSettingProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.GroupOwnerSetting` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionGroupOwnerSettingPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_GroupOwnerSettingPropertyValidator(properties).assertSuccess();
    return {
        AutoAddGroupOwner: cdk.booleanToCloudFormation(properties.autoAddGroupOwner),
        GroupOwner: cdk.stringToCloudFormation(properties.groupOwner),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionGroupOwnerSettingPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('autoAddGroupOwner', 'AutoAddGroupOwner', cfn_parse.FromCloudFormation.getBoolean(properties.AutoAddGroupOwner));
    ret.addPropertyResult('groupOwner', 'GroupOwner', properties.GroupOwner != null ? cfn_parse.FromCloudFormation.getString(properties.GroupOwner) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `LocalDeviceResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `LocalDeviceResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_LocalDeviceResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('groupOwnerSetting', CfnResourceDefinition_GroupOwnerSettingPropertyValidator)(properties.groupOwnerSetting));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.requiredValidator)(properties.sourcePath));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.validateString)(properties.sourcePath));
    return errors.wrap('supplied properties not correct for "LocalDeviceResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.LocalDeviceResourceData` resource
 *
 * @param properties - the TypeScript properties of a `LocalDeviceResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.LocalDeviceResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionLocalDeviceResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_LocalDeviceResourceDataPropertyValidator(properties).assertSuccess();
    return {
        GroupOwnerSetting: cfnResourceDefinitionGroupOwnerSettingPropertyToCloudFormation(properties.groupOwnerSetting),
        SourcePath: cdk.stringToCloudFormation(properties.sourcePath),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionLocalDeviceResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('groupOwnerSetting', 'GroupOwnerSetting', properties.GroupOwnerSetting != null ? CfnResourceDefinitionGroupOwnerSettingPropertyFromCloudFormation(properties.GroupOwnerSetting) : undefined);
    ret.addPropertyResult('sourcePath', 'SourcePath', cfn_parse.FromCloudFormation.getString(properties.SourcePath));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `LocalVolumeResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `LocalVolumeResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_LocalVolumeResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinationPath', cdk.requiredValidator)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('destinationPath', cdk.validateString)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('groupOwnerSetting', CfnResourceDefinition_GroupOwnerSettingPropertyValidator)(properties.groupOwnerSetting));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.requiredValidator)(properties.sourcePath));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.validateString)(properties.sourcePath));
    return errors.wrap('supplied properties not correct for "LocalVolumeResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.LocalVolumeResourceData` resource
 *
 * @param properties - the TypeScript properties of a `LocalVolumeResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.LocalVolumeResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionLocalVolumeResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_LocalVolumeResourceDataPropertyValidator(properties).assertSuccess();
    return {
        DestinationPath: cdk.stringToCloudFormation(properties.destinationPath),
        GroupOwnerSetting: cfnResourceDefinitionGroupOwnerSettingPropertyToCloudFormation(properties.groupOwnerSetting),
        SourcePath: cdk.stringToCloudFormation(properties.sourcePath),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionLocalVolumeResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinationPath', 'DestinationPath', cfn_parse.FromCloudFormation.getString(properties.DestinationPath));
    ret.addPropertyResult('groupOwnerSetting', 'GroupOwnerSetting', properties.GroupOwnerSetting != null ? CfnResourceDefinitionGroupOwnerSettingPropertyFromCloudFormation(properties.GroupOwnerSetting) : undefined);
    ret.addPropertyResult('sourcePath', 'SourcePath', cfn_parse.FromCloudFormation.getString(properties.SourcePath));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceDataContainerProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceDataContainerProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_ResourceDataContainerPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('localDeviceResourceData', CfnResourceDefinition_LocalDeviceResourceDataPropertyValidator)(properties.localDeviceResourceData));
    errors.collect(cdk.propertyValidator('localVolumeResourceData', CfnResourceDefinition_LocalVolumeResourceDataPropertyValidator)(properties.localVolumeResourceData));
    errors.collect(cdk.propertyValidator('s3MachineLearningModelResourceData', CfnResourceDefinition_S3MachineLearningModelResourceDataPropertyValidator)(properties.s3MachineLearningModelResourceData));
    errors.collect(cdk.propertyValidator('sageMakerMachineLearningModelResourceData', CfnResourceDefinition_SageMakerMachineLearningModelResourceDataPropertyValidator)(properties.sageMakerMachineLearningModelResourceData));
    errors.collect(cdk.propertyValidator('secretsManagerSecretResourceData', CfnResourceDefinition_SecretsManagerSecretResourceDataPropertyValidator)(properties.secretsManagerSecretResourceData));
    return errors.wrap('supplied properties not correct for "ResourceDataContainerProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceDataContainer` resource
 *
 * @param properties - the TypeScript properties of a `ResourceDataContainerProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceDataContainer` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionResourceDataContainerPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_ResourceDataContainerPropertyValidator(properties).assertSuccess();
    return {
        LocalDeviceResourceData: cfnResourceDefinitionLocalDeviceResourceDataPropertyToCloudFormation(properties.localDeviceResourceData),
        LocalVolumeResourceData: cfnResourceDefinitionLocalVolumeResourceDataPropertyToCloudFormation(properties.localVolumeResourceData),
        S3MachineLearningModelResourceData: cfnResourceDefinitionS3MachineLearningModelResourceDataPropertyToCloudFormation(properties.s3MachineLearningModelResourceData),
        SageMakerMachineLearningModelResourceData: cfnResourceDefinitionSageMakerMachineLearningModelResourceDataPropertyToCloudFormation(properties.sageMakerMachineLearningModelResourceData),
        SecretsManagerSecretResourceData: cfnResourceDefinitionSecretsManagerSecretResourceDataPropertyToCloudFormation(properties.secretsManagerSecretResourceData),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionResourceDataContainerPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('localDeviceResourceData', 'LocalDeviceResourceData', properties.LocalDeviceResourceData != null ? CfnResourceDefinitionLocalDeviceResourceDataPropertyFromCloudFormation(properties.LocalDeviceResourceData) : undefined);
    ret.addPropertyResult('localVolumeResourceData', 'LocalVolumeResourceData', properties.LocalVolumeResourceData != null ? CfnResourceDefinitionLocalVolumeResourceDataPropertyFromCloudFormation(properties.LocalVolumeResourceData) : undefined);
    ret.addPropertyResult('s3MachineLearningModelResourceData', 'S3MachineLearningModelResourceData', properties.S3MachineLearningModelResourceData != null ? CfnResourceDefinitionS3MachineLearningModelResourceDataPropertyFromCloudFormation(properties.S3MachineLearningModelResourceData) : undefined);
    ret.addPropertyResult('sageMakerMachineLearningModelResourceData', 'SageMakerMachineLearningModelResourceData', properties.SageMakerMachineLearningModelResourceData != null ? CfnResourceDefinitionSageMakerMachineLearningModelResourceDataPropertyFromCloudFormation(properties.SageMakerMachineLearningModelResourceData) : undefined);
    ret.addPropertyResult('secretsManagerSecretResourceData', 'SecretsManagerSecretResourceData', properties.SecretsManagerSecretResourceData != null ? CfnResourceDefinitionSecretsManagerSecretResourceDataPropertyFromCloudFormation(properties.SecretsManagerSecretResourceData) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceDefinitionVersionProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceDefinitionVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_ResourceDefinitionVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('resources', cdk.requiredValidator)(properties.resources));
    errors.collect(cdk.propertyValidator('resources', cdk.listValidator(CfnResourceDefinition_ResourceInstancePropertyValidator))(properties.resources));
    return errors.wrap('supplied properties not correct for "ResourceDefinitionVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `ResourceDefinitionVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionResourceDefinitionVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_ResourceDefinitionVersionPropertyValidator(properties).assertSuccess();
    return {
        Resources: cdk.listMapper(cfnResourceDefinitionResourceInstancePropertyToCloudFormation)(properties.resources),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionResourceDefinitionVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('resources', 'Resources', cfn_parse.FromCloudFormation.getArray(CfnResourceDefinitionResourceInstancePropertyFromCloudFormation)(properties.Resources));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceDownloadOwnerSettingProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceDownloadOwnerSettingProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_ResourceDownloadOwnerSettingPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('groupOwner', cdk.requiredValidator)(properties.groupOwner));
    errors.collect(cdk.propertyValidator('groupOwner', cdk.validateString)(properties.groupOwner));
    errors.collect(cdk.propertyValidator('groupPermission', cdk.requiredValidator)(properties.groupPermission));
    errors.collect(cdk.propertyValidator('groupPermission', cdk.validateString)(properties.groupPermission));
    return errors.wrap('supplied properties not correct for "ResourceDownloadOwnerSettingProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceDownloadOwnerSetting` resource
 *
 * @param properties - the TypeScript properties of a `ResourceDownloadOwnerSettingProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceDownloadOwnerSetting` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionResourceDownloadOwnerSettingPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_ResourceDownloadOwnerSettingPropertyValidator(properties).assertSuccess();
    return {
        GroupOwner: cdk.stringToCloudFormation(properties.groupOwner),
        GroupPermission: cdk.stringToCloudFormation(properties.groupPermission),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionResourceDownloadOwnerSettingPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('groupOwner', 'GroupOwner', cfn_parse.FromCloudFormation.getString(properties.GroupOwner));
    ret.addPropertyResult('groupPermission', 'GroupPermission', cfn_parse.FromCloudFormation.getString(properties.GroupPermission));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceInstanceProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceInstanceProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_ResourceInstancePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('resourceDataContainer', cdk.requiredValidator)(properties.resourceDataContainer));
    errors.collect(cdk.propertyValidator('resourceDataContainer', CfnResourceDefinition_ResourceDataContainerPropertyValidator)(properties.resourceDataContainer));
    return errors.wrap('supplied properties not correct for "ResourceInstanceProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceInstance` resource
 *
 * @param properties - the TypeScript properties of a `ResourceInstanceProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.ResourceInstance` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionResourceInstancePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_ResourceInstancePropertyValidator(properties).assertSuccess();
    return {
        Id: cdk.stringToCloudFormation(properties.id),
        Name: cdk.stringToCloudFormation(properties.name),
        ResourceDataContainer: cfnResourceDefinitionResourceDataContainerPropertyToCloudFormation(properties.resourceDataContainer),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionResourceInstancePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('resourceDataContainer', 'ResourceDataContainer', CfnResourceDefinitionResourceDataContainerPropertyFromCloudFormation(properties.ResourceDataContainer));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `S3MachineLearningModelResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `S3MachineLearningModelResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_S3MachineLearningModelResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinationPath', cdk.requiredValidator)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('destinationPath', cdk.validateString)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('ownerSetting', CfnResourceDefinition_ResourceDownloadOwnerSettingPropertyValidator)(properties.ownerSetting));
    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));
    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));
    return errors.wrap('supplied properties not correct for "S3MachineLearningModelResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.S3MachineLearningModelResourceData` resource
 *
 * @param properties - the TypeScript properties of a `S3MachineLearningModelResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.S3MachineLearningModelResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionS3MachineLearningModelResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_S3MachineLearningModelResourceDataPropertyValidator(properties).assertSuccess();
    return {
        DestinationPath: cdk.stringToCloudFormation(properties.destinationPath),
        OwnerSetting: cfnResourceDefinitionResourceDownloadOwnerSettingPropertyToCloudFormation(properties.ownerSetting),
        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionS3MachineLearningModelResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinationPath', 'DestinationPath', cfn_parse.FromCloudFormation.getString(properties.DestinationPath));
    ret.addPropertyResult('ownerSetting', 'OwnerSetting', properties.OwnerSetting != null ? CfnResourceDefinitionResourceDownloadOwnerSettingPropertyFromCloudFormation(properties.OwnerSetting) : undefined);
    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `SageMakerMachineLearningModelResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `SageMakerMachineLearningModelResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_SageMakerMachineLearningModelResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinationPath', cdk.requiredValidator)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('destinationPath', cdk.validateString)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('ownerSetting', CfnResourceDefinition_ResourceDownloadOwnerSettingPropertyValidator)(properties.ownerSetting));
    errors.collect(cdk.propertyValidator('sageMakerJobArn', cdk.requiredValidator)(properties.sageMakerJobArn));
    errors.collect(cdk.propertyValidator('sageMakerJobArn', cdk.validateString)(properties.sageMakerJobArn));
    return errors.wrap('supplied properties not correct for "SageMakerMachineLearningModelResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.SageMakerMachineLearningModelResourceData` resource
 *
 * @param properties - the TypeScript properties of a `SageMakerMachineLearningModelResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.SageMakerMachineLearningModelResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionSageMakerMachineLearningModelResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_SageMakerMachineLearningModelResourceDataPropertyValidator(properties).assertSuccess();
    return {
        DestinationPath: cdk.stringToCloudFormation(properties.destinationPath),
        OwnerSetting: cfnResourceDefinitionResourceDownloadOwnerSettingPropertyToCloudFormation(properties.ownerSetting),
        SageMakerJobArn: cdk.stringToCloudFormation(properties.sageMakerJobArn),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionSageMakerMachineLearningModelResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinationPath', 'DestinationPath', cfn_parse.FromCloudFormation.getString(properties.DestinationPath));
    ret.addPropertyResult('ownerSetting', 'OwnerSetting', properties.OwnerSetting != null ? CfnResourceDefinitionResourceDownloadOwnerSettingPropertyFromCloudFormation(properties.OwnerSetting) : undefined);
    ret.addPropertyResult('sageMakerJobArn', 'SageMakerJobArn', cfn_parse.FromCloudFormation.getString(properties.SageMakerJobArn));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `SecretsManagerSecretResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `SecretsManagerSecretResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinition_SecretsManagerSecretResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));
    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));
    errors.collect(cdk.propertyValidator('additionalStagingLabelsToDownload', cdk.listValidator(cdk.validateString))(properties.additionalStagingLabelsToDownload));
    return errors.wrap('supplied properties not correct for "SecretsManagerSecretResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.SecretsManagerSecretResourceData` resource
 *
 * @param properties - the TypeScript properties of a `SecretsManagerSecretResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinition.SecretsManagerSecretResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionSecretsManagerSecretResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinition_SecretsManagerSecretResourceDataPropertyValidator(properties).assertSuccess();
    return {
        ARN: cdk.stringToCloudFormation(properties.arn),
        AdditionalStagingLabelsToDownload: cdk.listMapper(cdk.stringToCloudFormation)(properties.additionalStagingLabelsToDownload),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionSecretsManagerSecretResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('arn', 'ARN', cfn_parse.FromCloudFormation.getString(properties.ARN));
    ret.addPropertyResult('additionalStagingLabelsToDownload', 'AdditionalStagingLabelsToDownload', properties.AdditionalStagingLabelsToDownload != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdditionalStagingLabelsToDownload) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnResourceDefinitionVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnResourceDefinitionVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('resourceDefinitionId', cdk.requiredValidator)(properties.resourceDefinitionId));
    errors.collect(cdk.propertyValidator('resourceDefinitionId', cdk.validateString)(properties.resourceDefinitionId));
    errors.collect(cdk.propertyValidator('resources', cdk.requiredValidator)(properties.resources));
    errors.collect(cdk.propertyValidator('resources', cdk.listValidator(CfnResourceDefinitionVersion_ResourceInstancePropertyValidator))(properties.resources));
    return errors.wrap('supplied properties not correct for "CfnResourceDefinitionVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnResourceDefinitionVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersionPropsValidator(properties).assertSuccess();
    return {
        ResourceDefinitionId: cdk.stringToCloudFormation(properties.resourceDefinitionId),
        Resources: cdk.listMapper(cfnResourceDefinitionVersionResourceInstancePropertyToCloudFormation)(properties.resources),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('resourceDefinitionId', 'ResourceDefinitionId', cfn_parse.FromCloudFormation.getString(properties.ResourceDefinitionId));
    ret.addPropertyResult('resources', 'Resources', cfn_parse.FromCloudFormation.getArray(CfnResourceDefinitionVersionResourceInstancePropertyFromCloudFormation)(properties.Resources));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::ResourceDefinitionVersion`
 *
 * The `AWS::Greengrass::ResourceDefinitionVersion` resource represents a resource definition version for AWS IoT Greengrass . A resource definition version contains a list of resources. (In AWS CloudFormation , resources are named *resource instances* .)
 *
 * > To create a resource definition version, you must specify the ID of the resource definition that you want to associate with the version. For information about creating a resource definition, see [`AWS::Greengrass::ResourceDefinition`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-resourcedefinition.html) .
 * >
 * > After you create a resource definition version that contains the resources you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::ResourceDefinitionVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-resourcedefinitionversion.html
 */
class CfnResourceDefinitionVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnResourceDefinitionVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnResourceDefinitionVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::ResourceDefinitionVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnResourceDefinitionVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnResourceDefinitionVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnResourceDefinitionVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'resourceDefinitionId', this);
        cdk.requireProperty(props, 'resources', this);
        this.resourceDefinitionId = props.resourceDefinitionId;
        this.resources = props.resources;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnResourceDefinitionVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            resourceDefinitionId: this.resourceDefinitionId,
            resources: this.resources,
        };
    }
    renderProperties(props) {
        return cfnResourceDefinitionVersionPropsToCloudFormation(props);
    }
}
_p = JSII_RTTI_SYMBOL_1;
CfnResourceDefinitionVersion[_p] = { fqn: "aws-cdk-lib.aws_greengrass.CfnResourceDefinitionVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnResourceDefinitionVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::ResourceDefinitionVersion";
exports.CfnResourceDefinitionVersion = CfnResourceDefinitionVersion;
/**
 * Determine whether the given properties match those of a `GroupOwnerSettingProperty`
 *
 * @param properties - the TypeScript properties of a `GroupOwnerSettingProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_GroupOwnerSettingPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('autoAddGroupOwner', cdk.requiredValidator)(properties.autoAddGroupOwner));
    errors.collect(cdk.propertyValidator('autoAddGroupOwner', cdk.validateBoolean)(properties.autoAddGroupOwner));
    errors.collect(cdk.propertyValidator('groupOwner', cdk.validateString)(properties.groupOwner));
    return errors.wrap('supplied properties not correct for "GroupOwnerSettingProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting` resource
 *
 * @param properties - the TypeScript properties of a `GroupOwnerSettingProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionGroupOwnerSettingPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_GroupOwnerSettingPropertyValidator(properties).assertSuccess();
    return {
        AutoAddGroupOwner: cdk.booleanToCloudFormation(properties.autoAddGroupOwner),
        GroupOwner: cdk.stringToCloudFormation(properties.groupOwner),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionGroupOwnerSettingPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('autoAddGroupOwner', 'AutoAddGroupOwner', cfn_parse.FromCloudFormation.getBoolean(properties.AutoAddGroupOwner));
    ret.addPropertyResult('groupOwner', 'GroupOwner', properties.GroupOwner != null ? cfn_parse.FromCloudFormation.getString(properties.GroupOwner) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `LocalDeviceResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `LocalDeviceResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_LocalDeviceResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('groupOwnerSetting', CfnResourceDefinitionVersion_GroupOwnerSettingPropertyValidator)(properties.groupOwnerSetting));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.requiredValidator)(properties.sourcePath));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.validateString)(properties.sourcePath));
    return errors.wrap('supplied properties not correct for "LocalDeviceResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.LocalDeviceResourceData` resource
 *
 * @param properties - the TypeScript properties of a `LocalDeviceResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.LocalDeviceResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionLocalDeviceResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_LocalDeviceResourceDataPropertyValidator(properties).assertSuccess();
    return {
        GroupOwnerSetting: cfnResourceDefinitionVersionGroupOwnerSettingPropertyToCloudFormation(properties.groupOwnerSetting),
        SourcePath: cdk.stringToCloudFormation(properties.sourcePath),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionLocalDeviceResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('groupOwnerSetting', 'GroupOwnerSetting', properties.GroupOwnerSetting != null ? CfnResourceDefinitionVersionGroupOwnerSettingPropertyFromCloudFormation(properties.GroupOwnerSetting) : undefined);
    ret.addPropertyResult('sourcePath', 'SourcePath', cfn_parse.FromCloudFormation.getString(properties.SourcePath));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `LocalVolumeResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `LocalVolumeResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_LocalVolumeResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinationPath', cdk.requiredValidator)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('destinationPath', cdk.validateString)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('groupOwnerSetting', CfnResourceDefinitionVersion_GroupOwnerSettingPropertyValidator)(properties.groupOwnerSetting));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.requiredValidator)(properties.sourcePath));
    errors.collect(cdk.propertyValidator('sourcePath', cdk.validateString)(properties.sourcePath));
    return errors.wrap('supplied properties not correct for "LocalVolumeResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.LocalVolumeResourceData` resource
 *
 * @param properties - the TypeScript properties of a `LocalVolumeResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.LocalVolumeResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionLocalVolumeResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_LocalVolumeResourceDataPropertyValidator(properties).assertSuccess();
    return {
        DestinationPath: cdk.stringToCloudFormation(properties.destinationPath),
        GroupOwnerSetting: cfnResourceDefinitionVersionGroupOwnerSettingPropertyToCloudFormation(properties.groupOwnerSetting),
        SourcePath: cdk.stringToCloudFormation(properties.sourcePath),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionLocalVolumeResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinationPath', 'DestinationPath', cfn_parse.FromCloudFormation.getString(properties.DestinationPath));
    ret.addPropertyResult('groupOwnerSetting', 'GroupOwnerSetting', properties.GroupOwnerSetting != null ? CfnResourceDefinitionVersionGroupOwnerSettingPropertyFromCloudFormation(properties.GroupOwnerSetting) : undefined);
    ret.addPropertyResult('sourcePath', 'SourcePath', cfn_parse.FromCloudFormation.getString(properties.SourcePath));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceDataContainerProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceDataContainerProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_ResourceDataContainerPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('localDeviceResourceData', CfnResourceDefinitionVersion_LocalDeviceResourceDataPropertyValidator)(properties.localDeviceResourceData));
    errors.collect(cdk.propertyValidator('localVolumeResourceData', CfnResourceDefinitionVersion_LocalVolumeResourceDataPropertyValidator)(properties.localVolumeResourceData));
    errors.collect(cdk.propertyValidator('s3MachineLearningModelResourceData', CfnResourceDefinitionVersion_S3MachineLearningModelResourceDataPropertyValidator)(properties.s3MachineLearningModelResourceData));
    errors.collect(cdk.propertyValidator('sageMakerMachineLearningModelResourceData', CfnResourceDefinitionVersion_SageMakerMachineLearningModelResourceDataPropertyValidator)(properties.sageMakerMachineLearningModelResourceData));
    errors.collect(cdk.propertyValidator('secretsManagerSecretResourceData', CfnResourceDefinitionVersion_SecretsManagerSecretResourceDataPropertyValidator)(properties.secretsManagerSecretResourceData));
    return errors.wrap('supplied properties not correct for "ResourceDataContainerProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.ResourceDataContainer` resource
 *
 * @param properties - the TypeScript properties of a `ResourceDataContainerProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.ResourceDataContainer` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionResourceDataContainerPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_ResourceDataContainerPropertyValidator(properties).assertSuccess();
    return {
        LocalDeviceResourceData: cfnResourceDefinitionVersionLocalDeviceResourceDataPropertyToCloudFormation(properties.localDeviceResourceData),
        LocalVolumeResourceData: cfnResourceDefinitionVersionLocalVolumeResourceDataPropertyToCloudFormation(properties.localVolumeResourceData),
        S3MachineLearningModelResourceData: cfnResourceDefinitionVersionS3MachineLearningModelResourceDataPropertyToCloudFormation(properties.s3MachineLearningModelResourceData),
        SageMakerMachineLearningModelResourceData: cfnResourceDefinitionVersionSageMakerMachineLearningModelResourceDataPropertyToCloudFormation(properties.sageMakerMachineLearningModelResourceData),
        SecretsManagerSecretResourceData: cfnResourceDefinitionVersionSecretsManagerSecretResourceDataPropertyToCloudFormation(properties.secretsManagerSecretResourceData),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionResourceDataContainerPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('localDeviceResourceData', 'LocalDeviceResourceData', properties.LocalDeviceResourceData != null ? CfnResourceDefinitionVersionLocalDeviceResourceDataPropertyFromCloudFormation(properties.LocalDeviceResourceData) : undefined);
    ret.addPropertyResult('localVolumeResourceData', 'LocalVolumeResourceData', properties.LocalVolumeResourceData != null ? CfnResourceDefinitionVersionLocalVolumeResourceDataPropertyFromCloudFormation(properties.LocalVolumeResourceData) : undefined);
    ret.addPropertyResult('s3MachineLearningModelResourceData', 'S3MachineLearningModelResourceData', properties.S3MachineLearningModelResourceData != null ? CfnResourceDefinitionVersionS3MachineLearningModelResourceDataPropertyFromCloudFormation(properties.S3MachineLearningModelResourceData) : undefined);
    ret.addPropertyResult('sageMakerMachineLearningModelResourceData', 'SageMakerMachineLearningModelResourceData', properties.SageMakerMachineLearningModelResourceData != null ? CfnResourceDefinitionVersionSageMakerMachineLearningModelResourceDataPropertyFromCloudFormation(properties.SageMakerMachineLearningModelResourceData) : undefined);
    ret.addPropertyResult('secretsManagerSecretResourceData', 'SecretsManagerSecretResourceData', properties.SecretsManagerSecretResourceData != null ? CfnResourceDefinitionVersionSecretsManagerSecretResourceDataPropertyFromCloudFormation(properties.SecretsManagerSecretResourceData) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceDownloadOwnerSettingProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceDownloadOwnerSettingProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_ResourceDownloadOwnerSettingPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('groupOwner', cdk.requiredValidator)(properties.groupOwner));
    errors.collect(cdk.propertyValidator('groupOwner', cdk.validateString)(properties.groupOwner));
    errors.collect(cdk.propertyValidator('groupPermission', cdk.requiredValidator)(properties.groupPermission));
    errors.collect(cdk.propertyValidator('groupPermission', cdk.validateString)(properties.groupPermission));
    return errors.wrap('supplied properties not correct for "ResourceDownloadOwnerSettingProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.ResourceDownloadOwnerSetting` resource
 *
 * @param properties - the TypeScript properties of a `ResourceDownloadOwnerSettingProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.ResourceDownloadOwnerSetting` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionResourceDownloadOwnerSettingPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_ResourceDownloadOwnerSettingPropertyValidator(properties).assertSuccess();
    return {
        GroupOwner: cdk.stringToCloudFormation(properties.groupOwner),
        GroupPermission: cdk.stringToCloudFormation(properties.groupPermission),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionResourceDownloadOwnerSettingPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('groupOwner', 'GroupOwner', cfn_parse.FromCloudFormation.getString(properties.GroupOwner));
    ret.addPropertyResult('groupPermission', 'GroupPermission', cfn_parse.FromCloudFormation.getString(properties.GroupPermission));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ResourceInstanceProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceInstanceProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_ResourceInstancePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('resourceDataContainer', cdk.requiredValidator)(properties.resourceDataContainer));
    errors.collect(cdk.propertyValidator('resourceDataContainer', CfnResourceDefinitionVersion_ResourceDataContainerPropertyValidator)(properties.resourceDataContainer));
    return errors.wrap('supplied properties not correct for "ResourceInstanceProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.ResourceInstance` resource
 *
 * @param properties - the TypeScript properties of a `ResourceInstanceProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.ResourceInstance` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionResourceInstancePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_ResourceInstancePropertyValidator(properties).assertSuccess();
    return {
        Id: cdk.stringToCloudFormation(properties.id),
        Name: cdk.stringToCloudFormation(properties.name),
        ResourceDataContainer: cfnResourceDefinitionVersionResourceDataContainerPropertyToCloudFormation(properties.resourceDataContainer),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionResourceInstancePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('resourceDataContainer', 'ResourceDataContainer', CfnResourceDefinitionVersionResourceDataContainerPropertyFromCloudFormation(properties.ResourceDataContainer));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `S3MachineLearningModelResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `S3MachineLearningModelResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_S3MachineLearningModelResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinationPath', cdk.requiredValidator)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('destinationPath', cdk.validateString)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('ownerSetting', CfnResourceDefinitionVersion_ResourceDownloadOwnerSettingPropertyValidator)(properties.ownerSetting));
    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));
    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));
    return errors.wrap('supplied properties not correct for "S3MachineLearningModelResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.S3MachineLearningModelResourceData` resource
 *
 * @param properties - the TypeScript properties of a `S3MachineLearningModelResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.S3MachineLearningModelResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionS3MachineLearningModelResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_S3MachineLearningModelResourceDataPropertyValidator(properties).assertSuccess();
    return {
        DestinationPath: cdk.stringToCloudFormation(properties.destinationPath),
        OwnerSetting: cfnResourceDefinitionVersionResourceDownloadOwnerSettingPropertyToCloudFormation(properties.ownerSetting),
        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionS3MachineLearningModelResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinationPath', 'DestinationPath', cfn_parse.FromCloudFormation.getString(properties.DestinationPath));
    ret.addPropertyResult('ownerSetting', 'OwnerSetting', properties.OwnerSetting != null ? CfnResourceDefinitionVersionResourceDownloadOwnerSettingPropertyFromCloudFormation(properties.OwnerSetting) : undefined);
    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `SageMakerMachineLearningModelResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `SageMakerMachineLearningModelResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_SageMakerMachineLearningModelResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinationPath', cdk.requiredValidator)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('destinationPath', cdk.validateString)(properties.destinationPath));
    errors.collect(cdk.propertyValidator('ownerSetting', CfnResourceDefinitionVersion_ResourceDownloadOwnerSettingPropertyValidator)(properties.ownerSetting));
    errors.collect(cdk.propertyValidator('sageMakerJobArn', cdk.requiredValidator)(properties.sageMakerJobArn));
    errors.collect(cdk.propertyValidator('sageMakerJobArn', cdk.validateString)(properties.sageMakerJobArn));
    return errors.wrap('supplied properties not correct for "SageMakerMachineLearningModelResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.SageMakerMachineLearningModelResourceData` resource
 *
 * @param properties - the TypeScript properties of a `SageMakerMachineLearningModelResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.SageMakerMachineLearningModelResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionSageMakerMachineLearningModelResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_SageMakerMachineLearningModelResourceDataPropertyValidator(properties).assertSuccess();
    return {
        DestinationPath: cdk.stringToCloudFormation(properties.destinationPath),
        OwnerSetting: cfnResourceDefinitionVersionResourceDownloadOwnerSettingPropertyToCloudFormation(properties.ownerSetting),
        SageMakerJobArn: cdk.stringToCloudFormation(properties.sageMakerJobArn),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionSageMakerMachineLearningModelResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinationPath', 'DestinationPath', cfn_parse.FromCloudFormation.getString(properties.DestinationPath));
    ret.addPropertyResult('ownerSetting', 'OwnerSetting', properties.OwnerSetting != null ? CfnResourceDefinitionVersionResourceDownloadOwnerSettingPropertyFromCloudFormation(properties.OwnerSetting) : undefined);
    ret.addPropertyResult('sageMakerJobArn', 'SageMakerJobArn', cfn_parse.FromCloudFormation.getString(properties.SageMakerJobArn));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `SecretsManagerSecretResourceDataProperty`
 *
 * @param properties - the TypeScript properties of a `SecretsManagerSecretResourceDataProperty`
 *
 * @returns the result of the validation.
 */
function CfnResourceDefinitionVersion_SecretsManagerSecretResourceDataPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));
    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));
    errors.collect(cdk.propertyValidator('additionalStagingLabelsToDownload', cdk.listValidator(cdk.validateString))(properties.additionalStagingLabelsToDownload));
    return errors.wrap('supplied properties not correct for "SecretsManagerSecretResourceDataProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.SecretsManagerSecretResourceData` resource
 *
 * @param properties - the TypeScript properties of a `SecretsManagerSecretResourceDataProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::ResourceDefinitionVersion.SecretsManagerSecretResourceData` resource.
 */
// @ts-ignore TS6133
function cfnResourceDefinitionVersionSecretsManagerSecretResourceDataPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnResourceDefinitionVersion_SecretsManagerSecretResourceDataPropertyValidator(properties).assertSuccess();
    return {
        ARN: cdk.stringToCloudFormation(properties.arn),
        AdditionalStagingLabelsToDownload: cdk.listMapper(cdk.stringToCloudFormation)(properties.additionalStagingLabelsToDownload),
    };
}
// @ts-ignore TS6133
function CfnResourceDefinitionVersionSecretsManagerSecretResourceDataPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('arn', 'ARN', cfn_parse.FromCloudFormation.getString(properties.ARN));
    ret.addPropertyResult('additionalStagingLabelsToDownload', 'AdditionalStagingLabelsToDownload', properties.AdditionalStagingLabelsToDownload != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdditionalStagingLabelsToDownload) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnSubscriptionDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnSubscriptionDefinitionProps`
 *
 * @returns the result of the validation.
 */
function CfnSubscriptionDefinitionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialVersion', CfnSubscriptionDefinition_SubscriptionDefinitionVersionPropertyValidator)(properties.initialVersion));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnSubscriptionDefinitionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinition` resource
 *
 * @param properties - the TypeScript properties of a `CfnSubscriptionDefinitionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinition` resource.
 */
// @ts-ignore TS6133
function cfnSubscriptionDefinitionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnSubscriptionDefinitionPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        InitialVersion: cfnSubscriptionDefinitionSubscriptionDefinitionVersionPropertyToCloudFormation(properties.initialVersion),
        Tags: cdk.objectToCloudFormation(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnSubscriptionDefinitionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('initialVersion', 'InitialVersion', properties.InitialVersion != null ? CfnSubscriptionDefinitionSubscriptionDefinitionVersionPropertyFromCloudFormation(properties.InitialVersion) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::SubscriptionDefinition`
 *
 * The `AWS::Greengrass::SubscriptionDefinition` resource represents a subscription definition for AWS IoT Greengrass . Subscription definitions are used to organize your subscription definition versions.
 *
 * Subscription definitions can reference multiple subscription definition versions. All subscription definition versions must be associated with a subscription definition. Each subscription definition version can contain one or more subscriptions.
 *
 * > When you create a subscription definition, you can optionally include an initial subscription definition version. To associate a subscription definition version later, create an [`AWS::Greengrass::SubscriptionDefinitionVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-subscriptiondefinitionversion.html) resource and specify the ID of this subscription definition.
 * >
 * > After you create the subscription definition version that contains the subscriptions you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::SubscriptionDefinition
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-subscriptiondefinition.html
 */
class CfnSubscriptionDefinition extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSubscriptionDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSubscriptionDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::SubscriptionDefinition`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnSubscriptionDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnSubscriptionDefinitionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnSubscriptionDefinition);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrId = cdk.Token.asString(this.getAtt('Id', cdk.ResolutionTypeHint.STRING));
        this.attrLatestVersionArn = cdk.Token.asString(this.getAtt('LatestVersionArn', cdk.ResolutionTypeHint.STRING));
        this.attrName = cdk.Token.asString(this.getAtt('Name', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.initialVersion = props.initialVersion;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::Greengrass::SubscriptionDefinition", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSubscriptionDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            initialVersion: this.initialVersion,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnSubscriptionDefinitionPropsToCloudFormation(props);
    }
}
_q = JSII_RTTI_SYMBOL_1;
CfnSubscriptionDefinition[_q] = { fqn: "aws-cdk-lib.aws_greengrass.CfnSubscriptionDefinition", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnSubscriptionDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::SubscriptionDefinition";
exports.CfnSubscriptionDefinition = CfnSubscriptionDefinition;
/**
 * Determine whether the given properties match those of a `SubscriptionProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionProperty`
 *
 * @returns the result of the validation.
 */
function CfnSubscriptionDefinition_SubscriptionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));
    errors.collect(cdk.propertyValidator('source', cdk.validateString)(properties.source));
    errors.collect(cdk.propertyValidator('subject', cdk.requiredValidator)(properties.subject));
    errors.collect(cdk.propertyValidator('subject', cdk.validateString)(properties.subject));
    errors.collect(cdk.propertyValidator('target', cdk.requiredValidator)(properties.target));
    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));
    return errors.wrap('supplied properties not correct for "SubscriptionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinition.Subscription` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinition.Subscription` resource.
 */
// @ts-ignore TS6133
function cfnSubscriptionDefinitionSubscriptionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnSubscriptionDefinition_SubscriptionPropertyValidator(properties).assertSuccess();
    return {
        Id: cdk.stringToCloudFormation(properties.id),
        Source: cdk.stringToCloudFormation(properties.source),
        Subject: cdk.stringToCloudFormation(properties.subject),
        Target: cdk.stringToCloudFormation(properties.target),
    };
}
// @ts-ignore TS6133
function CfnSubscriptionDefinitionSubscriptionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('source', 'Source', cfn_parse.FromCloudFormation.getString(properties.Source));
    ret.addPropertyResult('subject', 'Subject', cfn_parse.FromCloudFormation.getString(properties.Subject));
    ret.addPropertyResult('target', 'Target', cfn_parse.FromCloudFormation.getString(properties.Target));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `SubscriptionDefinitionVersionProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionDefinitionVersionProperty`
 *
 * @returns the result of the validation.
 */
function CfnSubscriptionDefinition_SubscriptionDefinitionVersionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('subscriptions', cdk.requiredValidator)(properties.subscriptions));
    errors.collect(cdk.propertyValidator('subscriptions', cdk.listValidator(CfnSubscriptionDefinition_SubscriptionPropertyValidator))(properties.subscriptions));
    return errors.wrap('supplied properties not correct for "SubscriptionDefinitionVersionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinition.SubscriptionDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionDefinitionVersionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinition.SubscriptionDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnSubscriptionDefinitionSubscriptionDefinitionVersionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnSubscriptionDefinition_SubscriptionDefinitionVersionPropertyValidator(properties).assertSuccess();
    return {
        Subscriptions: cdk.listMapper(cfnSubscriptionDefinitionSubscriptionPropertyToCloudFormation)(properties.subscriptions),
    };
}
// @ts-ignore TS6133
function CfnSubscriptionDefinitionSubscriptionDefinitionVersionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('subscriptions', 'Subscriptions', cfn_parse.FromCloudFormation.getArray(CfnSubscriptionDefinitionSubscriptionPropertyFromCloudFormation)(properties.Subscriptions));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnSubscriptionDefinitionVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnSubscriptionDefinitionVersionProps`
 *
 * @returns the result of the validation.
 */
function CfnSubscriptionDefinitionVersionPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('subscriptionDefinitionId', cdk.requiredValidator)(properties.subscriptionDefinitionId));
    errors.collect(cdk.propertyValidator('subscriptionDefinitionId', cdk.validateString)(properties.subscriptionDefinitionId));
    errors.collect(cdk.propertyValidator('subscriptions', cdk.requiredValidator)(properties.subscriptions));
    errors.collect(cdk.propertyValidator('subscriptions', cdk.listValidator(CfnSubscriptionDefinitionVersion_SubscriptionPropertyValidator))(properties.subscriptions));
    return errors.wrap('supplied properties not correct for "CfnSubscriptionDefinitionVersionProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinitionVersion` resource
 *
 * @param properties - the TypeScript properties of a `CfnSubscriptionDefinitionVersionProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinitionVersion` resource.
 */
// @ts-ignore TS6133
function cfnSubscriptionDefinitionVersionPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnSubscriptionDefinitionVersionPropsValidator(properties).assertSuccess();
    return {
        SubscriptionDefinitionId: cdk.stringToCloudFormation(properties.subscriptionDefinitionId),
        Subscriptions: cdk.listMapper(cfnSubscriptionDefinitionVersionSubscriptionPropertyToCloudFormation)(properties.subscriptions),
    };
}
// @ts-ignore TS6133
function CfnSubscriptionDefinitionVersionPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('subscriptionDefinitionId', 'SubscriptionDefinitionId', cfn_parse.FromCloudFormation.getString(properties.SubscriptionDefinitionId));
    ret.addPropertyResult('subscriptions', 'Subscriptions', cfn_parse.FromCloudFormation.getArray(CfnSubscriptionDefinitionVersionSubscriptionPropertyFromCloudFormation)(properties.Subscriptions));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Greengrass::SubscriptionDefinitionVersion`
 *
 * The `AWS::Greengrass::SubscriptionDefinitionVersion` resource represents a subscription definition version for AWS IoT Greengrass . A subscription definition version contains a list of subscriptions.
 *
 * > To create a subscription definition version, you must specify the ID of the subscription definition that you want to associate with the version. For information about creating a subscription definition, see [`AWS::Greengrass::SubscriptionDefinition`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-subscriptiondefinition.html) .
 * >
 * > After you create a subscription definition version that contains the subscriptions you want to deploy, you must add it to your group version. For more information, see [`AWS::Greengrass::Group`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html) .
 *
 * @cloudformationResource AWS::Greengrass::SubscriptionDefinitionVersion
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-subscriptiondefinitionversion.html
 */
class CfnSubscriptionDefinitionVersion extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSubscriptionDefinitionVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSubscriptionDefinitionVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Greengrass::SubscriptionDefinitionVersion`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnSubscriptionDefinitionVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_greengrass_CfnSubscriptionDefinitionVersionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnSubscriptionDefinitionVersion);
            }
            throw error;
        }
        cdk.requireProperty(props, 'subscriptionDefinitionId', this);
        cdk.requireProperty(props, 'subscriptions', this);
        this.subscriptionDefinitionId = props.subscriptionDefinitionId;
        this.subscriptions = props.subscriptions;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSubscriptionDefinitionVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            subscriptionDefinitionId: this.subscriptionDefinitionId,
            subscriptions: this.subscriptions,
        };
    }
    renderProperties(props) {
        return cfnSubscriptionDefinitionVersionPropsToCloudFormation(props);
    }
}
_r = JSII_RTTI_SYMBOL_1;
CfnSubscriptionDefinitionVersion[_r] = { fqn: "aws-cdk-lib.aws_greengrass.CfnSubscriptionDefinitionVersion", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnSubscriptionDefinitionVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Greengrass::SubscriptionDefinitionVersion";
exports.CfnSubscriptionDefinitionVersion = CfnSubscriptionDefinitionVersion;
/**
 * Determine whether the given properties match those of a `SubscriptionProperty`
 *
 * @param properties - the TypeScript properties of a `SubscriptionProperty`
 *
 * @returns the result of the validation.
 */
function CfnSubscriptionDefinitionVersion_SubscriptionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));
    errors.collect(cdk.propertyValidator('source', cdk.validateString)(properties.source));
    errors.collect(cdk.propertyValidator('subject', cdk.requiredValidator)(properties.subject));
    errors.collect(cdk.propertyValidator('subject', cdk.validateString)(properties.subject));
    errors.collect(cdk.propertyValidator('target', cdk.requiredValidator)(properties.target));
    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));
    return errors.wrap('supplied properties not correct for "SubscriptionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinitionVersion.Subscription` resource
 *
 * @param properties - the TypeScript properties of a `SubscriptionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Greengrass::SubscriptionDefinitionVersion.Subscription` resource.
 */
// @ts-ignore TS6133
function cfnSubscriptionDefinitionVersionSubscriptionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnSubscriptionDefinitionVersion_SubscriptionPropertyValidator(properties).assertSuccess();
    return {
        Id: cdk.stringToCloudFormation(properties.id),
        Source: cdk.stringToCloudFormation(properties.source),
        Subject: cdk.stringToCloudFormation(properties.subject),
        Target: cdk.stringToCloudFormation(properties.target),
    };
}
// @ts-ignore TS6133
function CfnSubscriptionDefinitionVersionSubscriptionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));
    ret.addPropertyResult('source', 'Source', cfn_parse.FromCloudFormation.getString(properties.Source));
    ret.addPropertyResult('subject', 'Subject', cfn_parse.FromCloudFormation.getString(properties.Subject));
    ret.addPropertyResult('target', 'Target', cfn_parse.FromCloudFormation.getString(properties.Target));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
//# sourceMappingURL=data:application/json;base64,