"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionUrl = exports.HttpMethod = exports.FunctionUrlAuthType = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../aws-iam");
const core_1 = require("../../core");
const lambda_generated_1 = require("./lambda.generated");
/**
 * The auth types for a function url
 */
var FunctionUrlAuthType;
(function (FunctionUrlAuthType) {
    /**
     * Restrict access to authenticated IAM users only
     */
    FunctionUrlAuthType["AWS_IAM"] = "AWS_IAM";
    /**
     * Bypass IAM authentication to create a public endpoint
     */
    FunctionUrlAuthType["NONE"] = "NONE";
})(FunctionUrlAuthType = exports.FunctionUrlAuthType || (exports.FunctionUrlAuthType = {}));
/**
 * All http request methods
 */
var HttpMethod;
(function (HttpMethod) {
    /**
     * The GET method requests a representation of the specified resource.
     */
    HttpMethod["GET"] = "GET";
    /**
     * The PUT method replaces all current representations of the target resource with the request payload.
     */
    HttpMethod["PUT"] = "PUT";
    /**
     * The HEAD method asks for a response identical to that of a GET request, but without the response body.
     */
    HttpMethod["HEAD"] = "HEAD";
    /**
     * The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.
     */
    HttpMethod["POST"] = "POST";
    /**
     * The DELETE method deletes the specified resource.
     */
    HttpMethod["DELETE"] = "DELETE";
    /**
     * The PATCH method applies partial modifications to a resource.
     */
    HttpMethod["PATCH"] = "PATCH";
    /**
     * The OPTIONS method describes the communication options for the target resource.
     */
    HttpMethod["OPTIONS"] = "OPTIONS";
    /**
     * The wildcard entry to allow all methods.
     */
    HttpMethod["ALL"] = "*";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
/**
 * Defines a Lambda function url
 *
 * @resource AWS::Lambda::Url
 */
class FunctionUrl extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_lambda_FunctionUrlProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, FunctionUrl);
            }
            throw error;
        }
        if (this.instanceOfVersion(props.function)) {
            throw new Error('FunctionUrl cannot be used with a Version');
        }
        // If the target function is an alias, then it must be configured using the underlying function
        // ARN, and the alias name as a qualifier.
        const { targetFunction, alias } = this.instanceOfAlias(props.function)
            ? { targetFunction: props.function.version.lambda, alias: props.function }
            : { targetFunction: props.function, alias: undefined };
        const resource = new lambda_generated_1.CfnUrl(this, 'Resource', {
            authType: props.authType ?? FunctionUrlAuthType.AWS_IAM,
            cors: props.cors ? this.renderCors(props.cors) : undefined,
            targetFunctionArn: targetFunction.functionArn,
            qualifier: alias?.aliasName,
        });
        // The aliasName is a required physical name, so using it does not imply a dependency, so we
        // must "manually" register the dependency, or else CFN may attempt to use before it exists.
        if (alias?.node.defaultChild != null) {
            resource.node.addDependency(alias.node.defaultChild);
        }
        this.url = resource.attrFunctionUrl;
        this.functionArn = resource.attrFunctionArn;
        this.function = props.function;
        if (props.authType === FunctionUrlAuthType.NONE) {
            props.function.addPermission('invoke-function-url', {
                principal: new iam.AnyPrincipal(),
                action: 'lambda:InvokeFunctionUrl',
                functionUrlAuthType: props.authType,
            });
        }
    }
    grantInvokeUrl(grantee) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IGrantable(grantee);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.grantInvokeUrl);
            }
            throw error;
        }
        return this.function.grantInvokeUrl(grantee);
    }
    instanceOfVersion(fn) {
        return 'version' in fn && !this.instanceOfAlias(fn);
    }
    instanceOfAlias(fn) {
        return 'aliasName' in fn;
    }
    renderCors(cors) {
        return {
            allowCredentials: cors.allowCredentials,
            allowHeaders: cors.allowedHeaders,
            allowMethods: cors.allowedMethods ?? [HttpMethod.ALL],
            allowOrigins: cors.allowedOrigins,
            exposeHeaders: cors.exposedHeaders,
            maxAge: cors.maxAge?.toSeconds(),
        };
    }
}
_a = JSII_RTTI_SYMBOL_1;
FunctionUrl[_a] = { fqn: "aws-cdk-lib.aws_lambda.FunctionUrl", version: "2.75.1" };
exports.FunctionUrl = FunctionUrl;
//# sourceMappingURL=data:application/json;base64,