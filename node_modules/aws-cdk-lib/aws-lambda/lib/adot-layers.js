"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdotLambdaLayerGenericVersion = exports.AdotLambdaLayerJavaScriptSdkVersion = exports.AdotLambdaLayerPythonSdkVersion = exports.AdotLambdaLayerJavaAutoInstrumentationVersion = exports.AdotLambdaLayerJavaSdkVersion = exports.AdotLambdaExecWrapper = exports.AdotLayerVersion = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const region_info_1 = require("../../region-info");
const stack_1 = require("../../core/lib/stack");
const token_1 = require("../../core/lib/token");
const fact_1 = require("../../region-info/lib/fact");
/**
 * The type of ADOT Lambda layer
 */
var AdotLambdaLayerType;
(function (AdotLambdaLayerType) {
    /**
     * The Lambda layer for ADOT Java instrumentation library. This layer only auto-instruments AWS
     * SDK libraries.
     */
    AdotLambdaLayerType["JAVA_SDK"] = "JAVA_SDK";
    /**
     * The Lambda layer for ADOT Java Auto-Instrumentation Agent. This layer automatically instruments
     * a large number of libraries and frameworks out of the box and has notable impact on startup
     * performance.
     */
    AdotLambdaLayerType["JAVA_AUTO_INSTRUMENTATION"] = "JAVA_AUTO_INSTRUMENTATION";
    /**
     * The Lambda layer for ADOT Collector, OpenTelemetry for JavaScript and supported libraries.
     */
    AdotLambdaLayerType["JAVASCRIPT_SDK"] = "JAVASCRIPT_SDK";
    /**
     * The Lambda layer for ADOT Collector, OpenTelemetry for Python and supported libraries.
     */
    AdotLambdaLayerType["PYTHON_SDK"] = "PYTHON_SDK";
    /**
     * The generic Lambda layer that contains only ADOT Collector, used for manual instrumentation
     * use cases (such as Go or DotNet runtimes).
     */
    AdotLambdaLayerType["GENERIC"] = "GENERIC";
})(AdotLambdaLayerType || (AdotLambdaLayerType = {}));
/**
 * Return the ARN of an ADOT Lambda layer given its properties. If the region name is unknown
 * at synthesis time, it will generate a map in the CloudFormation template and perform the look
 * up at deployment time.
 *
 * @param scope the parent Construct that will use the imported layer.
 * @param type the type of the ADOT Lambda layer
 * @param version The version of the ADOT Lambda layer
 * @param architecture the architecture of the Lambda layer ('amd64' or 'arm64')
 */
function getLayerArn(scope, type, version, architecture) {
    const scopeStack = stack_1.Stack.of(scope);
    const region = scopeStack.region;
    // Region is defined, look up the arn, or throw an error if the version isn't supported by a region
    if (region !== undefined && !token_1.Token.isUnresolved(region)) {
        const arn = region_info_1.RegionInfo.get(region).adotLambdaLayerArn(type, version, architecture);
        if (arn === undefined) {
            throw new Error(`Could not find the ARN information for the ADOT Lambda Layer of type ${type} and version ${version} in ${region}`);
        }
        return arn;
    }
    // Otherwise, need to add a mapping to be looked up at deployment time
    return scopeStack.regionalFact(fact_1.FactName.adotLambdaLayer(type, version, architecture));
}
/**
 * An ADOT Lambda layer version that's specific to a lambda layer type and an architecture.
 */
class AdotLayerVersion {
    /**
     * The ADOT Lambda layer for Java SDK
     *
     * @param version The version of the Lambda layer to use
     */
    static fromJavaSdkLayerVersion(version) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_lambda_AdotLambdaLayerJavaSdkVersion(version);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromJavaSdkLayerVersion);
            }
            throw error;
        }
        return AdotLayerVersion.fromAdotVersion(version);
    }
    /**
     * The ADOT Lambda layer for Java auto instrumentation
     *
     * @param version The version of the Lambda layer to use
     */
    static fromJavaAutoInstrumentationLayerVersion(version) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_lambda_AdotLambdaLayerJavaAutoInstrumentationVersion(version);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromJavaAutoInstrumentationLayerVersion);
            }
            throw error;
        }
        return AdotLayerVersion.fromAdotVersion(version);
    }
    /**
     * The ADOT Lambda layer for JavaScript SDK
     *
     * @param version The version of the Lambda layer to use
     */
    static fromJavaScriptSdkLayerVersion(version) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_lambda_AdotLambdaLayerJavaScriptSdkVersion(version);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromJavaScriptSdkLayerVersion);
            }
            throw error;
        }
        return AdotLayerVersion.fromAdotVersion(version);
    }
    /**
     * The ADOT Lambda layer for Python SDK
     *
     * @param version The version of the Lambda layer to use
     */
    static fromPythonSdkLayerVersion(version) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_lambda_AdotLambdaLayerPythonSdkVersion(version);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromPythonSdkLayerVersion);
            }
            throw error;
        }
        return AdotLayerVersion.fromAdotVersion(version);
    }
    /**
     * The ADOT Lambda layer for generic use cases
     *
     * @param version The version of the Lambda layer to use
     */
    static fromGenericLayerVersion(version) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_lambda_AdotLambdaLayerGenericVersion(version);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromGenericLayerVersion);
            }
            throw error;
        }
        return AdotLayerVersion.fromAdotVersion(version);
    }
    static fromAdotVersion(adotVersion) {
        return new (class extends AdotLayerVersion {
            _bind(_function) {
                return {
                    arn: adotVersion.layerArn(_function.stack, _function.architecture),
                };
            }
        })();
    }
}
_a = JSII_RTTI_SYMBOL_1;
AdotLayerVersion[_a] = { fqn: "aws-cdk-lib.aws_lambda.AdotLayerVersion", version: "2.75.1" };
exports.AdotLayerVersion = AdotLayerVersion;
/**
 * The wrapper script to be used for the Lambda function in order to enable auto instrumentation
 * with ADOT.
 */
var AdotLambdaExecWrapper;
(function (AdotLambdaExecWrapper) {
    /**
     * Wrapping regular Lambda handlers.
     */
    AdotLambdaExecWrapper["REGULAR_HANDLER"] = "/opt/otel-handler";
    /**
     * Wrapping regular handlers (implementing RequestHandler) proxied through API Gateway, enabling
     * HTTP context propagation.
     */
    AdotLambdaExecWrapper["PROXY_HANDLER"] = "/opt/otel-proxy-handler";
    /**
     * Wrapping streaming handlers (implementing RequestStreamHandler), enabling HTTP context
     * propagation for HTTP requests.
     */
    AdotLambdaExecWrapper["STREAM_HANDLER"] = "/opt/otel-stream-handler";
})(AdotLambdaExecWrapper = exports.AdotLambdaExecWrapper || (exports.AdotLambdaExecWrapper = {}));
class AdotLambdaLayerVersion {
    constructor(type, version) {
        this.type = type;
        this.version = version;
    }
    /**
     * The ARN of the Lambda layer
     *
     * @param scope The binding scope. Usually this is the stack where the Lambda layer is bound to
     * @param architecture The architecture of the Lambda layer (either X86_64 or ARM_64)
     */
    layerArn(scope, architecture) {
        return getLayerArn(scope, this.type, this.version, architecture.name);
    }
}
/**
 * The collection of versions of the ADOT Lambda Layer for Java SDK
 */
class AdotLambdaLayerJavaSdkVersion extends AdotLambdaLayerVersion {
    constructor(layerVersion) {
        super(AdotLambdaLayerType.JAVA_SDK, layerVersion);
        this.layerVersion = layerVersion;
    }
}
_b = JSII_RTTI_SYMBOL_1;
AdotLambdaLayerJavaSdkVersion[_b] = { fqn: "aws-cdk-lib.aws_lambda.AdotLambdaLayerJavaSdkVersion", version: "2.75.1" };
/**
 * The latest layer version available in this CDK version. New versions could
 * introduce incompatible changes. Make sure to test them before deploying to production.
 */
AdotLambdaLayerJavaSdkVersion.LATEST = new AdotLambdaLayerJavaSdkVersion('1.19.0');
/**
 * Version 1.19.0
 */
AdotLambdaLayerJavaSdkVersion.V1_19_0 = new AdotLambdaLayerJavaSdkVersion('1.19.0');
exports.AdotLambdaLayerJavaSdkVersion = AdotLambdaLayerJavaSdkVersion;
/**
 * The collection of versions of the ADOT Lambda Layer for Java auto-instrumentation
 */
class AdotLambdaLayerJavaAutoInstrumentationVersion extends AdotLambdaLayerVersion {
    constructor(layerVersion) {
        super(AdotLambdaLayerType.JAVA_AUTO_INSTRUMENTATION, layerVersion);
        this.layerVersion = layerVersion;
    }
}
_c = JSII_RTTI_SYMBOL_1;
AdotLambdaLayerJavaAutoInstrumentationVersion[_c] = { fqn: "aws-cdk-lib.aws_lambda.AdotLambdaLayerJavaAutoInstrumentationVersion", version: "2.75.1" };
/**
 * The latest layer version available in this CDK version. New versions could
 * introduce incompatible changes. Make sure to test them before deploying to production.
 */
AdotLambdaLayerJavaAutoInstrumentationVersion.LATEST = new AdotLambdaLayerJavaAutoInstrumentationVersion('1.19.2');
/**
 * Version 1.19.2
 */
AdotLambdaLayerJavaAutoInstrumentationVersion.V1_19_2 = new AdotLambdaLayerJavaAutoInstrumentationVersion('1.19.2');
exports.AdotLambdaLayerJavaAutoInstrumentationVersion = AdotLambdaLayerJavaAutoInstrumentationVersion;
/**
 * The collection of versions of the ADOT Lambda Layer for Python SDK
 */
class AdotLambdaLayerPythonSdkVersion extends AdotLambdaLayerVersion {
    constructor(layerVersion) {
        super(AdotLambdaLayerType.PYTHON_SDK, layerVersion);
        this.layerVersion = layerVersion;
    }
}
_d = JSII_RTTI_SYMBOL_1;
AdotLambdaLayerPythonSdkVersion[_d] = { fqn: "aws-cdk-lib.aws_lambda.AdotLambdaLayerPythonSdkVersion", version: "2.75.1" };
/**
 * The latest layer version available in this CDK version. New versions could
 * introduce incompatible changes. Make sure to test them before deploying to production.
 */
AdotLambdaLayerPythonSdkVersion.LATEST = new AdotLambdaLayerPythonSdkVersion('1.13.0');
/**
 * Version 1.13.0
 */
AdotLambdaLayerPythonSdkVersion.V1_13_0 = new AdotLambdaLayerPythonSdkVersion('1.13.0');
exports.AdotLambdaLayerPythonSdkVersion = AdotLambdaLayerPythonSdkVersion;
/**
 * The collection of versions of the ADOT Lambda Layer for JavaScript SDK
 */
class AdotLambdaLayerJavaScriptSdkVersion extends AdotLambdaLayerVersion {
    constructor(layerVersion) {
        super(AdotLambdaLayerType.JAVASCRIPT_SDK, layerVersion);
        this.layerVersion = layerVersion;
    }
}
_e = JSII_RTTI_SYMBOL_1;
AdotLambdaLayerJavaScriptSdkVersion[_e] = { fqn: "aws-cdk-lib.aws_lambda.AdotLambdaLayerJavaScriptSdkVersion", version: "2.75.1" };
/**
 * The latest layer version available in this CDK version. New versions could
 * introduce incompatible changes. Make sure to test them before deploying to production.
 */
AdotLambdaLayerJavaScriptSdkVersion.LATEST = new AdotLambdaLayerJavaScriptSdkVersion('1.7.0');
/**
 * Version 1.7.0
 */
AdotLambdaLayerJavaScriptSdkVersion.V1_7_0 = new AdotLambdaLayerJavaScriptSdkVersion('1.7.0');
exports.AdotLambdaLayerJavaScriptSdkVersion = AdotLambdaLayerJavaScriptSdkVersion;
/**
 * The collection of versions of the ADOT Lambda Layer for generic purpose
 */
class AdotLambdaLayerGenericVersion extends AdotLambdaLayerVersion {
    constructor(layerVersion) {
        super(AdotLambdaLayerType.GENERIC, layerVersion);
        this.layerVersion = layerVersion;
    }
}
_f = JSII_RTTI_SYMBOL_1;
AdotLambdaLayerGenericVersion[_f] = { fqn: "aws-cdk-lib.aws_lambda.AdotLambdaLayerGenericVersion", version: "2.75.1" };
/**
 * The latest layer version available in this CDK version. New versions could
 * introduce incompatible changes. Make sure to test them before deploying to production.
 */
AdotLambdaLayerGenericVersion.LATEST = new AdotLambdaLayerGenericVersion('0.62.1');
/**
 * Version 0.62.1
 */
AdotLambdaLayerGenericVersion.V0_62_1 = new AdotLambdaLayerGenericVersion('0.62.1');
exports.AdotLambdaLayerGenericVersion = AdotLambdaLayerGenericVersion;
//# sourceMappingURL=data:application/json;base64,