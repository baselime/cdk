"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnSlackWorkspaceConfiguration = exports.CfnSlackChannelConfiguration = exports.CfnAccountAlias = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("../../core");
const cfn_parse = require("../../core/lib/helpers-internal");
/**
 * Determine whether the given properties match those of a `CfnAccountAliasProps`
 *
 * @param properties - the TypeScript properties of a `CfnAccountAliasProps`
 *
 * @returns the result of the validation.
 */
function CfnAccountAliasPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('accountAlias', cdk.requiredValidator)(properties.accountAlias));
    errors.collect(cdk.propertyValidator('accountAlias', cdk.validateString)(properties.accountAlias));
    return errors.wrap('supplied properties not correct for "CfnAccountAliasProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::SupportApp::AccountAlias` resource
 *
 * @param properties - the TypeScript properties of a `CfnAccountAliasProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::SupportApp::AccountAlias` resource.
 */
// @ts-ignore TS6133
function cfnAccountAliasPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnAccountAliasPropsValidator(properties).assertSuccess();
    return {
        AccountAlias: cdk.stringToCloudFormation(properties.accountAlias),
    };
}
// @ts-ignore TS6133
function CfnAccountAliasPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('accountAlias', 'AccountAlias', cfn_parse.FromCloudFormation.getString(properties.AccountAlias));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::SupportApp::AccountAlias`
 *
 * You can use the `AWS::SupportApp::AccountAlias` resource to specify your AWS account when you configure the AWS Support App in Slack. Your alias name appears on the AWS Support App page in the Support Center Console and in messages from the AWS Support App. You can use this alias to identify the account you've configured with the AWS Support App .
 *
 * For more information, see [AWS Support App in Slack](https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html) in the *AWS Support User Guide* .
 *
 * @cloudformationResource AWS::SupportApp::AccountAlias
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-accountalias.html
 */
class CfnAccountAlias extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAccountAliasPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAccountAlias(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::SupportApp::AccountAlias`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnAccountAlias.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_supportapp_CfnAccountAliasProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnAccountAlias);
            }
            throw error;
        }
        cdk.requireProperty(props, 'accountAlias', this);
        this.attrAccountAliasResourceId = cdk.Token.asString(this.getAtt('AccountAliasResourceId', cdk.ResolutionTypeHint.STRING));
        this.accountAlias = props.accountAlias;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAccountAlias.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            accountAlias: this.accountAlias,
        };
    }
    renderProperties(props) {
        return cfnAccountAliasPropsToCloudFormation(props);
    }
}
_a = JSII_RTTI_SYMBOL_1;
CfnAccountAlias[_a] = { fqn: "aws-cdk-lib.aws_supportapp.CfnAccountAlias", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnAccountAlias.CFN_RESOURCE_TYPE_NAME = "AWS::SupportApp::AccountAlias";
exports.CfnAccountAlias = CfnAccountAlias;
/**
 * Determine whether the given properties match those of a `CfnSlackChannelConfigurationProps`
 *
 * @param properties - the TypeScript properties of a `CfnSlackChannelConfigurationProps`
 *
 * @returns the result of the validation.
 */
function CfnSlackChannelConfigurationPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('channelId', cdk.requiredValidator)(properties.channelId));
    errors.collect(cdk.propertyValidator('channelId', cdk.validateString)(properties.channelId));
    errors.collect(cdk.propertyValidator('channelName', cdk.validateString)(properties.channelName));
    errors.collect(cdk.propertyValidator('channelRoleArn', cdk.requiredValidator)(properties.channelRoleArn));
    errors.collect(cdk.propertyValidator('channelRoleArn', cdk.validateString)(properties.channelRoleArn));
    errors.collect(cdk.propertyValidator('notifyOnAddCorrespondenceToCase', cdk.validateBoolean)(properties.notifyOnAddCorrespondenceToCase));
    errors.collect(cdk.propertyValidator('notifyOnCaseSeverity', cdk.requiredValidator)(properties.notifyOnCaseSeverity));
    errors.collect(cdk.propertyValidator('notifyOnCaseSeverity', cdk.validateString)(properties.notifyOnCaseSeverity));
    errors.collect(cdk.propertyValidator('notifyOnCreateOrReopenCase', cdk.validateBoolean)(properties.notifyOnCreateOrReopenCase));
    errors.collect(cdk.propertyValidator('notifyOnResolveCase', cdk.validateBoolean)(properties.notifyOnResolveCase));
    errors.collect(cdk.propertyValidator('teamId', cdk.requiredValidator)(properties.teamId));
    errors.collect(cdk.propertyValidator('teamId', cdk.validateString)(properties.teamId));
    return errors.wrap('supplied properties not correct for "CfnSlackChannelConfigurationProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::SupportApp::SlackChannelConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `CfnSlackChannelConfigurationProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::SupportApp::SlackChannelConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnSlackChannelConfigurationPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnSlackChannelConfigurationPropsValidator(properties).assertSuccess();
    return {
        ChannelId: cdk.stringToCloudFormation(properties.channelId),
        ChannelRoleArn: cdk.stringToCloudFormation(properties.channelRoleArn),
        NotifyOnCaseSeverity: cdk.stringToCloudFormation(properties.notifyOnCaseSeverity),
        TeamId: cdk.stringToCloudFormation(properties.teamId),
        ChannelName: cdk.stringToCloudFormation(properties.channelName),
        NotifyOnAddCorrespondenceToCase: cdk.booleanToCloudFormation(properties.notifyOnAddCorrespondenceToCase),
        NotifyOnCreateOrReopenCase: cdk.booleanToCloudFormation(properties.notifyOnCreateOrReopenCase),
        NotifyOnResolveCase: cdk.booleanToCloudFormation(properties.notifyOnResolveCase),
    };
}
// @ts-ignore TS6133
function CfnSlackChannelConfigurationPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('channelId', 'ChannelId', cfn_parse.FromCloudFormation.getString(properties.ChannelId));
    ret.addPropertyResult('channelRoleArn', 'ChannelRoleArn', cfn_parse.FromCloudFormation.getString(properties.ChannelRoleArn));
    ret.addPropertyResult('notifyOnCaseSeverity', 'NotifyOnCaseSeverity', cfn_parse.FromCloudFormation.getString(properties.NotifyOnCaseSeverity));
    ret.addPropertyResult('teamId', 'TeamId', cfn_parse.FromCloudFormation.getString(properties.TeamId));
    ret.addPropertyResult('channelName', 'ChannelName', properties.ChannelName != null ? cfn_parse.FromCloudFormation.getString(properties.ChannelName) : undefined);
    ret.addPropertyResult('notifyOnAddCorrespondenceToCase', 'NotifyOnAddCorrespondenceToCase', properties.NotifyOnAddCorrespondenceToCase != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NotifyOnAddCorrespondenceToCase) : undefined);
    ret.addPropertyResult('notifyOnCreateOrReopenCase', 'NotifyOnCreateOrReopenCase', properties.NotifyOnCreateOrReopenCase != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NotifyOnCreateOrReopenCase) : undefined);
    ret.addPropertyResult('notifyOnResolveCase', 'NotifyOnResolveCase', properties.NotifyOnResolveCase != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NotifyOnResolveCase) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::SupportApp::SlackChannelConfiguration`
 *
 * You can use the `AWS::SupportApp::SlackChannelConfiguration` resource to specify your AWS account when you configure the AWS Support App . This resource includes the following information:
 *
 * - The Slack channel name and ID
 * - The team ID in Slack
 * - The Amazon Resource Name (ARN) of the AWS Identity and Access Management ( IAM ) role
 * - Whether you want the AWS Support App to notify you when your support cases are created, updated, resolved, or reopened
 * - The case severity that you want to get notified for
 *
 * For more information, see the following topics in the *AWS Support User Guide* :
 *
 * - [AWS Support App in Slack](https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html)
 * - [Creating AWS Support App in Slack resources with AWS CloudFormation](https://docs.aws.amazon.com/awssupport/latest/user/creating-resources-with-cloudformation.html)
 *
 * @cloudformationResource AWS::SupportApp::SlackChannelConfiguration
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html
 */
class CfnSlackChannelConfiguration extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSlackChannelConfigurationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSlackChannelConfiguration(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::SupportApp::SlackChannelConfiguration`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnSlackChannelConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_supportapp_CfnSlackChannelConfigurationProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnSlackChannelConfiguration);
            }
            throw error;
        }
        cdk.requireProperty(props, 'channelId', this);
        cdk.requireProperty(props, 'channelRoleArn', this);
        cdk.requireProperty(props, 'notifyOnCaseSeverity', this);
        cdk.requireProperty(props, 'teamId', this);
        this.channelId = props.channelId;
        this.channelRoleArn = props.channelRoleArn;
        this.notifyOnCaseSeverity = props.notifyOnCaseSeverity;
        this.teamId = props.teamId;
        this.channelName = props.channelName;
        this.notifyOnAddCorrespondenceToCase = props.notifyOnAddCorrespondenceToCase;
        this.notifyOnCreateOrReopenCase = props.notifyOnCreateOrReopenCase;
        this.notifyOnResolveCase = props.notifyOnResolveCase;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSlackChannelConfiguration.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            channelId: this.channelId,
            channelRoleArn: this.channelRoleArn,
            notifyOnCaseSeverity: this.notifyOnCaseSeverity,
            teamId: this.teamId,
            channelName: this.channelName,
            notifyOnAddCorrespondenceToCase: this.notifyOnAddCorrespondenceToCase,
            notifyOnCreateOrReopenCase: this.notifyOnCreateOrReopenCase,
            notifyOnResolveCase: this.notifyOnResolveCase,
        };
    }
    renderProperties(props) {
        return cfnSlackChannelConfigurationPropsToCloudFormation(props);
    }
}
_b = JSII_RTTI_SYMBOL_1;
CfnSlackChannelConfiguration[_b] = { fqn: "aws-cdk-lib.aws_supportapp.CfnSlackChannelConfiguration", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnSlackChannelConfiguration.CFN_RESOURCE_TYPE_NAME = "AWS::SupportApp::SlackChannelConfiguration";
exports.CfnSlackChannelConfiguration = CfnSlackChannelConfiguration;
/**
 * Determine whether the given properties match those of a `CfnSlackWorkspaceConfigurationProps`
 *
 * @param properties - the TypeScript properties of a `CfnSlackWorkspaceConfigurationProps`
 *
 * @returns the result of the validation.
 */
function CfnSlackWorkspaceConfigurationPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('teamId', cdk.requiredValidator)(properties.teamId));
    errors.collect(cdk.propertyValidator('teamId', cdk.validateString)(properties.teamId));
    errors.collect(cdk.propertyValidator('versionId', cdk.validateString)(properties.versionId));
    return errors.wrap('supplied properties not correct for "CfnSlackWorkspaceConfigurationProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::SupportApp::SlackWorkspaceConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `CfnSlackWorkspaceConfigurationProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::SupportApp::SlackWorkspaceConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnSlackWorkspaceConfigurationPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnSlackWorkspaceConfigurationPropsValidator(properties).assertSuccess();
    return {
        TeamId: cdk.stringToCloudFormation(properties.teamId),
        VersionId: cdk.stringToCloudFormation(properties.versionId),
    };
}
// @ts-ignore TS6133
function CfnSlackWorkspaceConfigurationPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('teamId', 'TeamId', cfn_parse.FromCloudFormation.getString(properties.TeamId));
    ret.addPropertyResult('versionId', 'VersionId', properties.VersionId != null ? cfn_parse.FromCloudFormation.getString(properties.VersionId) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::SupportApp::SlackWorkspaceConfiguration`
 *
 * You can use the `AWS::SupportApp::SlackWorkspaceConfiguration` resource to specify your Slack workspace configuration. This resource configures your AWS account so that you can use the specified Slack workspace in the AWS Support App . This resource includes the following information:
 *
 * - The team ID for the Slack workspace
 * - The version ID of the resource to use with AWS CloudFormation
 *
 * For more information, see the following topics in the *AWS Support User Guide* :
 *
 * - [AWS Support App in Slack](https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html)
 * - [Creating AWS Support App in Slack resources with AWS CloudFormation](https://docs.aws.amazon.com/awssupport/latest/user/creating-resources-with-cloudformation.html)
 *
 * @cloudformationResource AWS::SupportApp::SlackWorkspaceConfiguration
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackworkspaceconfiguration.html
 */
class CfnSlackWorkspaceConfiguration extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSlackWorkspaceConfigurationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSlackWorkspaceConfiguration(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::SupportApp::SlackWorkspaceConfiguration`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnSlackWorkspaceConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_supportapp_CfnSlackWorkspaceConfigurationProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnSlackWorkspaceConfiguration);
            }
            throw error;
        }
        cdk.requireProperty(props, 'teamId', this);
        this.teamId = props.teamId;
        this.versionId = props.versionId;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSlackWorkspaceConfiguration.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            teamId: this.teamId,
            versionId: this.versionId,
        };
    }
    renderProperties(props) {
        return cfnSlackWorkspaceConfigurationPropsToCloudFormation(props);
    }
}
_c = JSII_RTTI_SYMBOL_1;
CfnSlackWorkspaceConfiguration[_c] = { fqn: "aws-cdk-lib.aws_supportapp.CfnSlackWorkspaceConfiguration", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnSlackWorkspaceConfiguration.CFN_RESOURCE_TYPE_NAME = "AWS::SupportApp::SlackWorkspaceConfiguration";
exports.CfnSlackWorkspaceConfiguration = CfnSlackWorkspaceConfiguration;
//# sourceMappingURL=data:application/json;base64,