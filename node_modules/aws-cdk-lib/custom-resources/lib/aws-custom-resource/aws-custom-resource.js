"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsCustomResource = exports.AwsCustomResourcePolicy = exports.PhysicalResourceId = exports.PhysicalResourceIdReference = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const iam = require("../../../aws-iam");
const lambda = require("../../../aws-lambda");
const cdk = require("../../../core");
const core_1 = require("../../../core");
const cxapi = require("../../../cx-api");
const constructs_1 = require("constructs");
const runtime_1 = require("./runtime");
/**
 * Reference to the physical resource id that can be passed to the AWS operation as a parameter.
 */
class PhysicalResourceIdReference {
    constructor() {
        this.creationStack = cdk.captureStackTrace();
    }
    /**
     * toJSON serialization to replace `PhysicalResourceIdReference` with a magic string.
     */
    toJSON() {
        return runtime_1.PHYSICAL_RESOURCE_ID_REFERENCE;
    }
    resolve(_) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_IResolveContext(_);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.resolve);
            }
            throw error;
        }
        return runtime_1.PHYSICAL_RESOURCE_ID_REFERENCE;
    }
    toString() {
        return runtime_1.PHYSICAL_RESOURCE_ID_REFERENCE;
    }
}
_a = JSII_RTTI_SYMBOL_1;
PhysicalResourceIdReference[_a] = { fqn: "aws-cdk-lib.custom_resources.PhysicalResourceIdReference", version: "2.75.1" };
exports.PhysicalResourceIdReference = PhysicalResourceIdReference;
/**
 * Physical ID of the custom resource.
 */
class PhysicalResourceId {
    /**
     * Extract the physical resource id from the path (dot notation) to the data in the API call response.
     */
    static fromResponse(responsePath) {
        return new PhysicalResourceId(responsePath, undefined);
    }
    /**
     * Explicit physical resource id.
     */
    static of(id) {
        return new PhysicalResourceId(undefined, id);
    }
    /**
     * @param responsePath Path to a response data element to be used as the physical id.
     * @param id Literal string to be used as the physical id.
     */
    constructor(responsePath, id) {
        this.responsePath = responsePath;
        this.id = id;
    }
}
_b = JSII_RTTI_SYMBOL_1;
PhysicalResourceId[_b] = { fqn: "aws-cdk-lib.custom_resources.PhysicalResourceId", version: "2.75.1" };
exports.PhysicalResourceId = PhysicalResourceId;
/**
 * The IAM Policy that will be applied to the different calls.
 */
class AwsCustomResourcePolicy {
    /**
     * Explicit IAM Policy Statements.
     *
     * @param statements the statements to propagate to the SDK calls.
     */
    static fromStatements(statements) {
        return new AwsCustomResourcePolicy(statements, undefined);
    }
    /**
     * Generate IAM Policy Statements from the configured SDK calls.
     *
     * Each SDK call with be translated to an IAM Policy Statement in the form of: `call.service:call.action` (e.g `s3:PutObject`).
     *
     * This policy generator assumes the IAM policy name has the same name as the API
     * call. This is true in 99% of cases, but there are exceptions (for example,
     * S3's `PutBucketLifecycleConfiguration` requires
     * `s3:PutLifecycleConfiguration` permissions, Lambda's `Invoke` requires
     * `lambda:InvokeFunction` permissions). Use `fromStatements` if you want to
     * do a call that requires different IAM action names.
     *
     * @param options options for the policy generation
     */
    static fromSdkCalls(options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_custom_resources_SdkCallsPolicyOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromSdkCalls);
            }
            throw error;
        }
        return new AwsCustomResourcePolicy([], options.resources);
    }
    /**
     * @param statements statements for explicit policy.
     * @param resources resources for auto-generated from SDK calls.
     */
    constructor(statements, resources) {
        this.statements = statements;
        this.resources = resources;
    }
}
_c = JSII_RTTI_SYMBOL_1;
AwsCustomResourcePolicy[_c] = { fqn: "aws-cdk-lib.custom_resources.AwsCustomResourcePolicy", version: "2.75.1" };
/**
 * Use this constant to configure access to any resource.
 */
AwsCustomResourcePolicy.ANY_RESOURCE = ['*'];
exports.AwsCustomResourcePolicy = AwsCustomResourcePolicy;
/**
 * Defines a custom resource that is materialized using specific AWS API calls. These calls are created using
 * a singleton Lambda function.
 *
 * Use this to bridge any gap that might exist in the CloudFormation Coverage.
 * You can specify exactly which calls are invoked for the 'CREATE', 'UPDATE' and 'DELETE' life cycle events.
 *
 */
class AwsCustomResource extends constructs_1.Construct {
    static breakIgnoreErrorsCircuit(sdkCalls, caller) {
        for (const call of sdkCalls) {
            if (call?.ignoreErrorCodesMatching) {
                throw new Error(`\`${caller}\`` + ' cannot be called along with `ignoreErrorCodesMatching`.');
            }
        }
    }
    // 'props' cannot be optional, even though all its properties are optional.
    // this is because at least one sdk call must be provided.
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_custom_resources_AwsCustomResourceProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AwsCustomResource);
            }
            throw error;
        }
        if (!props.onCreate && !props.onUpdate && !props.onDelete) {
            throw new Error('At least `onCreate`, `onUpdate` or `onDelete` must be specified.');
        }
        if (!props.role && !props.policy) {
            throw new Error('At least one of `policy` or `role` (or both) must be specified.');
        }
        if (props.onCreate && !props.onCreate.physicalResourceId) {
            throw new Error("'physicalResourceId' must be specified for 'onCreate' call.");
        }
        if (!props.onCreate && props.onUpdate && !props.onUpdate.physicalResourceId) {
            throw new Error("'physicalResourceId' must be specified for 'onUpdate' call when 'onCreate' is omitted.");
        }
        for (const call of [props.onCreate, props.onUpdate, props.onDelete]) {
            if (call?.physicalResourceId?.responsePath) {
                AwsCustomResource.breakIgnoreErrorsCircuit([call], 'PhysicalResourceId.fromResponse');
            }
        }
        if (includesPhysicalResourceIdRef(props.onCreate?.parameters)) {
            throw new Error('`PhysicalResourceIdReference` must not be specified in `onCreate` parameters.');
        }
        this.props = props;
        const provider = new lambda.SingletonFunction(this, 'Provider', {
            code: lambda.Code.fromAsset(path.join(__dirname, 'runtime'), {
                exclude: ['*.ts'],
            }),
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: 'index.handler',
            uuid: AwsCustomResource.PROVIDER_FUNCTION_UUID,
            lambdaPurpose: 'AWS',
            timeout: props.timeout || cdk.Duration.minutes(2),
            role: props.role,
            logRetention: props.logRetention,
            functionName: props.functionName,
            vpc: props.vpc,
            vpcSubnets: props.vpcSubnets,
        });
        this.grantPrincipal = provider.grantPrincipal;
        const installLatestAwsSdk = (props.installLatestAwsSdk
            ?? this.node.tryGetContext(cxapi.AWS_CUSTOM_RESOURCE_LATEST_SDK_DEFAULT)
            ?? true);
        if (installLatestAwsSdk && props.installLatestAwsSdk === undefined) {
            // This is dangerous. Add a warning.
            core_1.Annotations.of(this).addWarning([
                'installLatestAwsSdk was not specified, and defaults to true. You probably do not want this.',
                `Set the global context flag \'${cxapi.AWS_CUSTOM_RESOURCE_LATEST_SDK_DEFAULT}\' to false to switch this behavior off project-wide,`,
                'or set the property explicitly to true if you know you need to call APIs that are not in Lambda\'s built-in SDK version.',
            ].join(' '));
        }
        const create = props.onCreate || props.onUpdate;
        this.customResource = new cdk.CustomResource(this, 'Resource', {
            resourceType: props.resourceType || 'Custom::AWS',
            serviceToken: provider.functionArn,
            pascalCaseProperties: true,
            properties: {
                create: create && this.encodeJson(create),
                update: props.onUpdate && this.encodeJson(props.onUpdate),
                delete: props.onDelete && this.encodeJson(props.onDelete),
                installLatestAwsSdk,
            },
        });
        // Create the policy statements for the custom resource function role, or use the user-provided ones
        if (props.policy) {
            const statements = [];
            if (props.policy.statements.length !== 0) {
                // Use custom statements provided by the user
                for (const statement of props.policy.statements) {
                    statements.push(statement);
                }
            }
            else {
                // Derive statements from AWS SDK calls
                for (const call of [props.onCreate, props.onUpdate, props.onDelete]) {
                    if (call && call.assumedRoleArn == null) {
                        const statement = new iam.PolicyStatement({
                            actions: [awsSdkToIamAction(call.service, call.action)],
                            resources: props.policy.resources,
                        });
                        statements.push(statement);
                    }
                    else if (call && call.assumedRoleArn != null) {
                        const statement = new iam.PolicyStatement({
                            actions: ['sts:AssumeRole'],
                            resources: [call.assumedRoleArn],
                        });
                        statements.push(statement);
                    }
                }
            }
            const policy = new iam.Policy(this, 'CustomResourcePolicy', {
                statements: statements,
            });
            if (provider.role !== undefined) {
                policy.attachToRole(provider.role);
            }
            // If the policy was deleted first, then the function might lose permissions to delete the custom resource
            // This is here so that the policy doesn't get removed before onDelete is called
            this.customResource.node.addDependency(policy);
        }
    }
    /**
     * Returns response data for the AWS SDK call.
     *
     * Example for S3 / listBucket : 'Buckets.0.Name'
     *
     * Use `Token.asXxx` to encode the returned `Reference` as a specific type or
     * use the convenience `getDataString` for string attributes.
     *
     * Note that you cannot use this method if `ignoreErrorCodesMatching`
     * is configured for any of the SDK calls. This is because in such a case,
     * the response data might not exist, and will cause a CloudFormation deploy time error.
     *
     * @param dataPath the path to the data
     */
    getResponseFieldReference(dataPath) {
        AwsCustomResource.breakIgnoreErrorsCircuit([this.props.onCreate, this.props.onUpdate], 'getData');
        return this.customResource.getAtt(dataPath);
    }
    /**
     * Returns response data for the AWS SDK call as string.
     *
     * Example for S3 / listBucket : 'Buckets.0.Name'
     *
     * Note that you cannot use this method if `ignoreErrorCodesMatching`
     * is configured for any of the SDK calls. This is because in such a case,
     * the response data might not exist, and will cause a CloudFormation deploy time error.
     *
     * @param dataPath the path to the data
     */
    getResponseField(dataPath) {
        AwsCustomResource.breakIgnoreErrorsCircuit([this.props.onCreate, this.props.onUpdate], 'getDataString');
        return this.customResource.getAttString(dataPath);
    }
    encodeJson(obj) {
        return cdk.Lazy.uncachedString({ produce: () => cdk.Stack.of(this).toJsonString(obj) });
    }
}
_d = JSII_RTTI_SYMBOL_1;
AwsCustomResource[_d] = { fqn: "aws-cdk-lib.custom_resources.AwsCustomResource", version: "2.75.1" };
/**
 * The uuid of the custom resource provider singleton lambda function.
 */
AwsCustomResource.PROVIDER_FUNCTION_UUID = '679f53fa-c002-430c-b0da-5b7982bd2287';
exports.AwsCustomResource = AwsCustomResource;
/**
 * Gets awsSdkMetaData from file or from cache
 */
let getAwsSdkMetadata = (() => {
    let _awsSdkMetadata;
    return function () {
        if (_awsSdkMetadata) {
            return _awsSdkMetadata;
        }
        else {
            return _awsSdkMetadata = JSON.parse(fs.readFileSync(path.join(__dirname, 'sdk-api-metadata.json'), 'utf-8'));
        }
    };
})();
/**
 * Returns true if `obj` includes a `PhysicalResourceIdReference` in one of the
 * values.
 * @param obj Any object.
 */
function includesPhysicalResourceIdRef(obj) {
    if (obj === undefined) {
        return false;
    }
    let foundRef = false;
    // we use JSON.stringify as a way to traverse all values in the object.
    JSON.stringify(obj, (_, v) => {
        if (v === runtime_1.PHYSICAL_RESOURCE_ID_REFERENCE) {
            foundRef = true;
        }
        return v;
    });
    return foundRef;
}
/**
 * Transform SDK service/action to IAM action using metadata from aws-sdk module.
 * Example: CloudWatchLogs with putRetentionPolicy => logs:PutRetentionPolicy
 *
 * TODO: is this mapping correct for all services?
 */
function awsSdkToIamAction(service, action) {
    const srv = service.toLowerCase();
    const awsSdkMetadata = getAwsSdkMetadata();
    const iamService = (awsSdkMetadata[srv] && awsSdkMetadata[srv].prefix) || srv;
    const iamAction = action.charAt(0).toUpperCase() + action.slice(1);
    return `${iamService}:${iamAction}`;
}
//# sourceMappingURL=data:application/json;base64,