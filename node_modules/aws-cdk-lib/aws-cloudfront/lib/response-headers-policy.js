"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeadersReferrerPolicy = exports.HeadersFrameOption = exports.ResponseHeadersPolicy = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const cloudfront_generated_1 = require("./cloudfront.generated");
/**
 * A Response Headers Policy configuration
 *
 * @resource AWS::CloudFront::ResponseHeadersPolicy
 */
class ResponseHeadersPolicy extends core_1.Resource {
    /**
     * Import an existing Response Headers Policy from its ID.
     */
    static fromResponseHeadersPolicyId(scope, id, responseHeadersPolicyId) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.responseHeadersPolicyId = responseHeadersPolicyId;
            }
        }
        return new Import(scope, id);
    }
    static fromManagedResponseHeadersPolicy(managedResponseHeadersPolicyId) {
        return new class {
            constructor() {
                this.responseHeadersPolicyId = managedResponseHeadersPolicyId;
            }
        };
    }
    constructor(scope, id, props = {}) {
        super(scope, id, {
            physicalName: props.responseHeadersPolicyName,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudfront_ResponseHeadersPolicyProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ResponseHeadersPolicy);
            }
            throw error;
        }
        const responseHeadersPolicyName = props.responseHeadersPolicyName ?? core_1.Names.uniqueResourceName(this, {
            maxLength: 128,
        });
        const resource = new cloudfront_generated_1.CfnResponseHeadersPolicy(this, 'Resource', {
            responseHeadersPolicyConfig: {
                name: responseHeadersPolicyName,
                comment: props.comment,
                corsConfig: props.corsBehavior ? this._renderCorsConfig(props.corsBehavior) : undefined,
                customHeadersConfig: props.customHeadersBehavior ? this._renderCustomHeadersConfig(props.customHeadersBehavior) : undefined,
                securityHeadersConfig: props.securityHeadersBehavior ? this._renderSecurityHeadersConfig(props.securityHeadersBehavior) : undefined,
                removeHeadersConfig: props.removeHeaders ? this._renderRemoveHeadersConfig(props.removeHeaders) : undefined,
                serverTimingHeadersConfig: props.serverTimingSamplingRate ? this._renderServerTimingHeadersConfig(props.serverTimingSamplingRate) : undefined,
            },
        });
        this.responseHeadersPolicyId = resource.ref;
    }
    _renderCorsConfig(behavior) {
        return {
            accessControlAllowCredentials: behavior.accessControlAllowCredentials,
            accessControlAllowHeaders: { items: behavior.accessControlAllowHeaders },
            accessControlAllowMethods: { items: behavior.accessControlAllowMethods },
            accessControlAllowOrigins: { items: behavior.accessControlAllowOrigins },
            accessControlExposeHeaders: behavior.accessControlExposeHeaders ? { items: behavior.accessControlExposeHeaders } : undefined,
            accessControlMaxAgeSec: behavior.accessControlMaxAge ? behavior.accessControlMaxAge.toSeconds() : undefined,
            originOverride: behavior.originOverride,
        };
    }
    _renderCustomHeadersConfig(behavior) {
        return {
            items: behavior.customHeaders,
        };
    }
    _renderSecurityHeadersConfig(behavior) {
        return {
            contentSecurityPolicy: behavior.contentSecurityPolicy,
            contentTypeOptions: behavior.contentTypeOptions,
            frameOptions: behavior.frameOptions,
            referrerPolicy: behavior.referrerPolicy,
            strictTransportSecurity: behavior.strictTransportSecurity ? {
                ...behavior.strictTransportSecurity,
                accessControlMaxAgeSec: behavior.strictTransportSecurity.accessControlMaxAge.toSeconds(),
            } : undefined,
            xssProtection: behavior.xssProtection,
        };
    }
    _renderRemoveHeadersConfig(headers) {
        const readonlyHeaders = ['content-encoding', 'content-length', 'transfer-encoding', 'warning', 'via'];
        return {
            items: headers.map(header => {
                if (!core_1.Token.isUnresolved(header) && readonlyHeaders.includes(header.toLowerCase())) {
                    throw new Error(`Cannot remove read-only header ${header}`);
                }
                return { header };
            }),
        };
    }
    _renderServerTimingHeadersConfig(samplingRate) {
        if (!core_1.Token.isUnresolved(samplingRate)) {
            if ((samplingRate < 0 || samplingRate > 100)) {
                throw new Error(`Sampling rate must be between 0 and 100 (inclusive), received ${samplingRate}`);
            }
            if (!hasMaxDecimalPlaces(samplingRate, 4)) {
                throw new Error(`Sampling rate can have up to four decimal places, received ${samplingRate}`);
            }
        }
        return {
            enabled: true,
            samplingRate,
        };
    }
}
_a = JSII_RTTI_SYMBOL_1;
ResponseHeadersPolicy[_a] = { fqn: "aws-cdk-lib.aws_cloudfront.ResponseHeadersPolicy", version: "2.75.1" };
/** Use this managed policy to allow simple CORS requests from any origin. */
ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS = ResponseHeadersPolicy.fromManagedResponseHeadersPolicy('60669652-455b-4ae9-85a4-c4c02393f86c');
/** Use this managed policy to allow CORS requests from any origin, including preflight requests. */
ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS_WITH_PREFLIGHT = ResponseHeadersPolicy.fromManagedResponseHeadersPolicy('5cc3b908-e619-4b99-88e5-2cf7f45965bd');
/** Use this managed policy to add a set of security headers to all responses that CloudFront sends to viewers. */
ResponseHeadersPolicy.SECURITY_HEADERS = ResponseHeadersPolicy.fromManagedResponseHeadersPolicy('67f7725c-6f97-4210-82d7-5512b31e9d03');
/** Use this managed policy to allow simple CORS requests from any origin and add a set of security headers to all responses that CloudFront sends to viewers. */
ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS_AND_SECURITY_HEADERS = ResponseHeadersPolicy.fromManagedResponseHeadersPolicy('e61eb60c-9c35-4d20-a928-2b84e02af89c');
/** Use this managed policy to allow CORS requests from any origin, including preflight requests, and add a set of security headers to all responses that CloudFront sends to viewers. */
ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS_WITH_PREFLIGHT_AND_SECURITY_HEADERS = ResponseHeadersPolicy.fromManagedResponseHeadersPolicy('eaab4381-ed33-4a86-88ca-d9558dc6cd63');
exports.ResponseHeadersPolicy = ResponseHeadersPolicy;
/**
 * Enum representing possible values of the X-Frame-Options HTTP response header.
 */
var HeadersFrameOption;
(function (HeadersFrameOption) {
    /**
     * The page can only be displayed in a frame on the same origin as the page itself.
     */
    HeadersFrameOption["DENY"] = "DENY";
    /**
     * The page can only be displayed in a frame on the specified origin.
     */
    HeadersFrameOption["SAMEORIGIN"] = "SAMEORIGIN";
})(HeadersFrameOption = exports.HeadersFrameOption || (exports.HeadersFrameOption = {}));
/**
 * Enum representing possible values of the Referrer-Policy HTTP response header.
 */
var HeadersReferrerPolicy;
(function (HeadersReferrerPolicy) {
    /**
     * The referrer policy is not set.
     */
    HeadersReferrerPolicy["NO_REFERRER"] = "no-referrer";
    /**
     * The referrer policy is no-referrer-when-downgrade.
     */
    HeadersReferrerPolicy["NO_REFERRER_WHEN_DOWNGRADE"] = "no-referrer-when-downgrade";
    /**
     * The referrer policy is origin.
     */
    HeadersReferrerPolicy["ORIGIN"] = "origin";
    /**
     * The referrer policy is origin-when-cross-origin.
     */
    HeadersReferrerPolicy["ORIGIN_WHEN_CROSS_ORIGIN"] = "origin-when-cross-origin";
    /**
     * The referrer policy is same-origin.
     */
    HeadersReferrerPolicy["SAME_ORIGIN"] = "same-origin";
    /**
     * The referrer policy is strict-origin.
     */
    HeadersReferrerPolicy["STRICT_ORIGIN"] = "strict-origin";
    /**
     * The referrer policy is strict-origin-when-cross-origin.
     */
    HeadersReferrerPolicy["STRICT_ORIGIN_WHEN_CROSS_ORIGIN"] = "strict-origin-when-cross-origin";
    /**
     * The referrer policy is unsafe-url.
     */
    HeadersReferrerPolicy["UNSAFE_URL"] = "unsafe-url";
})(HeadersReferrerPolicy = exports.HeadersReferrerPolicy || (exports.HeadersReferrerPolicy = {}));
function hasMaxDecimalPlaces(num, decimals) {
    const parts = num.toString().split('.');
    return parts.length === 1 || parts[1].length <= decimals;
}
//# sourceMappingURL=data:application/json;base64,