"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnVPCEConfiguration = exports.CfnTestGridProject = exports.CfnProject = exports.CfnNetworkProfile = exports.CfnInstanceProfile = exports.CfnDevicePool = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("../../core");
const cfn_parse = require("../../core/lib/helpers-internal");
/**
 * Determine whether the given properties match those of a `CfnDevicePoolProps`
 *
 * @param properties - the TypeScript properties of a `CfnDevicePoolProps`
 *
 * @returns the result of the validation.
 */
function CfnDevicePoolPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
    errors.collect(cdk.propertyValidator('maxDevices', cdk.validateNumber)(properties.maxDevices));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('projectArn', cdk.requiredValidator)(properties.projectArn));
    errors.collect(cdk.propertyValidator('projectArn', cdk.validateString)(properties.projectArn));
    errors.collect(cdk.propertyValidator('rules', cdk.requiredValidator)(properties.rules));
    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnDevicePool_RulePropertyValidator))(properties.rules));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnDevicePoolProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::DevicePool` resource
 *
 * @param properties - the TypeScript properties of a `CfnDevicePoolProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::DevicePool` resource.
 */
// @ts-ignore TS6133
function cfnDevicePoolPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnDevicePoolPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        ProjectArn: cdk.stringToCloudFormation(properties.projectArn),
        Rules: cdk.listMapper(cfnDevicePoolRulePropertyToCloudFormation)(properties.rules),
        Description: cdk.stringToCloudFormation(properties.description),
        MaxDevices: cdk.numberToCloudFormation(properties.maxDevices),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnDevicePoolPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('projectArn', 'ProjectArn', cfn_parse.FromCloudFormation.getString(properties.ProjectArn));
    ret.addPropertyResult('rules', 'Rules', cfn_parse.FromCloudFormation.getArray(CfnDevicePoolRulePropertyFromCloudFormation)(properties.Rules));
    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);
    ret.addPropertyResult('maxDevices', 'MaxDevices', properties.MaxDevices != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxDevices) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::DeviceFarm::DevicePool`
 *
 * Represents a request to the create device pool operation.
 *
 * @cloudformationResource AWS::DeviceFarm::DevicePool
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devicefarm-devicepool.html
 */
class CfnDevicePool extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDevicePoolPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDevicePool(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::DeviceFarm::DevicePool`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnDevicePool.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_devicefarm_CfnDevicePoolProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnDevicePool);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        cdk.requireProperty(props, 'projectArn', this);
        cdk.requireProperty(props, 'rules', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.projectArn = props.projectArn;
        this.rules = props.rules;
        this.description = props.description;
        this.maxDevices = props.maxDevices;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::DeviceFarm::DevicePool", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDevicePool.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            projectArn: this.projectArn,
            rules: this.rules,
            description: this.description,
            maxDevices: this.maxDevices,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnDevicePoolPropsToCloudFormation(props);
    }
}
_a = JSII_RTTI_SYMBOL_1;
CfnDevicePool[_a] = { fqn: "aws-cdk-lib.aws_devicefarm.CfnDevicePool", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnDevicePool.CFN_RESOURCE_TYPE_NAME = "AWS::DeviceFarm::DevicePool";
exports.CfnDevicePool = CfnDevicePool;
/**
 * Determine whether the given properties match those of a `RuleProperty`
 *
 * @param properties - the TypeScript properties of a `RuleProperty`
 *
 * @returns the result of the validation.
 */
function CfnDevicePool_RulePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('attribute', cdk.validateString)(properties.attribute));
    errors.collect(cdk.propertyValidator('operator', cdk.validateString)(properties.operator));
    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));
    return errors.wrap('supplied properties not correct for "RuleProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::DevicePool.Rule` resource
 *
 * @param properties - the TypeScript properties of a `RuleProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::DevicePool.Rule` resource.
 */
// @ts-ignore TS6133
function cfnDevicePoolRulePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnDevicePool_RulePropertyValidator(properties).assertSuccess();
    return {
        Attribute: cdk.stringToCloudFormation(properties.attribute),
        Operator: cdk.stringToCloudFormation(properties.operator),
        Value: cdk.stringToCloudFormation(properties.value),
    };
}
// @ts-ignore TS6133
function CfnDevicePoolRulePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('attribute', 'Attribute', properties.Attribute != null ? cfn_parse.FromCloudFormation.getString(properties.Attribute) : undefined);
    ret.addPropertyResult('operator', 'Operator', properties.Operator != null ? cfn_parse.FromCloudFormation.getString(properties.Operator) : undefined);
    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnInstanceProfileProps`
 *
 * @param properties - the TypeScript properties of a `CfnInstanceProfileProps`
 *
 * @returns the result of the validation.
 */
function CfnInstanceProfilePropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
    errors.collect(cdk.propertyValidator('excludeAppPackagesFromCleanup', cdk.listValidator(cdk.validateString))(properties.excludeAppPackagesFromCleanup));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('packageCleanup', cdk.validateBoolean)(properties.packageCleanup));
    errors.collect(cdk.propertyValidator('rebootAfterUse', cdk.validateBoolean)(properties.rebootAfterUse));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnInstanceProfileProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::InstanceProfile` resource
 *
 * @param properties - the TypeScript properties of a `CfnInstanceProfileProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::InstanceProfile` resource.
 */
// @ts-ignore TS6133
function cfnInstanceProfilePropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInstanceProfilePropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        Description: cdk.stringToCloudFormation(properties.description),
        ExcludeAppPackagesFromCleanup: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludeAppPackagesFromCleanup),
        PackageCleanup: cdk.booleanToCloudFormation(properties.packageCleanup),
        RebootAfterUse: cdk.booleanToCloudFormation(properties.rebootAfterUse),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnInstanceProfilePropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);
    ret.addPropertyResult('excludeAppPackagesFromCleanup', 'ExcludeAppPackagesFromCleanup', properties.ExcludeAppPackagesFromCleanup != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludeAppPackagesFromCleanup) : undefined);
    ret.addPropertyResult('packageCleanup', 'PackageCleanup', properties.PackageCleanup != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PackageCleanup) : undefined);
    ret.addPropertyResult('rebootAfterUse', 'RebootAfterUse', properties.RebootAfterUse != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RebootAfterUse) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::DeviceFarm::InstanceProfile`
 *
 * Creates a profile that can be applied to one or more private fleet device instances.
 *
 * @cloudformationResource AWS::DeviceFarm::InstanceProfile
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devicefarm-instanceprofile.html
 */
class CfnInstanceProfile extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnInstanceProfilePropsFromCloudFormation(resourceProperties);
        const ret = new CfnInstanceProfile(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::DeviceFarm::InstanceProfile`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_devicefarm_CfnInstanceProfileProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnInstanceProfile);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.description = props.description;
        this.excludeAppPackagesFromCleanup = props.excludeAppPackagesFromCleanup;
        this.packageCleanup = props.packageCleanup;
        this.rebootAfterUse = props.rebootAfterUse;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::DeviceFarm::InstanceProfile", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            description: this.description,
            excludeAppPackagesFromCleanup: this.excludeAppPackagesFromCleanup,
            packageCleanup: this.packageCleanup,
            rebootAfterUse: this.rebootAfterUse,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnInstanceProfilePropsToCloudFormation(props);
    }
}
_b = JSII_RTTI_SYMBOL_1;
CfnInstanceProfile[_b] = { fqn: "aws-cdk-lib.aws_devicefarm.CfnInstanceProfile", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME = "AWS::DeviceFarm::InstanceProfile";
exports.CfnInstanceProfile = CfnInstanceProfile;
/**
 * Determine whether the given properties match those of a `CfnNetworkProfileProps`
 *
 * @param properties - the TypeScript properties of a `CfnNetworkProfileProps`
 *
 * @returns the result of the validation.
 */
function CfnNetworkProfilePropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
    errors.collect(cdk.propertyValidator('downlinkBandwidthBits', cdk.validateNumber)(properties.downlinkBandwidthBits));
    errors.collect(cdk.propertyValidator('downlinkDelayMs', cdk.validateNumber)(properties.downlinkDelayMs));
    errors.collect(cdk.propertyValidator('downlinkJitterMs', cdk.validateNumber)(properties.downlinkJitterMs));
    errors.collect(cdk.propertyValidator('downlinkLossPercent', cdk.validateNumber)(properties.downlinkLossPercent));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('projectArn', cdk.requiredValidator)(properties.projectArn));
    errors.collect(cdk.propertyValidator('projectArn', cdk.validateString)(properties.projectArn));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    errors.collect(cdk.propertyValidator('uplinkBandwidthBits', cdk.validateNumber)(properties.uplinkBandwidthBits));
    errors.collect(cdk.propertyValidator('uplinkDelayMs', cdk.validateNumber)(properties.uplinkDelayMs));
    errors.collect(cdk.propertyValidator('uplinkJitterMs', cdk.validateNumber)(properties.uplinkJitterMs));
    errors.collect(cdk.propertyValidator('uplinkLossPercent', cdk.validateNumber)(properties.uplinkLossPercent));
    return errors.wrap('supplied properties not correct for "CfnNetworkProfileProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::NetworkProfile` resource
 *
 * @param properties - the TypeScript properties of a `CfnNetworkProfileProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::NetworkProfile` resource.
 */
// @ts-ignore TS6133
function cfnNetworkProfilePropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnNetworkProfilePropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        ProjectArn: cdk.stringToCloudFormation(properties.projectArn),
        Description: cdk.stringToCloudFormation(properties.description),
        DownlinkBandwidthBits: cdk.numberToCloudFormation(properties.downlinkBandwidthBits),
        DownlinkDelayMs: cdk.numberToCloudFormation(properties.downlinkDelayMs),
        DownlinkJitterMs: cdk.numberToCloudFormation(properties.downlinkJitterMs),
        DownlinkLossPercent: cdk.numberToCloudFormation(properties.downlinkLossPercent),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        UplinkBandwidthBits: cdk.numberToCloudFormation(properties.uplinkBandwidthBits),
        UplinkDelayMs: cdk.numberToCloudFormation(properties.uplinkDelayMs),
        UplinkJitterMs: cdk.numberToCloudFormation(properties.uplinkJitterMs),
        UplinkLossPercent: cdk.numberToCloudFormation(properties.uplinkLossPercent),
    };
}
// @ts-ignore TS6133
function CfnNetworkProfilePropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('projectArn', 'ProjectArn', cfn_parse.FromCloudFormation.getString(properties.ProjectArn));
    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);
    ret.addPropertyResult('downlinkBandwidthBits', 'DownlinkBandwidthBits', properties.DownlinkBandwidthBits != null ? cfn_parse.FromCloudFormation.getNumber(properties.DownlinkBandwidthBits) : undefined);
    ret.addPropertyResult('downlinkDelayMs', 'DownlinkDelayMs', properties.DownlinkDelayMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.DownlinkDelayMs) : undefined);
    ret.addPropertyResult('downlinkJitterMs', 'DownlinkJitterMs', properties.DownlinkJitterMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.DownlinkJitterMs) : undefined);
    ret.addPropertyResult('downlinkLossPercent', 'DownlinkLossPercent', properties.DownlinkLossPercent != null ? cfn_parse.FromCloudFormation.getNumber(properties.DownlinkLossPercent) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addPropertyResult('uplinkBandwidthBits', 'UplinkBandwidthBits', properties.UplinkBandwidthBits != null ? cfn_parse.FromCloudFormation.getNumber(properties.UplinkBandwidthBits) : undefined);
    ret.addPropertyResult('uplinkDelayMs', 'UplinkDelayMs', properties.UplinkDelayMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.UplinkDelayMs) : undefined);
    ret.addPropertyResult('uplinkJitterMs', 'UplinkJitterMs', properties.UplinkJitterMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.UplinkJitterMs) : undefined);
    ret.addPropertyResult('uplinkLossPercent', 'UplinkLossPercent', properties.UplinkLossPercent != null ? cfn_parse.FromCloudFormation.getNumber(properties.UplinkLossPercent) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::DeviceFarm::NetworkProfile`
 *
 * Creates a network profile.
 *
 * @cloudformationResource AWS::DeviceFarm::NetworkProfile
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devicefarm-networkprofile.html
 */
class CfnNetworkProfile extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkProfilePropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkProfile(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::DeviceFarm::NetworkProfile`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkProfile.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_devicefarm_CfnNetworkProfileProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnNetworkProfile);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        cdk.requireProperty(props, 'projectArn', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.projectArn = props.projectArn;
        this.description = props.description;
        this.downlinkBandwidthBits = props.downlinkBandwidthBits;
        this.downlinkDelayMs = props.downlinkDelayMs;
        this.downlinkJitterMs = props.downlinkJitterMs;
        this.downlinkLossPercent = props.downlinkLossPercent;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::DeviceFarm::NetworkProfile", props.tags, { tagPropertyName: 'tags' });
        this.uplinkBandwidthBits = props.uplinkBandwidthBits;
        this.uplinkDelayMs = props.uplinkDelayMs;
        this.uplinkJitterMs = props.uplinkJitterMs;
        this.uplinkLossPercent = props.uplinkLossPercent;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkProfile.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            projectArn: this.projectArn,
            description: this.description,
            downlinkBandwidthBits: this.downlinkBandwidthBits,
            downlinkDelayMs: this.downlinkDelayMs,
            downlinkJitterMs: this.downlinkJitterMs,
            downlinkLossPercent: this.downlinkLossPercent,
            tags: this.tags.renderTags(),
            uplinkBandwidthBits: this.uplinkBandwidthBits,
            uplinkDelayMs: this.uplinkDelayMs,
            uplinkJitterMs: this.uplinkJitterMs,
            uplinkLossPercent: this.uplinkLossPercent,
        };
    }
    renderProperties(props) {
        return cfnNetworkProfilePropsToCloudFormation(props);
    }
}
_c = JSII_RTTI_SYMBOL_1;
CfnNetworkProfile[_c] = { fqn: "aws-cdk-lib.aws_devicefarm.CfnNetworkProfile", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnNetworkProfile.CFN_RESOURCE_TYPE_NAME = "AWS::DeviceFarm::NetworkProfile";
exports.CfnNetworkProfile = CfnNetworkProfile;
/**
 * Determine whether the given properties match those of a `CfnProjectProps`
 *
 * @param properties - the TypeScript properties of a `CfnProjectProps`
 *
 * @returns the result of the validation.
 */
function CfnProjectPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('defaultJobTimeoutMinutes', cdk.validateNumber)(properties.defaultJobTimeoutMinutes));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnProjectProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::Project` resource
 *
 * @param properties - the TypeScript properties of a `CfnProjectProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::Project` resource.
 */
// @ts-ignore TS6133
function cfnProjectPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnProjectPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        DefaultJobTimeoutMinutes: cdk.numberToCloudFormation(properties.defaultJobTimeoutMinutes),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnProjectPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('defaultJobTimeoutMinutes', 'DefaultJobTimeoutMinutes', properties.DefaultJobTimeoutMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultJobTimeoutMinutes) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::DeviceFarm::Project`
 *
 * Creates a project.
 *
 * @cloudformationResource AWS::DeviceFarm::Project
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devicefarm-project.html
 */
class CfnProject extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnProjectPropsFromCloudFormation(resourceProperties);
        const ret = new CfnProject(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::DeviceFarm::Project`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnProject.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_devicefarm_CfnProjectProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnProject);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.defaultJobTimeoutMinutes = props.defaultJobTimeoutMinutes;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::DeviceFarm::Project", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnProject.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            defaultJobTimeoutMinutes: this.defaultJobTimeoutMinutes,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnProjectPropsToCloudFormation(props);
    }
}
_d = JSII_RTTI_SYMBOL_1;
CfnProject[_d] = { fqn: "aws-cdk-lib.aws_devicefarm.CfnProject", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnProject.CFN_RESOURCE_TYPE_NAME = "AWS::DeviceFarm::Project";
exports.CfnProject = CfnProject;
/**
 * Determine whether the given properties match those of a `CfnTestGridProjectProps`
 *
 * @param properties - the TypeScript properties of a `CfnTestGridProjectProps`
 *
 * @returns the result of the validation.
 */
function CfnTestGridProjectPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    errors.collect(cdk.propertyValidator('vpcConfig', CfnTestGridProject_VpcConfigPropertyValidator)(properties.vpcConfig));
    return errors.wrap('supplied properties not correct for "CfnTestGridProjectProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::TestGridProject` resource
 *
 * @param properties - the TypeScript properties of a `CfnTestGridProjectProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::TestGridProject` resource.
 */
// @ts-ignore TS6133
function cfnTestGridProjectPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTestGridProjectPropsValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        Description: cdk.stringToCloudFormation(properties.description),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        VpcConfig: cfnTestGridProjectVpcConfigPropertyToCloudFormation(properties.vpcConfig),
    };
}
// @ts-ignore TS6133
function CfnTestGridProjectPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));
    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnTestGridProjectVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::DeviceFarm::TestGridProject`
 *
 * A Selenium testing project. Projects are used to collect and collate sessions.
 *
 * @cloudformationResource AWS::DeviceFarm::TestGridProject
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devicefarm-testgridproject.html
 */
class CfnTestGridProject extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTestGridProjectPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTestGridProject(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::DeviceFarm::TestGridProject`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnTestGridProject.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_devicefarm_CfnTestGridProjectProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnTestGridProject);
            }
            throw error;
        }
        cdk.requireProperty(props, 'name', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.name = props.name;
        this.description = props.description;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::DeviceFarm::TestGridProject", props.tags, { tagPropertyName: 'tags' });
        this.vpcConfig = props.vpcConfig;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTestGridProject.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            name: this.name,
            description: this.description,
            tags: this.tags.renderTags(),
            vpcConfig: this.vpcConfig,
        };
    }
    renderProperties(props) {
        return cfnTestGridProjectPropsToCloudFormation(props);
    }
}
_e = JSII_RTTI_SYMBOL_1;
CfnTestGridProject[_e] = { fqn: "aws-cdk-lib.aws_devicefarm.CfnTestGridProject", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnTestGridProject.CFN_RESOURCE_TYPE_NAME = "AWS::DeviceFarm::TestGridProject";
exports.CfnTestGridProject = CfnTestGridProject;
/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnTestGridProject_VpcConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));
    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));
    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));
    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
    return errors.wrap('supplied properties not correct for "VpcConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::TestGridProject.VpcConfig` resource
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::TestGridProject.VpcConfig` resource.
 */
// @ts-ignore TS6133
function cfnTestGridProjectVpcConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTestGridProject_VpcConfigPropertyValidator(properties).assertSuccess();
    return {
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
    };
}
// @ts-ignore TS6133
function CfnTestGridProjectVpcConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));
    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));
    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnVPCEConfigurationProps`
 *
 * @param properties - the TypeScript properties of a `CfnVPCEConfigurationProps`
 *
 * @returns the result of the validation.
 */
function CfnVPCEConfigurationPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('serviceDnsName', cdk.requiredValidator)(properties.serviceDnsName));
    errors.collect(cdk.propertyValidator('serviceDnsName', cdk.validateString)(properties.serviceDnsName));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    errors.collect(cdk.propertyValidator('vpceConfigurationDescription', cdk.validateString)(properties.vpceConfigurationDescription));
    errors.collect(cdk.propertyValidator('vpceConfigurationName', cdk.requiredValidator)(properties.vpceConfigurationName));
    errors.collect(cdk.propertyValidator('vpceConfigurationName', cdk.validateString)(properties.vpceConfigurationName));
    errors.collect(cdk.propertyValidator('vpceServiceName', cdk.requiredValidator)(properties.vpceServiceName));
    errors.collect(cdk.propertyValidator('vpceServiceName', cdk.validateString)(properties.vpceServiceName));
    return errors.wrap('supplied properties not correct for "CfnVPCEConfigurationProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::DeviceFarm::VPCEConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `CfnVPCEConfigurationProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::DeviceFarm::VPCEConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnVPCEConfigurationPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnVPCEConfigurationPropsValidator(properties).assertSuccess();
    return {
        ServiceDnsName: cdk.stringToCloudFormation(properties.serviceDnsName),
        VpceConfigurationName: cdk.stringToCloudFormation(properties.vpceConfigurationName),
        VpceServiceName: cdk.stringToCloudFormation(properties.vpceServiceName),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        VpceConfigurationDescription: cdk.stringToCloudFormation(properties.vpceConfigurationDescription),
    };
}
// @ts-ignore TS6133
function CfnVPCEConfigurationPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('serviceDnsName', 'ServiceDnsName', cfn_parse.FromCloudFormation.getString(properties.ServiceDnsName));
    ret.addPropertyResult('vpceConfigurationName', 'VpceConfigurationName', cfn_parse.FromCloudFormation.getString(properties.VpceConfigurationName));
    ret.addPropertyResult('vpceServiceName', 'VpceServiceName', cfn_parse.FromCloudFormation.getString(properties.VpceServiceName));
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addPropertyResult('vpceConfigurationDescription', 'VpceConfigurationDescription', properties.VpceConfigurationDescription != null ? cfn_parse.FromCloudFormation.getString(properties.VpceConfigurationDescription) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::DeviceFarm::VPCEConfiguration`
 *
 * Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint service.
 *
 * @cloudformationResource AWS::DeviceFarm::VPCEConfiguration
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devicefarm-vpceconfiguration.html
 */
class CfnVPCEConfiguration extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCEConfigurationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCEConfiguration(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::DeviceFarm::VPCEConfiguration`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCEConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_devicefarm_CfnVPCEConfigurationProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnVPCEConfiguration);
            }
            throw error;
        }
        cdk.requireProperty(props, 'serviceDnsName', this);
        cdk.requireProperty(props, 'vpceConfigurationName', this);
        cdk.requireProperty(props, 'vpceServiceName', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.serviceDnsName = props.serviceDnsName;
        this.vpceConfigurationName = props.vpceConfigurationName;
        this.vpceServiceName = props.vpceServiceName;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::DeviceFarm::VPCEConfiguration", props.tags, { tagPropertyName: 'tags' });
        this.vpceConfigurationDescription = props.vpceConfigurationDescription;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCEConfiguration.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            serviceDnsName: this.serviceDnsName,
            vpceConfigurationName: this.vpceConfigurationName,
            vpceServiceName: this.vpceServiceName,
            tags: this.tags.renderTags(),
            vpceConfigurationDescription: this.vpceConfigurationDescription,
        };
    }
    renderProperties(props) {
        return cfnVPCEConfigurationPropsToCloudFormation(props);
    }
}
_f = JSII_RTTI_SYMBOL_1;
CfnVPCEConfiguration[_f] = { fqn: "aws-cdk-lib.aws_devicefarm.CfnVPCEConfiguration", version: "2.75.1" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnVPCEConfiguration.CFN_RESOURCE_TYPE_NAME = "AWS::DeviceFarm::VPCEConfiguration";
exports.CfnVPCEConfiguration = CfnVPCEConfiguration;
//# sourceMappingURL=data:application/json;base64,