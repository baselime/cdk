"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupPlan = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const backup_generated_1 = require("./backup.generated");
const rule_1 = require("./rule");
const selection_1 = require("./selection");
const vault_1 = require("./vault");
/**
 * A backup plan
 */
class BackupPlan extends core_1.Resource {
    /**
     * Import an existing backup plan
     */
    static fromBackupPlanId(scope, id, backupPlanId) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.backupPlanId = backupPlanId;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Daily with 35 day retention
     */
    static daily35DayRetention(scope, id, backupVault) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.daily35DayRetention);
            }
            throw error;
        }
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        return plan;
    }
    /**
     * Daily and monthly with 1 year retention
     */
    static dailyMonthly1YearRetention(scope, id, backupVault) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.dailyMonthly1YearRetention);
            }
            throw error;
        }
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        plan.addRule(rule_1.BackupPlanRule.monthly1Year());
        return plan;
    }
    /**
     * Daily, weekly and monthly with 5 year retention
     */
    static dailyWeeklyMonthly5YearRetention(scope, id, backupVault) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.dailyWeeklyMonthly5YearRetention);
            }
            throw error;
        }
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        plan.addRule(rule_1.BackupPlanRule.weekly());
        plan.addRule(rule_1.BackupPlanRule.monthly5Year());
        return plan;
    }
    /**
     * Daily, weekly and monthly with 7 year retention
     */
    static dailyWeeklyMonthly7YearRetention(scope, id, backupVault) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.dailyWeeklyMonthly7YearRetention);
            }
            throw error;
        }
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        plan.addRule(rule_1.BackupPlanRule.weekly());
        plan.addRule(rule_1.BackupPlanRule.monthly7Year());
        return plan;
    }
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.rules = [];
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupPlanProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, BackupPlan);
            }
            throw error;
        }
        const plan = new backup_generated_1.CfnBackupPlan(this, 'Resource', {
            backupPlan: {
                advancedBackupSettings: this.advancedBackupSettings(props),
                backupPlanName: props.backupPlanName || id,
                backupPlanRule: core_1.Lazy.any({ produce: () => this.rules }, { omitEmptyArray: true }),
            },
        });
        this.backupPlanId = plan.attrBackupPlanId;
        this.backupPlanArn = plan.attrBackupPlanArn;
        this.versionId = plan.attrVersionId;
        this._backupVault = props.backupVault;
        for (const rule of props.backupPlanRules || []) {
            this.addRule(rule);
        }
        this.node.addValidation({ validate: () => this.validatePlan() });
    }
    advancedBackupSettings(props) {
        if (!props.windowsVss) {
            return undefined;
        }
        return [{
                backupOptions: {
                    WindowsVSS: 'enabled',
                },
                resourceType: 'EC2',
            }];
    }
    /**
     * Adds a rule to a plan
     *
     * @param rule the rule to add
     */
    addRule(rule) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupPlanRule(rule);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addRule);
            }
            throw error;
        }
        let vault;
        if (rule.props.backupVault) {
            vault = rule.props.backupVault;
        }
        else if (this._backupVault) {
            vault = this._backupVault;
        }
        else {
            this._backupVault = new vault_1.BackupVault(this, 'Vault');
            vault = this._backupVault;
        }
        this.rules.push({
            completionWindowMinutes: rule.props.completionWindow?.toMinutes(),
            lifecycle: (rule.props.deleteAfter || rule.props.moveToColdStorageAfter) && {
                deleteAfterDays: rule.props.deleteAfter?.toDays(),
                moveToColdStorageAfterDays: rule.props.moveToColdStorageAfter?.toDays(),
            },
            ruleName: rule.props.ruleName ?? `${this.node.id}Rule${this.rules.length}`,
            scheduleExpression: rule.props.scheduleExpression?.expressionString,
            startWindowMinutes: rule.props.startWindow?.toMinutes(),
            enableContinuousBackup: rule.props.enableContinuousBackup,
            targetBackupVault: vault.backupVaultName,
            copyActions: rule.props.copyActions?.map(this.planCopyActions),
        });
    }
    planCopyActions(props) {
        return {
            destinationBackupVaultArn: props.destinationBackupVault.backupVaultArn,
            lifecycle: (props.deleteAfter || props.moveToColdStorageAfter) && {
                deleteAfterDays: props.deleteAfter?.toDays(),
                moveToColdStorageAfterDays: props.moveToColdStorageAfter?.toDays(),
            },
        };
    }
    /**
     * The backup vault where backups are stored if not defined at
     * the rule level
     */
    get backupVault() {
        if (!this._backupVault) {
            // This cannot happen but is here to make TypeScript happy
            throw new Error('No backup vault!');
        }
        return this._backupVault;
    }
    /**
     * Adds a selection to this plan
     */
    addSelection(id, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupSelectionOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addSelection);
            }
            throw error;
        }
        return new selection_1.BackupSelection(this, id, {
            backupPlan: this,
            ...options,
        });
    }
    validatePlan() {
        if (this.rules.length === 0) {
            return ['A backup plan must have at least 1 rule.'];
        }
        return [];
    }
}
_a = JSII_RTTI_SYMBOL_1;
BackupPlan[_a] = { fqn: "aws-cdk-lib.aws_backup.BackupPlan", version: "2.75.1" };
exports.BackupPlan = BackupPlan;
//# sourceMappingURL=data:application/json;base64,