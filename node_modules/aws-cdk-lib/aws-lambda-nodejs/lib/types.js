"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Charset = exports.SourceMapMode = exports.LogLevel = exports.OutputFormat = void 0;
/**
 * Output format for the generated JavaScript files
 */
var OutputFormat;
(function (OutputFormat) {
    /**
     * CommonJS
     */
    OutputFormat["CJS"] = "cjs";
    /**
     * ECMAScript module
     *
     * Requires a running environment that supports `import` and `export` syntax.
     */
    OutputFormat["ESM"] = "esm";
})(OutputFormat = exports.OutputFormat || (exports.OutputFormat = {}));
/**
 * Log levels for esbuild and package managers' install commands.
 */
var LogLevel;
(function (LogLevel) {
    /** Show everything */
    LogLevel["INFO"] = "info";
    /** Show warnings and errors */
    LogLevel["WARNING"] = "warning";
    /** Show errors only */
    LogLevel["ERROR"] = "error";
    /** Show nothing */
    LogLevel["SILENT"] = "silent";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * SourceMap mode for esbuild
 * @see https://esbuild.github.io/api/#sourcemap
 */
var SourceMapMode;
(function (SourceMapMode) {
    /**
     * Default sourceMap mode - will generate a .js.map file alongside any generated .js file and add a special //# sourceMappingURL=
     * comment to the bottom of the .js file pointing to the .js.map file
     */
    SourceMapMode["DEFAULT"] = "default";
    /**
     *  External sourceMap mode - If you want to omit the special //# sourceMappingURL= comment from the generated .js file but you still
     *  want to generate the .js.map files
     */
    SourceMapMode["EXTERNAL"] = "external";
    /**
     * Inline sourceMap mode - If you want to insert the entire source map into the .js file instead of generating a separate .js.map file
     */
    SourceMapMode["INLINE"] = "inline";
    /**
     * Both sourceMap mode - If you want to have the effect of both inline and external simultaneously
     */
    SourceMapMode["BOTH"] = "both";
})(SourceMapMode = exports.SourceMapMode || (exports.SourceMapMode = {}));
/**
 * Charset for esbuild's output
 */
var Charset;
(function (Charset) {
    /**
     * ASCII
     *
     * Any non-ASCII characters are escaped using backslash escape sequences
     */
    Charset["ASCII"] = "ascii";
    /**
     * UTF-8
     *
     * Keep original characters without using escape sequences
     */
    Charset["UTF8"] = "utf8";
})(Charset = exports.Charset || (exports.Charset = {}));
//# sourceMappingURL=data:application/json;base64,