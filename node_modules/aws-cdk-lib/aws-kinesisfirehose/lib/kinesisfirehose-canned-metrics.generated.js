"use strict";
// Copyright 2012-2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirehoseMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class FirehoseMetrics {
    static incomingBytesSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'IncomingBytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static incomingRecordsSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'IncomingRecords',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static backupToS3BytesSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'BackupToS3.Bytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static backupToS3DataFreshnessAverage(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'BackupToS3.DataFreshness',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static backupToS3RecordsSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'BackupToS3.Records',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static backupToS3SuccessSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'BackupToS3.Success',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static dataReadFromKinesisStreamBytesSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DataReadFromKinesisStream.Bytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static dataReadFromKinesisStreamRecordsSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DataReadFromKinesisStream.Records',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToElasticsearchBytesSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToElasticsearch.Bytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToElasticsearchRecordsSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToElasticsearch.Records',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToElasticsearchSuccessSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToElasticsearch.Success',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToRedshiftBytesSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToRedshift.Bytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToRedshiftRecordsSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToRedshift.Records',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToRedshiftSuccessSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToRedshift.Success',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToS3BytesSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToS3.Bytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToS3DataFreshnessAverage(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToS3.DataFreshness',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static deliveryToS3RecordsSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToS3.Records',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToS3SuccessSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToS3.Success',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToSplunkBytesSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToSplunk.Bytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToSplunkDataAckLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToSplunk.DataAckLatency',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static deliveryToSplunkDataFreshnessAverage(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToSplunk.DataFreshness',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static deliveryToSplunkRecordsSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToSplunk.Records',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static deliveryToSplunkSuccessSum(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'DeliveryToSplunk.Success',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static kinesisMillisBehindLatestAverage(dimensions) {
        return {
            namespace: 'AWS/Firehose',
            metricName: 'KinesisMillisBehindLatest',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
}
exports.FirehoseMetrics = FirehoseMetrics;
//# sourceMappingURL=data:application/json;base64,